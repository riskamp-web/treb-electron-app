/*! v10.12.11. Copyright 2018-2021 Structured Data, LLC. All rights reserved. CC BY-ND: https://treb.app/license */
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./lib-util/util.js":
/*!**************************!*\
  !*** ./lib-util/util.js ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\n// someone (jszip?) is asking for this\r\nexports.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\r\n\n\n//# sourceURL=webpack://treb/./lib-util/util.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://treb/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nconst base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n\n\n//# sourceURL=webpack://treb/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/elementtree/lib/constants.js":
/*!***************************************************!*\
  !*** ./node_modules/elementtree/lib/constants.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n *  Copyright 2011 Rackspace\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\nvar DEFAULT_PARSER = 'sax';\n\nexports.DEFAULT_PARSER = DEFAULT_PARSER;\n\n\n//# sourceURL=webpack://treb/./node_modules/elementtree/lib/constants.js?");

/***/ }),

/***/ "./node_modules/elementtree/lib/elementpath.js":
/*!*****************************************************!*\
  !*** ./node_modules/elementtree/lib/elementpath.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n *  Copyright 2011 Rackspace\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\nvar sprintf = __webpack_require__(/*! ./sprintf */ \"./node_modules/elementtree/lib/sprintf.js\").sprintf;\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/elementtree/lib/utils.js\");\nvar SyntaxError = __webpack_require__(/*! ./errors */ \"./node_modules/elementtree/lib/errors.js\").SyntaxError;\n\nvar _cache = {};\n\nvar RE = new RegExp(\n  \"(\" +\n  \"'[^']*'|\\\"[^\\\"]*\\\"|\" +\n  \"::|\" +\n  \"//?|\" +\n  \"\\\\.\\\\.|\" +\n  \"\\\\(\\\\)|\" +\n  \"[/.*:\\\\[\\\\]\\\\(\\\\)@=])|\" +\n  \"((?:\\\\{[^}]+\\\\})?[^/\\\\[\\\\]\\\\(\\\\)@=\\\\s]+)|\" +\n  \"\\\\s+\", 'g'\n);\n\nvar xpath_tokenizer = utils.findall.bind(null, RE);\n\nfunction prepare_tag(next, token) {\n  var tag = token[0];\n\n  function select(context, result) {\n    var i, len, elem, rv = [];\n\n    for (i = 0, len = result.length; i < len; i++) {\n      elem = result[i];\n      elem._children.forEach(function(e) {\n        if (e.tag === tag) {\n          rv.push(e);\n        }\n      });\n    }\n\n    return rv;\n  }\n\n  return select;\n}\n\nfunction prepare_star(next, token) {\n  function select(context, result) {\n    var i, len, elem, rv = [];\n\n    for (i = 0, len = result.length; i < len; i++) {\n      elem = result[i];\n      elem._children.forEach(function(e) {\n        rv.push(e);\n      });\n    }\n\n    return rv;\n  }\n\n  return select;\n}\n\nfunction prepare_dot(next, token) {\n  function select(context, result) {\n    var i, len, elem, rv = [];\n\n    for (i = 0, len = result.length; i < len; i++) {\n      elem = result[i];\n      rv.push(elem);\n    }\n\n    return rv;\n  }\n\n  return select;\n}\n\nfunction prepare_iter(next, token) {\n  var tag;\n  token = next();\n\n  if (token[1] === '*') {\n    tag = '*';\n  }\n  else if (!token[1]) {\n    tag = token[0] || '';\n  }\n  else {\n    throw new SyntaxError(token);\n  }\n\n  function select(context, result) {\n    var i, len, elem, rv = [];\n\n    for (i = 0, len = result.length; i < len; i++) {\n      elem = result[i];\n      elem.iter(tag, function(e) {\n        if (e !== elem) {\n          rv.push(e);\n        }\n      });\n    }\n\n    return rv;\n  }\n\n  return select;\n}\n\nfunction prepare_dot_dot(next, token) {\n  function select(context, result) {\n    var i, len, elem, rv = [], parent_map = context.parent_map;\n\n    if (!parent_map) {\n      context.parent_map = parent_map = {};\n\n      context.root.iter(null, function(p) {\n        p._children.forEach(function(e) {\n          parent_map[e] = p;\n        });\n      });\n    }\n\n    for (i = 0, len = result.length; i < len; i++) {\n      elem = result[i];\n\n      if (parent_map.hasOwnProperty(elem)) {\n        rv.push(parent_map[elem]);\n      }\n    }\n\n    return rv;\n  }\n\n  return select;\n}\n\n\nfunction prepare_predicate(next, token) {\n  var tag, key, value, select;\n  token = next();\n\n  if (token[1] === '@') {\n    // attribute\n    token = next();\n\n    if (token[1]) {\n      throw new SyntaxError(token, 'Invalid attribute predicate');\n    }\n\n    key = token[0];\n    token = next();\n\n    if (token[1] === ']') {\n      select = function(context, result) {\n        var i, len, elem, rv = [];\n\n        for (i = 0, len = result.length; i < len; i++) {\n          elem = result[i];\n\n          if (elem.get(key)) {\n            rv.push(elem);\n          }\n        }\n\n        return rv;\n      };\n    }\n    else if (token[1] === '=') {\n      value = next()[1];\n\n      if (value[0] === '\"' || value[value.length - 1] === '\\'') {\n        value = value.slice(1, value.length - 1);\n      }\n      else {\n        throw new SyntaxError(token, 'Ivalid comparison target');\n      }\n\n      token = next();\n      select = function(context, result) {\n        var i, len, elem, rv = [];\n\n        for (i = 0, len = result.length; i < len; i++) {\n          elem = result[i];\n\n          if (elem.get(key) === value) {\n            rv.push(elem);\n          }\n        }\n\n        return rv;\n      };\n    }\n\n    if (token[1] !== ']') {\n      throw new SyntaxError(token, 'Invalid attribute predicate');\n    }\n  }\n  else if (!token[1]) {\n    tag = token[0] || '';\n    token = next();\n\n    if (token[1] !== ']') {\n      throw new SyntaxError(token, 'Invalid node predicate');\n    }\n\n    select = function(context, result) {\n      var i, len, elem, rv = [];\n\n      for (i = 0, len = result.length; i < len; i++) {\n        elem = result[i];\n\n        if (elem.find(tag)) {\n          rv.push(elem);\n        }\n      }\n\n      return rv;\n    };\n  }\n  else {\n    throw new SyntaxError(null, 'Invalid predicate');\n  }\n\n  return select;\n}\n\n\n\nvar ops = {\n  \"\": prepare_tag,\n  \"*\": prepare_star,\n  \".\": prepare_dot,\n  \"..\": prepare_dot_dot,\n  \"//\": prepare_iter,\n  \"[\": prepare_predicate,\n};\n\nfunction _SelectorContext(root) {\n  this.parent_map = null;\n  this.root = root;\n}\n\nfunction findall(elem, path) {\n  var selector, result, i, len, token, value, select, context;\n\n  if (_cache.hasOwnProperty(path)) {\n    selector = _cache[path];\n  }\n  else {\n    // TODO: Use smarter cache purging approach\n    if (Object.keys(_cache).length > 100) {\n      _cache = {};\n    }\n\n    if (path.charAt(0) === '/') {\n      throw new SyntaxError(null, 'Cannot use absolute path on element');\n    }\n\n    result = xpath_tokenizer(path);\n    selector = [];\n\n    function getToken() {\n      return result.shift();\n    }\n\n    token = getToken();\n    while (true) {\n      var c = token[1] || '';\n      value = ops[c](getToken, token);\n\n      if (!value) {\n        throw new SyntaxError(null, sprintf('Invalid path: %s', path));\n      }\n\n      selector.push(value);\n      token = getToken();\n\n      if (!token) {\n        break;\n      }\n      else if (token[1] === '/') {\n        token = getToken();\n      }\n\n      if (!token) {\n        break;\n      }\n    }\n\n    _cache[path] = selector;\n  }\n\n  // Execute slector pattern\n  result = [elem];\n  context = new _SelectorContext(elem);\n\n  for (i = 0, len = selector.length; i < len; i++) {\n    select = selector[i];\n    result = select(context, result);\n  }\n\n  return result || [];\n}\n\nfunction find(element, path) {\n  var resultElements = findall(element, path);\n\n  if (resultElements && resultElements.length > 0) {\n    return resultElements[0];\n  }\n\n  return null;\n}\n\nfunction findtext(element, path, defvalue) {\n  var resultElements = findall(element, path);\n\n  if (resultElements && resultElements.length > 0) {\n    return resultElements[0].text;\n  }\n\n  return defvalue;\n}\n\n\nexports.find = find;\nexports.findall = findall;\nexports.findtext = findtext;\n\n\n//# sourceURL=webpack://treb/./node_modules/elementtree/lib/elementpath.js?");

/***/ }),

/***/ "./node_modules/elementtree/lib/elementtree.js":
/*!*****************************************************!*\
  !*** ./node_modules/elementtree/lib/elementtree.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n *  Copyright 2011 Rackspace\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\nvar sprintf = __webpack_require__(/*! ./sprintf */ \"./node_modules/elementtree/lib/sprintf.js\").sprintf;\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/elementtree/lib/utils.js\");\nvar ElementPath = __webpack_require__(/*! ./elementpath */ \"./node_modules/elementtree/lib/elementpath.js\");\nvar TreeBuilder = __webpack_require__(/*! ./treebuilder */ \"./node_modules/elementtree/lib/treebuilder.js\").TreeBuilder;\nvar get_parser = __webpack_require__(/*! ./parser */ \"./node_modules/elementtree/lib/parser.js\").get_parser;\nvar constants = __webpack_require__(/*! ./constants */ \"./node_modules/elementtree/lib/constants.js\");\n\nvar element_ids = 0;\n\nfunction Element(tag, attrib)\n{\n  this._id = element_ids++;\n  this.tag = tag;\n  this.attrib = {};\n  this.text = null;\n  this.tail = null;\n  this._children = [];\n\n  if (attrib) {\n    this.attrib = utils.merge(this.attrib, attrib);\n  }\n}\n\nElement.prototype.toString = function()\n{\n  return sprintf(\"<Element %s at %s>\", this.tag, this._id);\n};\n\nElement.prototype.makeelement = function(tag, attrib)\n{\n  return new Element(tag, attrib);\n};\n\nElement.prototype.len = function()\n{\n  return this._children.length;\n};\n\nElement.prototype.getItem = function(index)\n{\n  return this._children[index];\n};\n\nElement.prototype.setItem = function(index, element)\n{\n  this._children[index] = element;\n};\n\nElement.prototype.delItem = function(index)\n{\n  this._children.splice(index, 1);\n};\n\nElement.prototype.getSlice = function(start, stop)\n{\n  return this._children.slice(start, stop);\n};\n\nElement.prototype.setSlice = function(start, stop, elements)\n{\n  var i;\n  var k = 0;\n  for (i = start; i < stop; i++, k++) {\n    this._children[i] = elements[k];\n  }\n};\n\nElement.prototype.delSlice = function(start, stop)\n{\n  this._children.splice(start, stop - start);\n};\n\nElement.prototype.append = function(element)\n{\n  this._children.push(element);\n};\n\nElement.prototype.extend = function(elements)\n{\n  this._children.concat(elements);\n};\n\nElement.prototype.insert = function(index, element)\n{\n  this._children[index] = element;\n};\n\nElement.prototype.remove = function(element)\n{\n  this._children = this._children.filter(function(e) {\n    /* TODO: is this the right way to do this? */\n    if (e._id === element._id) {\n      return false;\n    }\n    return true;\n  });\n};\n\nElement.prototype.getchildren = function() {\n  return this._children;\n};\n\nElement.prototype.find = function(path)\n{\n  return ElementPath.find(this, path);\n};\n\nElement.prototype.findtext = function(path, defvalue)\n{\n  return ElementPath.findtext(this, path, defvalue);\n};\n\nElement.prototype.findall = function(path, defvalue)\n{\n  return ElementPath.findall(this, path, defvalue);\n};\n\nElement.prototype.clear = function()\n{\n  this.attrib = {};\n  this._children = [];\n  this.text = null;\n  this.tail = null;\n};\n\nElement.prototype.get = function(key, defvalue)\n{\n  if (this.attrib[key] !== undefined) {\n    return this.attrib[key];\n  }\n  else {\n    return defvalue;\n  }\n};\n\nElement.prototype.set = function(key, value)\n{\n  this.attrib[key] = value;\n};\n\nElement.prototype.keys = function()\n{\n  return Object.keys(this.attrib);\n};\n\nElement.prototype.items = function()\n{\n  return utils.items(this.attrib);\n};\n\n/*\n * In python this uses a generator, but in v8 we don't have em,\n * so we use a callback instead.\n **/\nElement.prototype.iter = function(tag, callback)\n{\n  var self = this;\n  var i, child;\n\n  if (tag === \"*\") {\n    tag = null;\n  }\n\n  if (tag === null || this.tag === tag) {\n    callback(self);\n  }\n\n  for (i = 0; i < this._children.length; i++) {\n    child = this._children[i];\n    child.iter(tag, function(e) {\n      callback(e);\n    });\n  }\n};\n\nElement.prototype.itertext = function(callback)\n{\n  this.iter(null, function(e) {\n    if (e.text) {\n      callback(e.text);\n    }\n\n    if (e.tail) {\n      callback(e.tail);\n    }\n  });\n};\n\n\nfunction SubElement(parent, tag, attrib) {\n  var element = parent.makeelement(tag, attrib);\n  parent.append(element);\n  return element;\n}\n\nfunction Comment(text) {\n  var element = new Element(Comment);\n  if (text) {\n    element.text = text;\n  }\n  return element;\n}\n\nfunction CData(text) {\n  var element = new Element(CData);\n  if (text) {\n    element.text = text;\n  }\n  return element;\n}\n\nfunction ProcessingInstruction(target, text)\n{\n  var element = new Element(ProcessingInstruction);\n  element.text = target;\n  if (text) {\n    element.text = element.text + \" \" + text;\n  }\n  return element;\n}\n\nfunction QName(text_or_uri, tag)\n{\n  if (tag) {\n    text_or_uri = sprintf(\"{%s}%s\", text_or_uri, tag);\n  }\n  this.text = text_or_uri;\n}\n\nQName.prototype.toString = function() {\n  return this.text;\n};\n\nfunction ElementTree(element)\n{\n  this._root = element;\n}\n\nElementTree.prototype.getroot = function() {\n  return this._root;\n};\n\nElementTree.prototype._setroot = function(element) {\n  this._root = element;\n};\n\nElementTree.prototype.parse = function(source, parser) {\n  if (!parser) {\n    parser = get_parser(constants.DEFAULT_PARSER);\n    parser = new parser.XMLParser(new TreeBuilder());\n  }\n\n  parser.feed(source);\n  this._root = parser.close();\n  return this._root;\n};\n\nElementTree.prototype.iter = function(tag, callback) {\n  this._root.iter(tag, callback);\n};\n\nElementTree.prototype.find = function(path) {\n  return this._root.find(path);\n};\n\nElementTree.prototype.findtext = function(path, defvalue) {\n  return this._root.findtext(path, defvalue);\n};\n\nElementTree.prototype.findall = function(path) {\n  return this._root.findall(path);\n};\n\n/**\n * Unlike ElementTree, we don't write to a file, we return you a string.\n */\nElementTree.prototype.write = function(options) {\n  var sb = [];\n  options = utils.merge({\n    encoding: 'utf-8',\n    xml_declaration: null,\n    default_namespace: null,\n    method: 'xml'}, options);\n\n  if (options.xml_declaration !== false) {\n    sb.push(\"<?xml version='1.0' encoding='\"+options.encoding +\"'?>\\n\");\n  }\n\n  if (options.method === \"text\") {\n    _serialize_text(sb, self._root, encoding);\n  }\n  else {\n    var qnames, namespaces, indent, indent_string;\n    var x = _namespaces(this._root, options.encoding, options.default_namespace);\n    qnames = x[0];\n    namespaces = x[1];\n\n    if (options.hasOwnProperty('indent')) {\n      indent = 0;\n      indent_string = new Array(options.indent + 1).join(' ');\n    }\n    else {\n      indent = false;\n    }\n\n    if (options.method === \"xml\") {\n      _serialize_xml(function(data) {\n        sb.push(data);\n      }, this._root, options.encoding, qnames, namespaces, indent, indent_string);\n    }\n    else {\n      /* TODO: html */\n      throw new Error(\"unknown serialization method \"+ options.method);\n    }\n  }\n\n  return sb.join(\"\");\n};\n\nvar _namespace_map = {\n    /* \"well-known\" namespace prefixes */\n    \"http://www.w3.org/XML/1998/namespace\": \"xml\",\n    \"http://www.w3.org/1999/xhtml\": \"html\",\n    \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\": \"rdf\",\n    \"http://schemas.xmlsoap.org/wsdl/\": \"wsdl\",\n    /* xml schema */\n    \"http://www.w3.org/2001/XMLSchema\": \"xs\",\n    \"http://www.w3.org/2001/XMLSchema-instance\": \"xsi\",\n    /* dublic core */\n    \"http://purl.org/dc/elements/1.1/\": \"dc\",\n};\n\nfunction register_namespace(prefix, uri) {\n  if (/ns\\d+$/.test(prefix)) {\n    throw new Error('Prefix format reserved for internal use');\n  }\n\n  if (_namespace_map.hasOwnProperty(uri) && _namespace_map[uri] === prefix) {\n    delete _namespace_map[uri];\n  }\n\n  _namespace_map[uri] = prefix;\n}\n\n\nfunction _escape(text, encoding, isAttribute, isText) {\n  if (text) {\n    text = text.toString();\n    text = text.replace(/&/g, '&amp;');\n    text = text.replace(/</g, '&lt;');\n    text = text.replace(/>/g, '&gt;');\n    if (!isText) {\n        text = text.replace(/\\n/g, '&#xA;');\n        text = text.replace(/\\r/g, '&#xD;');\n    }\n    if (isAttribute) {\n      text = text.replace(/\"/g, '&quot;');\n    }\n  }\n  return text;\n}\n\n/* TODO: benchmark single regex */\nfunction _escape_attrib(text, encoding) {\n  return _escape(text, encoding, true);\n}\n\nfunction _escape_cdata(text, encoding) {\n  return _escape(text, encoding, false);\n}\n\nfunction _escape_text(text, encoding) {\n  return _escape(text, encoding, false, true);\n}\n\nfunction _namespaces(elem, encoding, default_namespace) {\n  var qnames = {};\n  var namespaces = {};\n\n  if (default_namespace) {\n    namespaces[default_namespace] = \"\";\n  }\n\n  function encode(text) {\n    return text;\n  }\n\n  function add_qname(qname) {\n    if (qname[0] === \"{\") {\n      var tmp = qname.substring(1).split(\"}\", 2);\n      var uri = tmp[0];\n      var tag = tmp[1];\n      var prefix = namespaces[uri];\n\n      if (prefix === undefined) {\n        prefix = _namespace_map[uri];\n        if (prefix === undefined) {\n          prefix = \"ns\" + Object.keys(namespaces).length;\n        }\n        if (prefix !== \"xml\") {\n          namespaces[uri] = prefix;\n        }\n      }\n\n      if (prefix) {\n        qnames[qname] = sprintf(\"%s:%s\", prefix, tag);\n      }\n      else {\n        qnames[qname] = tag;\n      }\n    }\n    else {\n      if (default_namespace) {\n        throw new Error('cannot use non-qualified names with default_namespace option');\n      }\n\n      qnames[qname] = qname;\n    }\n  }\n\n\n  elem.iter(null, function(e) {\n    var i;\n    var tag = e.tag;\n    var text = e.text;\n    var items = e.items();\n\n    if (tag instanceof QName && qnames[tag.text] === undefined) {\n      add_qname(tag.text);\n    }\n    else if (typeof(tag) === \"string\") {\n      add_qname(tag);\n    }\n    else if (tag !== null && tag !== Comment && tag !== CData && tag !== ProcessingInstruction) {\n      throw new Error('Invalid tag type for serialization: '+ tag);\n    }\n\n    if (text instanceof QName && qnames[text.text] === undefined) {\n      add_qname(text.text);\n    }\n\n    items.forEach(function(item) {\n      var key = item[0],\n          value = item[1];\n      if (key instanceof QName) {\n        key = key.text;\n      }\n\n      if (qnames[key] === undefined) {\n        add_qname(key);\n      }\n\n      if (value instanceof QName && qnames[value.text] === undefined) {\n        add_qname(value.text);\n      }\n    });\n  });\n  return [qnames, namespaces];\n}\n\nfunction _serialize_xml(write, elem, encoding, qnames, namespaces, indent, indent_string) {\n  var tag = elem.tag;\n  var text = elem.text;\n  var items;\n  var i;\n\n  var newlines = indent || (indent === 0);\n  write(Array(indent + 1).join(indent_string));\n\n  if (tag === Comment) {\n    write(sprintf(\"<!--%s-->\", _escape_cdata(text, encoding)));\n  }\n  else if (tag === ProcessingInstruction) {\n    write(sprintf(\"<?%s?>\", _escape_cdata(text, encoding)));\n  }\n  else if (tag === CData) {\n    text = text || '';\n    write(sprintf(\"<![CDATA[%s]]>\", text));\n  }\n  else {\n    tag = qnames[tag];\n    if (tag === undefined) {\n      if (text) {\n        write(_escape_text(text, encoding));\n      }\n      elem.iter(function(e) {\n        _serialize_xml(write, e, encoding, qnames, null, newlines ? indent + 1 : false, indent_string);\n      });\n    }\n    else {\n      write(\"<\" + tag);\n      items = elem.items();\n\n      if (items || namespaces) {\n        items.sort(); // lexical order\n\n        items.forEach(function(item) {\n          var k = item[0],\n              v = item[1];\n\n            if (k instanceof QName) {\n              k = k.text;\n            }\n\n            if (v instanceof QName) {\n              v = qnames[v.text];\n            }\n            else {\n              v = _escape_attrib(v, encoding);\n            }\n            write(sprintf(\" %s=\\\"%s\\\"\", qnames[k], v));\n        });\n\n        if (namespaces) {\n          items = utils.items(namespaces);\n          items.sort(function(a, b) { return a[1] < b[1]; });\n\n          items.forEach(function(item) {\n            var k = item[1],\n                v = item[0];\n\n            if (k) {\n              k = ':' + k;\n            }\n\n            write(sprintf(\" xmlns%s=\\\"%s\\\"\", k, _escape_attrib(v, encoding)));\n          });\n        }\n      }\n\n      if (text || elem.len()) {\n        if (text && text.toString().match(/^\\s*$/)) {\n            text = null;\n        }\n\n        write(\">\");\n        if (!text && newlines) {\n          write(\"\\n\");\n        }\n\n        if (text) {\n          write(_escape_text(text, encoding));\n        }\n        elem._children.forEach(function(e) {\n          _serialize_xml(write, e, encoding, qnames, null, newlines ? indent + 1 : false, indent_string);\n        });\n\n        if (!text && indent) {\n          write(Array(indent + 1).join(indent_string));\n        }\n        write(\"</\" + tag + \">\");\n      }\n      else {\n        write(\" />\");\n      }\n    }\n  }\n\n  if (newlines) {\n    write(\"\\n\");\n  }\n}\n\nfunction parse(source, parser) {\n  var tree = new ElementTree();\n  tree.parse(source, parser);\n  return tree;\n}\n\nfunction tostring(element, options) {\n  return new ElementTree(element).write(options);\n}\n\nexports.PI = ProcessingInstruction;\nexports.Comment = Comment;\nexports.CData = CData;\nexports.ProcessingInstruction = ProcessingInstruction;\nexports.SubElement = SubElement;\nexports.QName = QName;\nexports.ElementTree = ElementTree;\nexports.ElementPath = ElementPath;\nexports.Element = function(tag, attrib) {\n  return new Element(tag, attrib);\n};\n\nexports.XML = function(data) {\n  var et = new ElementTree();\n  return et.parse(data);\n};\n\nexports.parse = parse;\nexports.register_namespace = register_namespace;\nexports.tostring = tostring;\n\n\n//# sourceURL=webpack://treb/./node_modules/elementtree/lib/elementtree.js?");

/***/ }),

/***/ "./node_modules/elementtree/lib/errors.js":
/*!************************************************!*\
  !*** ./node_modules/elementtree/lib/errors.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n *  Copyright 2011 Rackspace\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\nvar util = __webpack_require__(/*! util */ \"./lib-util/util.js\");\n\nvar sprintf = __webpack_require__(/*! ./sprintf */ \"./node_modules/elementtree/lib/sprintf.js\").sprintf;\n\nfunction SyntaxError(token, msg) {\n  msg = msg || sprintf('Syntax Error at token %s', token.toString());\n  this.token = token;\n  this.message = msg;\n  Error.call(this, msg);\n}\n\nutil.inherits(SyntaxError, Error);\n\nexports.SyntaxError = SyntaxError;\n\n\n//# sourceURL=webpack://treb/./node_modules/elementtree/lib/errors.js?");

/***/ }),

/***/ "./node_modules/elementtree/lib/parser.js":
/*!************************************************!*\
  !*** ./node_modules/elementtree/lib/parser.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/*\n *  Copyright 2011 Rackspace\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\n/* TODO: support node-expat C++ module optionally */\n\nvar util = __webpack_require__(/*! util */ \"./lib-util/util.js\");\nvar parsers = __webpack_require__(/*! ./parsers/index */ \"./node_modules/elementtree/lib/parsers/index.js\");\n\nfunction get_parser(name) {\n  if (name === 'sax') {\n    return parsers.sax;\n  }\n  else {\n    throw new Error('Invalid parser: ' + name);\n  }\n}\n\n\nexports.get_parser = get_parser;\n\n\n//# sourceURL=webpack://treb/./node_modules/elementtree/lib/parser.js?");

/***/ }),

/***/ "./node_modules/elementtree/lib/parsers/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/elementtree/lib/parsers/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.sax = __webpack_require__(/*! ./sax */ \"./node_modules/elementtree/lib/parsers/sax.js\");\n\n\n//# sourceURL=webpack://treb/./node_modules/elementtree/lib/parsers/index.js?");

/***/ }),

/***/ "./node_modules/elementtree/lib/parsers/sax.js":
/*!*****************************************************!*\
  !*** ./node_modules/elementtree/lib/parsers/sax.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var util = __webpack_require__(/*! util */ \"./lib-util/util.js\");\n\nvar sax = __webpack_require__(/*! sax */ \"./node_modules/sax/lib/sax.js\");\n\nvar TreeBuilder = __webpack_require__(/*! ./../treebuilder */ \"./node_modules/elementtree/lib/treebuilder.js\").TreeBuilder;\n\nfunction XMLParser(target) {\n  this.parser = sax.parser(true);\n\n  this.target = (target) ? target : new TreeBuilder();\n\n  this.parser.onopentag = this._handleOpenTag.bind(this);\n  this.parser.ontext = this._handleText.bind(this);\n  this.parser.oncdata = this._handleCdata.bind(this);\n  this.parser.ondoctype = this._handleDoctype.bind(this);\n  this.parser.oncomment = this._handleComment.bind(this);\n  this.parser.onclosetag = this._handleCloseTag.bind(this);\n  this.parser.onerror = this._handleError.bind(this);\n}\n\nXMLParser.prototype._handleOpenTag = function(tag) {\n  this.target.start(tag.name, tag.attributes);\n};\n\nXMLParser.prototype._handleText = function(text) {\n  this.target.data(text);\n};\n\nXMLParser.prototype._handleCdata = function(text) {\n  this.target.data(text);\n};\n\nXMLParser.prototype._handleDoctype = function(text) {\n};\n\nXMLParser.prototype._handleComment = function(comment) {\n};\n\nXMLParser.prototype._handleCloseTag = function(tag) {\n  this.target.end(tag);\n};\n\nXMLParser.prototype._handleError = function(err) {\n  throw err;\n};\n\nXMLParser.prototype.feed = function(chunk) {\n  this.parser.write(chunk);\n};\n\nXMLParser.prototype.close = function() {\n  this.parser.close();\n  return this.target.close();\n};\n\nexports.XMLParser = XMLParser;\n\n\n//# sourceURL=webpack://treb/./node_modules/elementtree/lib/parsers/sax.js?");

/***/ }),

/***/ "./node_modules/elementtree/lib/sprintf.js":
/*!*************************************************!*\
  !*** ./node_modules/elementtree/lib/sprintf.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n *  Copyright 2011 Rackspace\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\nvar cache = {};\n\n\n// Do any others need escaping?\nvar TO_ESCAPE = {\n  '\\'': '\\\\\\'',\n  '\\n': '\\\\n'\n};\n\n\nfunction populate(formatter) {\n  var i, type,\n      key = formatter,\n      prev = 0,\n      arg = 1,\n      builder = 'return \\'';\n\n  for (i = 0; i < formatter.length; i++) {\n    if (formatter[i] === '%') {\n      type = formatter[i + 1];\n\n      switch (type) {\n        case 's':\n          builder += formatter.slice(prev, i) + '\\' + arguments[' + arg + '] + \\'';\n          prev = i + 2;\n          arg++;\n          break;\n        case 'j':\n          builder += formatter.slice(prev, i) + '\\' + JSON.stringify(arguments[' + arg + ']) + \\'';\n          prev = i + 2;\n          arg++;\n          break;\n        case '%':\n          builder += formatter.slice(prev, i + 1);\n          prev = i + 2;\n          i++;\n          break;\n      }\n\n\n    } else if (TO_ESCAPE[formatter[i]]) {\n      builder += formatter.slice(prev, i) + TO_ESCAPE[formatter[i]];\n      prev = i + 1;\n    }\n  }\n\n  builder += formatter.slice(prev) + '\\';';\n  cache[key] = new Function(builder);\n}\n\n\n/**\n * A fast version of sprintf(), which currently only supports the %s and %j.\n * This caches a formatting function for each format string that is used, so\n * you should only use this sprintf() will be called many times with a single\n * format string and a limited number of format strings will ever be used (in\n * general this means that format strings should be string literals).\n *\n * @param {String} formatter A format string.\n * @param {...String} var_args Values that will be formatted by %s and %j.\n * @return {String} The formatted output.\n */\nexports.sprintf = function(formatter, var_args) {\n  if (!cache[formatter]) {\n    populate(formatter);\n  }\n\n  return cache[formatter].apply(null, arguments);\n};\n\n\n//# sourceURL=webpack://treb/./node_modules/elementtree/lib/sprintf.js?");

/***/ }),

/***/ "./node_modules/elementtree/lib/treebuilder.js":
/*!*****************************************************!*\
  !*** ./node_modules/elementtree/lib/treebuilder.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("function TreeBuilder(element_factory) {\n  this._data = [];\n  this._elem = [];\n  this._last = null;\n  this._tail = null;\n  if (!element_factory) {\n    /* evil circular dep */\n    element_factory = __webpack_require__(/*! ./elementtree */ \"./node_modules/elementtree/lib/elementtree.js\").Element;\n  }\n  this._factory = element_factory;\n}\n\nTreeBuilder.prototype.close = function() {\n  return this._last;\n};\n\nTreeBuilder.prototype._flush = function() {\n  if (this._data) {\n    if (this._last !== null) {\n      var text = this._data.join(\"\");\n      if (this._tail) {\n        this._last.tail = text;\n      }\n      else {\n        this._last.text = text;\n      }\n    }\n    this._data = [];\n  }\n};\n\nTreeBuilder.prototype.data = function(data) {\n  this._data.push(data);\n};\n\nTreeBuilder.prototype.start = function(tag, attrs) {\n  this._flush();\n  var elem = this._factory(tag, attrs);\n  this._last = elem;\n\n  if (this._elem.length) {\n    this._elem[this._elem.length - 1].append(elem);\n  }\n\n  this._elem.push(elem);\n\n  this._tail = null;\n};\n\nTreeBuilder.prototype.end = function(tag) {\n  this._flush();\n  this._last = this._elem.pop();\n  if (this._last.tag !== tag) {\n    throw new Error(\"end tag mismatch\");\n  }\n  this._tail = 1;\n  return this._last;\n};\n\nexports.TreeBuilder = TreeBuilder;\n\n\n//# sourceURL=webpack://treb/./node_modules/elementtree/lib/treebuilder.js?");

/***/ }),

/***/ "./node_modules/elementtree/lib/utils.js":
/*!***********************************************!*\
  !*** ./node_modules/elementtree/lib/utils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n *  Copyright 2011 Rackspace\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\n/**\n * @param {Object} hash.\n * @param {Array} ignored.\n */\nfunction items(hash, ignored) {\n  ignored = ignored || null;\n  var k, rv = [];\n\n  function is_ignored(key) {\n    if (!ignored || ignored.length === 0) {\n      return false;\n    }\n\n    return ignored.indexOf(key);\n  }\n\n  for (k in hash) {\n    if (hash.hasOwnProperty(k) && !(is_ignored(ignored))) {\n      rv.push([k, hash[k]]);\n    }\n  }\n\n  return rv;\n}\n\n\nfunction findall(re, str) {\n  var match, matches = [];\n\n  while ((match = re.exec(str))) {\n      matches.push(match);\n  }\n\n  return matches;\n}\n\nfunction merge(a, b) {\n  var c = {}, attrname;\n\n  for (attrname in a) {\n    if (a.hasOwnProperty(attrname)) {\n      c[attrname] = a[attrname];\n    }\n  }\n  for (attrname in b) {\n    if (b.hasOwnProperty(attrname)) {\n      c[attrname] = b[attrname];\n    }\n  }\n  return c;\n}\n\nexports.items = items;\nexports.findall = findall;\nexports.merge = merge;\n\n\n//# sourceURL=webpack://treb/./node_modules/elementtree/lib/utils.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n\n\n//# sourceURL=webpack://treb/./node_modules/events/events.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://treb/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/***/ ((module) => {

eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n\n\n//# sourceURL=webpack://treb/./node_modules/inherits/inherits_browser.js?");

/***/ }),

/***/ "./node_modules/jszip/dist/jszip.min.js":
/*!**********************************************!*\
  !*** ./node_modules/jszip/dist/jszip.min.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*!\n\nJSZip v3.6.0 - A JavaScript class for generating and reading zip files\n<http://stuartk.com/jszip>\n\n(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.\n\nJSZip uses the library pako released under the MIT license :\nhttps://github.com/nodeca/pako/blob/master/LICENSE\n*/\n\n!function(e){if(true)module.exports=e();else {}}(function(){return function s(a,o,u){function h(r,e){if(!o[r]){if(!a[r]){var t=undefined;if(!e&&t)return require(r,!0);if(f)return f(r,!0);var n=new Error(\"Cannot find module '\"+r+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}var i=o[r]={exports:{}};a[r][0].call(i.exports,function(e){var t=a[r][1][e];return h(t||e)},i,i.exports,s,a,o,u)}return o[r].exports}for(var f=undefined,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){\"object\"==typeof n&&void 0!==t?t.exports=e():(\"undefined\"!=typeof window?window:void 0!==r?r:\"undefined\"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r=\"function\"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error(\"Cannot find module '\"+t+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f=\"function\"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){\"object\"==typeof n&&void 0!==t?t.exports=e():(\"undefined\"!=typeof window?window:void 0!==r?r:\"undefined\"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r=\"function\"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error(\"Cannot find module '\"+t+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f=\"function\"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){\"object\"==typeof n&&void 0!==t?t.exports=e():(\"undefined\"!=typeof window?window:void 0!==r?r:\"undefined\"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r=\"function\"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error(\"Cannot find module '\"+t+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f=\"function\"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){\"object\"==typeof n&&void 0!==t?t.exports=e():(\"undefined\"!=typeof window?window:void 0!==r?r:\"undefined\"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r=\"function\"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error(\"Cannot find module '\"+t+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f=\"function\"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){\"object\"==typeof n&&void 0!==t?t.exports=e():(\"undefined\"!=typeof window?window:void 0!==r?r:\"undefined\"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r=\"function\"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error(\"Cannot find module '\"+t+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f=\"function\"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(e,t,r){\"use strict\";var c=e(\"./utils\"),l=e(\"./support\"),p=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";r.encode=function(e){for(var t,r,n,i,s,a,o,u=[],h=0,f=e.length,l=f,d=\"string\"!==c.getTypeOf(e);h<e.length;)l=f-h,n=d?(t=e[h++],r=h<f?e[h++]:0,h<f?e[h++]:0):(t=e.charCodeAt(h++),r=h<f?e.charCodeAt(h++):0,h<f?e.charCodeAt(h++):0),i=t>>2,s=(3&t)<<4|r>>4,a=1<l?(15&r)<<2|n>>6:64,o=2<l?63&n:64,u.push(p.charAt(i)+p.charAt(s)+p.charAt(a)+p.charAt(o));return u.join(\"\")},r.decode=function(e){var t,r,n,i,s,a,o=0,u=0;if(\"data:\"===e.substr(0,\"data:\".length))throw new Error(\"Invalid base64 input, it looks like a data url.\");var h,f=3*(e=e.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&f--,e.charAt(e.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error(\"Invalid base64 input, bad content length.\");for(h=l.uint8array?new Uint8Array(0|f):new Array(0|f);o<e.length;)t=p.indexOf(e.charAt(o++))<<2|(i=p.indexOf(e.charAt(o++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(o++)))>>2,n=(3&s)<<6|(a=p.indexOf(e.charAt(o++))),h[u++]=t,64!==s&&(h[u++]=r),64!==a&&(h[u++]=n);return h}},{\"./support\":30,\"./utils\":32}],2:[function(e,t,r){\"use strict\";var n=e(\"./external\"),i=e(\"./stream/DataWorker\"),s=e(\"./stream/Crc32Probe\"),a=e(\"./stream/DataLengthProbe\");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a(\"data_length\")),t=this;return e.on(\"end\",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error(\"Bug : uncompressed data size mismatch\")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\",this.compressedSize).withStreamInfo(\"uncompressedSize\",this.uncompressedSize).withStreamInfo(\"crc32\",this.crc32).withStreamInfo(\"compression\",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a(\"uncompressedSize\")).pipe(t.compressWorker(r)).pipe(new a(\"compressedSize\")).withStreamInfo(\"compression\",t)},t.exports=o},{\"./external\":6,\"./stream/Crc32Probe\":25,\"./stream/DataLengthProbe\":26,\"./stream/DataWorker\":27}],3:[function(e,t,r){\"use strict\";var n=e(\"./stream/GenericWorker\");r.STORE={magic:\"\\0\\0\",compressWorker:function(e){return new n(\"STORE compression\")},uncompressWorker:function(){return new n(\"STORE decompression\")}},r.DEFLATE=e(\"./flate\")},{\"./flate\":7,\"./stream/GenericWorker\":28}],4:[function(e,t,r){\"use strict\";var n=e(\"./utils\"),a=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?\"string\"!==n.getTypeOf(e)?function(e,t,r){var n=a,i=0+r;e^=-1;for(var s=0;s<i;s++)e=e>>>8^n[255&(e^t[s])];return-1^e}(0|t,e,e.length):function(e,t,r){var n=a,i=0+r;e^=-1;for(var s=0;s<i;s++)e=e>>>8^n[255&(e^t.charCodeAt(s))];return-1^e}(0|t,e,e.length):0}},{\"./utils\":32}],5:[function(e,t,r){\"use strict\";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){\"use strict\";var n;n=\"undefined\"!=typeof Promise?Promise:e(\"lie\"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Uint32Array,i=e(\"pako\"),s=e(\"./utils\"),a=e(\"./stream/GenericWorker\"),o=n?\"uint8array\":\"array\";function u(e,t){a.call(this,\"FlateWorker/\"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic=\"\\b\\0\",s.inherits(u,a),u.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1)},u.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},u.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},u.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},r.compressWorker=function(e){return new u(\"Deflate\",e)},r.uncompressWorker=function(){return new u(\"Inflate\",{})}},{\"./stream/GenericWorker\":28,\"./utils\":32,pako:38}],8:[function(e,t,r){\"use strict\";function I(e,t){var r,n=\"\";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function i(e,t,r,n,i,s){var a,o,u=e.file,h=e.compression,f=s!==B.utf8encode,l=O.transformTo(\"string\",s(u.name)),d=O.transformTo(\"string\",B.utf8encode(u.name)),c=u.comment,p=O.transformTo(\"string\",s(c)),m=O.transformTo(\"string\",B.utf8encode(c)),_=d.length!==u.name.length,g=m.length!==c.length,v=\"\",b=\"\",w=\"\",y=u.dir,k=u.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),f||!_&&!g||(S|=2048);var z,E=0,C=0;y&&(E|=16),\"UNIX\"===i?(C=798,E|=((z=u.unixPermissions)||(z=y?16893:33204),(65535&z)<<16)):(C=20,E|=63&(u.dosPermissions||0)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v+=\"up\"+I((b=I(1,1)+I(T(l),4)+d).length,2)+b),g&&(v+=\"uc\"+I((w=I(1,1)+I(T(p),4)+m).length,2)+w);var A=\"\";return A+=\"\\n\\0\",A+=I(S,2),A+=h.magic,A+=I(a,2),A+=I(o,2),A+=I(x.crc32,4),A+=I(x.compressedSize,4),A+=I(x.uncompressedSize,4),A+=I(l.length,2),A+=I(v.length,2),{fileRecord:R.LOCAL_FILE_HEADER+A+l+v,dirRecord:R.CENTRAL_FILE_HEADER+I(C,2)+A+I(p.length,2)+\"\\0\\0\\0\\0\"+I(E,4)+I(n,4)+l+v+p}}var O=e(\"../utils\"),s=e(\"../stream/GenericWorker\"),B=e(\"../utf8\"),T=e(\"../crc32\"),R=e(\"../signature\");function n(e,t,r,n){s.call(this,\"ZipFileWorker\"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}O.inherits(n,s),n.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,s.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},n.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=i(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},n.prototype.closedSource=function(e){this.accumulate=!1;var t,r=this.streamFiles&&!e.file.dir,n=i(e,r,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(n.dirRecord),r)this.push({data:(t=e,R.DATA_DESCRIPTOR+I(t.crc32,4)+I(t.compressedSize,4)+I(t.uncompressedSize,4)),meta:{percent:100}});else for(this.push({data:n.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},n.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r,n,i,s,a,o,u=this.bytesWritten-e,h=(r=this.dirRecords.length,n=u,i=e,s=this.zipComment,a=this.encodeFileName,o=O.transformTo(\"string\",a(s)),R.CENTRAL_DIRECTORY_END+\"\\0\\0\\0\\0\"+I(r,2)+I(r,2)+I(n,4)+I(i,4)+I(o.length,2)+o);this.push({data:h,meta:{percent:100}})},n.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},n.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on(\"data\",function(e){t.processChunk(e)}),e.on(\"end\",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()}),e.on(\"error\",function(e){t.error(e)}),this},n.prototype.resume=function(){return!!s.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},n.prototype.error=function(e){var t=this._sources;if(!s.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},n.prototype.lock=function(){s.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=n},{\"../crc32\":4,\"../signature\":23,\"../stream/GenericWorker\":28,\"../utf8\":31,\"../utils\":32}],9:[function(e,t,r){\"use strict\";var h=e(\"../compressions\"),n=e(\"./ZipFileWorker\");r.generateWorker=function(e,a,t){var o=new n(a.streamFiles,t,a.platform,a.encodeFileName),u=0;try{e.forEach(function(e,t){u++;var r=function(e,t){var r=e||t,n=h[r];if(!n)throw new Error(r+\" is not a valid compression method !\");return n}(t.options.compression,a.compression),n=t.options.compressionOptions||a.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo(\"file\",{name:e,dir:i,date:s,comment:t.comment||\"\",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(o)}),o.entriesCount=u}catch(e){o.error(e)}return o}},{\"../compressions\":3,\"./ZipFileWorker\":8}],10:[function(e,t,r){\"use strict\";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error(\"The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.\");this.files={},this.comment=null,this.root=\"\",this.clone=function(){var e=new n;for(var t in this)\"function\"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e(\"./object\")).loadAsync=e(\"./load\"),n.support=e(\"./support\"),n.defaults=e(\"./defaults\"),n.version=\"3.5.0\",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e(\"./external\"),t.exports=n},{\"./defaults\":5,\"./external\":6,\"./load\":11,\"./object\":15,\"./support\":30}],11:[function(e,t,r){\"use strict\";var n=e(\"./utils\"),i=e(\"./external\"),o=e(\"./utf8\"),u=e(\"./zipEntries\"),s=e(\"./stream/Crc32Probe\"),h=e(\"./nodejsUtils\");function f(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new s);r.on(\"error\",function(e){t(e)}).on(\"end\",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error(\"Corrupted zip : CRC32 mismatch\")):e()}).resume()})}t.exports=function(e,s){var a=this;return s=n.extend(s||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),h.isNode&&h.isStream(e)?i.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\")):n.prepareContent(\"the loaded zip file\",e,!0,s.optimizedBinaryString,s.base64).then(function(e){var t=new u(s);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(s.checkCRC32)for(var n=0;n<r.length;n++)t.push(f(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n];a.file(i.fileNameStr,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:s.createFolders})}return t.zipComment.length&&(a.comment=t.zipComment),a})}},{\"./external\":6,\"./nodejsUtils\":14,\"./stream/Crc32Probe\":25,\"./utf8\":31,\"./utils\":32,\"./zipEntries\":33}],12:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"../stream/GenericWorker\");function s(e,t){i.call(this,\"Nodejs stream input adapter for \"+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on(\"data\",function(e){t.push({data:e,meta:{percent:0}})}).on(\"error\",function(e){t.isPaused?this.generatedError=e:t.error(e)}).on(\"end\",function(){t.isPaused?t._upstreamEnded=!0:t.end()})},s.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s},{\"../stream/GenericWorker\":28,\"../utils\":32}],13:[function(e,t,r){\"use strict\";var i=e(\"readable-stream\").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on(\"data\",function(e,t){n.push(e)||n._helper.pause(),r&&r(t)}).on(\"error\",function(e){n.emit(\"error\",e)}).on(\"end\",function(){n.push(null)})}e(\"../utils\").inherits(n,i),n.prototype._read=function(){this._helper.resume()},t.exports=n},{\"../utils\":32,\"readable-stream\":16}],14:[function(e,t,r){\"use strict\";t.exports={isNode:\"undefined\"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if(\"number\"==typeof e)throw new Error('The \"data\" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&\"function\"==typeof e.on&&\"function\"==typeof e.pause&&\"function\"==typeof e.resume}}},{}],15:[function(e,t,r){\"use strict\";function s(e,t,r){var n,i=f.getTypeOf(t),s=f.extend(r||{},d);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),\"string\"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=h(e)),s.createFolders&&(n=function(e){\"/\"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf(\"/\");return 0<t?e.substring(0,t):\"\"}(e))&&g.call(this,n,!0);var a,o=\"string\"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!o),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t=\"\",s.compression=\"STORE\",i=\"string\"),a=t instanceof c||t instanceof l?t:m.isNode&&m.isStream(t)?new _(e,t):f.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var u=new p(e,a,s);this.files[e]=u}function h(e){return\"/\"!==e.slice(-1)&&(e+=\"/\"),e}var i=e(\"./utf8\"),f=e(\"./utils\"),l=e(\"./stream/GenericWorker\"),a=e(\"./stream/StreamHelper\"),d=e(\"./defaults\"),c=e(\"./compressedObject\"),p=e(\"./zipObject\"),o=e(\"./generate\"),m=e(\"./nodejsUtils\"),_=e(\"./nodejs/NodejsStreamInputAdapter\"),g=function(e,t){return t=void 0!==t?t:d.createFolders,e=h(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function u(e){return\"[object RegExp]\"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},forEach:function(e){var t,r,n;for(t in this.files)this.files.hasOwnProperty(t)&&(n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n))},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t)}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(u(e)){var n=e;return this.filter(function(e,t){return!t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(u(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=g.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||(\"/\"!==r.slice(-1)&&(r+=\"/\"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(e){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},generateInternalStream:function(e){var t,r={};try{if((r=f.extend(e||{},{streamFiles:!1,compression:\"STORE\",compressionOptions:null,type:\"\",platform:\"DOS\",comment:null,mimeType:\"application/zip\",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),\"binarystring\"===r.type&&(r.type=\"string\"),!r.type)throw new Error(\"No output type specified.\");f.checkSupport(r.type),\"darwin\"!==r.platform&&\"freebsd\"!==r.platform&&\"linux\"!==r.platform&&\"sunos\"!==r.platform||(r.platform=\"UNIX\"),\"win32\"===r.platform&&(r.platform=\"DOS\");var n=r.comment||this.comment||\"\";t=o.generateWorker(this,r,n)}catch(e){(t=new l(\"error\")).error(e)}return new a(t,r.type||\"string\",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type=\"nodebuffer\"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n},{\"./compressedObject\":2,\"./defaults\":5,\"./generate\":9,\"./nodejs/NodejsStreamInputAdapter\":12,\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31,\"./utils\":32,\"./zipObject\":35}],16:[function(e,t,r){t.exports=e(\"stream\")},{stream:void 0}],17:[function(e,t,r){\"use strict\";var n=e(\"./DataReader\");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e(\"../utils\").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./DataReader\":18}],18:[function(e,t,r){\"use strict\";var n=e(\"../utils\");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error(\"End of data reached (data length = \"+this.length+\", asked index = \"+e+\"). Corrupted zip ?\")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(e){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo(\"string\",this.readData(e))},readData:function(e){},lastIndexOfSignature:function(e){},readAndCheckSignature:function(e){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{\"../utils\":32}],19:[function(e,t,r){\"use strict\";var n=e(\"./Uint8ArrayReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./Uint8ArrayReader\":21}],20:[function(e,t,r){\"use strict\";var n=e(\"./DataReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./DataReader\":18}],21:[function(e,t,r){\"use strict\";var n=e(\"./ArrayReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./ArrayReader\":17}],22:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"../support\"),s=e(\"./ArrayReader\"),a=e(\"./StringReader\"),o=e(\"./NodeBufferReader\"),u=e(\"./Uint8ArrayReader\");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),\"string\"!==t||i.uint8array?\"nodebuffer\"===t?new o(e):i.uint8array?new u(n.transformTo(\"uint8array\",e)):new s(n.transformTo(\"array\",e)):new a(e)}},{\"../support\":30,\"../utils\":32,\"./ArrayReader\":17,\"./NodeBufferReader\":19,\"./StringReader\":20,\"./Uint8ArrayReader\":21}],23:[function(e,t,r){\"use strict\";r.LOCAL_FILE_HEADER=\"PK\u0003\u0004\",r.CENTRAL_FILE_HEADER=\"PK\u0001\u0002\",r.CENTRAL_DIRECTORY_END=\"PK\u0005\u0006\",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR=\"PK\u0006\u0007\",r.ZIP64_CENTRAL_DIRECTORY_END=\"PK\u0006\u0006\",r.DATA_DESCRIPTOR=\"PK\u0007\\b\"},{}],24:[function(e,t,r){\"use strict\";var n=e(\"./GenericWorker\"),i=e(\"../utils\");function s(e){n.call(this,\"ConvertWorker to \"+e),this.destType=e}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],25:[function(e,t,r){\"use strict\";var n=e(\"./GenericWorker\"),i=e(\"../crc32\");function s(){n.call(this,\"Crc32Probe\"),this.withStreamInfo(\"crc32\",0)}e(\"../utils\").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=s},{\"../crc32\":4,\"../utils\":32,\"./GenericWorker\":28}],26:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"./GenericWorker\");function s(e){i.call(this,\"DataLengthProbe for \"+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],27:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"./GenericWorker\");function s(e){i.call(this,\"DataWorker\");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type=\"\",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()},function(e){t.error(e)})}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case\"string\":e=this.data.substring(this.index,t);break;case\"uint8array\":e=this.data.subarray(this.index,t);break;case\"array\":case\"nodebuffer\":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],28:[function(e,t,r){\"use strict\";function n(e){this.name=e||\"default\",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit(\"data\",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit(\"end\"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit(\"error\",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit(\"error\",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on(\"data\",function(e){t.processChunk(e)}),e.on(\"end\",function(){t.end()}),e.on(\"error\",function(e){t.error(e)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e=\"Worker \"+this.name;return this.previous?this.previous+\" -> \"+e:e}},t.exports=n},{}],29:[function(e,t,r){\"use strict\";var h=e(\"../utils\"),i=e(\"./ConvertWorker\"),s=e(\"./GenericWorker\"),f=e(\"../base64\"),n=e(\"../support\"),a=e(\"../external\"),o=null;if(n.nodestream)try{o=e(\"../nodejs/NodejsStreamOutputAdapter\")}catch(e){}function u(e,t,r){var n=t;switch(t){case\"blob\":case\"arraybuffer\":n=\"uint8array\";break;case\"base64\":n=\"string\"}try{this._internalType=n,this._outputType=t,this._mimeType=r,h.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock()}catch(e){this._worker=new s(\"error\"),this._worker.error(e)}}u.prototype={accumulate:function(e){return o=this,u=e,new a.Promise(function(t,r){var n=[],i=o._internalType,s=o._outputType,a=o._mimeType;o.on(\"data\",function(e,t){n.push(e),u&&u(t)}).on(\"error\",function(e){n=[],r(e)}).on(\"end\",function(){try{var e=function(e,t,r){switch(e){case\"blob\":return h.newBlob(h.transformTo(\"arraybuffer\",t),r);case\"base64\":return f.encode(t);default:return h.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case\"string\":return t.join(\"\");case\"array\":return Array.prototype.concat.apply([],t);case\"uint8array\":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case\"nodebuffer\":return Buffer.concat(t);default:throw new Error(\"concat : unsupported type '\"+e+\"'\")}}(i,n),a);t(e)}catch(e){r(e)}n=[]}).resume()});var o,u},on:function(e,t){var r=this;return\"data\"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta)}):this._worker.on(e,function(){h.delay(t,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(h.checkSupport(\"nodestream\"),\"nodebuffer\"!==this._outputType)throw new Error(this._outputType+\" is not supported by this method\");return new o(this,{objectMode:\"nodebuffer\"!==this._outputType},e)}},t.exports=u},{\"../base64\":1,\"../external\":6,\"../nodejs/NodejsStreamOutputAdapter\":13,\"../support\":30,\"../utils\":32,\"./ConvertWorker\":24,\"./GenericWorker\":28}],30:[function(e,t,r){\"use strict\";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer=\"undefined\"!=typeof ArrayBuffer&&\"undefined\"!=typeof Uint8Array,r.nodebuffer=\"undefined\"!=typeof Buffer,r.uint8array=\"undefined\"!=typeof Uint8Array,\"undefined\"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:\"application/zip\"}).size}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob(\"application/zip\").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e(\"readable-stream\").Readable}catch(e){r.nodestream=!1}},{\"readable-stream\":16}],31:[function(e,t,s){\"use strict\";for(var o=e(\"./utils\"),u=e(\"./support\"),r=e(\"./nodejsUtils\"),n=e(\"./stream/GenericWorker\"),h=new Array(256),i=0;i<256;i++)h[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;function a(){n.call(this,\"utf-8 decode\"),this.leftOver=null}function f(){n.call(this,\"utf-8 encode\")}h[254]=h[254]=1,s.utf8encode=function(e){return u.nodebuffer?r.newBufferFrom(e,\"utf-8\"):function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=u.uint8array?new Uint8Array(o):new Array(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return u.nodebuffer?o.transformTo(\"nodebuffer\",e).toString(\"utf-8\"):function(e){var t,r,n,i,s=e.length,a=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)a[r++]=n;else if(4<(i=h[n]))a[r++]=65533,t+=i-1;else{for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?a[r++]=65533:n<65536?a[r++]=n:(n-=65536,a[r++]=55296|n>>10&1023,a[r++]=56320|1023&n)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(e=o.transformTo(u.uint8array?\"uint8array\":\"array\",e))},o.inherits(a,n),a.prototype.processChunk=function(e){var t=o.transformTo(u.uint8array?\"uint8array\":\"array\",e.data);if(this.leftOver&&this.leftOver.length){if(u.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+h[e[r]]>t?r:t}(t),i=t;n!==t.length&&(u.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(f,n),f.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta})},s.Utf8EncodeWorker=f},{\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./support\":30,\"./utils\":32}],32:[function(e,t,o){\"use strict\";var u=e(\"./support\"),h=e(\"./base64\"),r=e(\"./nodejsUtils\"),n=e(\"set-immediate-shim\"),f=e(\"./external\");function i(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}o.newBlob=function(t,r){o.checkSupport(\"blob\");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error(\"Bug : can't construct the Blob.\")}}};var s={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)\"array\"===t||\"nodebuffer\"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join(\"\")},stringifyByChar:function(e){for(var t=\"\",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return u.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return u.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return!1}}()}};function a(e){var t=65536,r=o.getTypeOf(e),n=!0;if(\"uint8array\"===r?n=s.applyCanBeUsed.uint8array:\"nodebuffer\"===r&&(n=s.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return s.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return s.stringifyByChar(e)}function d(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}o.applyFromCharCode=a;var c={};c.string={string:i,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,r.allocBuffer(e.length))}},c.array={string:a,array:i,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return a(new Uint8Array(e))},array:function(e){return d(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:i,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:a,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:i,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:a,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return d(e,new Uint8Array(e.length))},nodebuffer:i},o.transformTo=function(e,t){if(t=t||\"\",!e)return t;o.checkSupport(e);var r=o.getTypeOf(t);return c[r][e](t)},o.getTypeOf=function(e){return\"string\"==typeof e?\"string\":\"[object Array]\"===Object.prototype.toString.call(e)?\"array\":u.nodebuffer&&r.isBuffer(e)?\"nodebuffer\":u.uint8array&&e instanceof Uint8Array?\"uint8array\":u.arraybuffer&&e instanceof ArrayBuffer?\"arraybuffer\":void 0},o.checkSupport=function(e){if(!u[e.toLowerCase()])throw new Error(e+\" is not supported by this platform\")},o.MAX_VALUE_16BITS=65535,o.MAX_VALUE_32BITS=-1,o.pretty=function(e){var t,r,n=\"\";for(r=0;r<(e||\"\").length;r++)n+=\"\\\\x\"+((t=e.charCodeAt(r))<16?\"0\":\"\")+t.toString(16).toUpperCase();return n},o.delay=function(e,t,r){n(function(){e.apply(r||null,t||[])})},o.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},o.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])arguments[e].hasOwnProperty(t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},o.prepareContent=function(n,e,i,s,a){return f.Promise.resolve(e).then(function(n){return u.blob&&(n instanceof Blob||-1!==[\"[object File]\",\"[object Blob]\"].indexOf(Object.prototype.toString.call(n)))&&\"undefined\"!=typeof FileReader?new f.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result)},e.onerror=function(e){r(e.target.error)},e.readAsArrayBuffer(n)}):n}).then(function(e){var t,r=o.getTypeOf(e);return r?(\"arraybuffer\"===r?e=o.transformTo(\"uint8array\",e):\"string\"===r&&(a?e=h.decode(e):i&&!0!==s&&(e=l(t=e,u.uint8array?new Uint8Array(t.length):new Array(t.length)))),e):f.Promise.reject(new Error(\"Can't read the data of '\"+n+\"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?\"))})}},{\"./base64\":1,\"./external\":6,\"./nodejsUtils\":14,\"./support\":30,\"set-immediate-shim\":54}],33:[function(e,t,r){\"use strict\";var n=e(\"./reader/readerFor\"),i=e(\"./utils\"),s=e(\"./signature\"),a=e(\"./zipEntry\"),o=(e(\"./utf8\"),e(\"./support\"));function u(e){this.files=[],this.loadOptions=e}u.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error(\"Corrupted zip or bug: unexpected signature (\"+i.pretty(t)+\", expected \"+i.pretty(e)+\")\")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?\"uint8array\":\"array\",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error(\"Multi-volumes zip are not supported\")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error(\"Corrupted zip or bug: expected \"+this.centralDirRecords+\" records in central dir, got \"+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error(\"Corrupted zip: can't find end of central directory\"):new Error(\"Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html\");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error(\"Corrupted zip: missing \"+Math.abs(n)+\" bytes.\")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=u},{\"./reader/readerFor\":22,\"./signature\":23,\"./support\":30,\"./utf8\":31,\"./utils\":32,\"./zipEntry\":34}],34:[function(e,t,r){\"use strict\";var n=e(\"./reader/readerFor\"),s=e(\"./utils\"),i=e(\"./compressedObject\"),a=e(\"./crc32\"),o=e(\"./utf8\"),u=e(\"./compressions\"),h=e(\"./support\");function f(e,t){this.options=e,this.loadOptions=t}f.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)\");if(null===(t=function(e){for(var t in u)if(u.hasOwnProperty(t)&&u[t].magic===e)return u[t];return null}(this.compressionMethod)))throw new Error(\"Corrupted zip : compression \"+s.pretty(this.compressionMethod)+\" unknown (inner file : \"+s.transformTo(\"string\",this.fileName)+\")\");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error(\"Encrypted zip are not supported\");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||\"/\"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(e){if(this.extraFields[1]){var t=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4))}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i)},handleUTF8:function(){var e=h.uint8array?\"uint8array\":\"array\";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=f},{\"./compressedObject\":2,\"./compressions\":3,\"./crc32\":4,\"./reader/readerFor\":22,\"./support\":30,\"./utf8\":31,\"./utils\":32}],35:[function(e,t,r){\"use strict\";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=e(\"./stream/StreamHelper\"),i=e(\"./stream/DataWorker\"),a=e(\"./utf8\"),o=e(\"./compressedObject\"),u=e(\"./stream/GenericWorker\");n.prototype={internalStream:function(e){var t=null,r=\"string\";try{if(!e)throw new Error(\"No output type specified.\");var n=\"string\"===(r=e.toLowerCase())||\"text\"===r;\"binarystring\"!==r&&\"text\"!==r||(r=\"string\"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new u(\"error\")).error(e)}return new s(t,r,\"\")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||\"nodebuffer\").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof u?this._data:new i(this._data)}};for(var h=[\"asText\",\"asBinary\",\"asNodeBuffer\",\"asUint8Array\",\"asArrayBuffer\"],f=function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},l=0;l<h.length;l++)n.prototype[h[l]]=f;t.exports=n},{\"./compressedObject\":2,\"./stream/DataWorker\":27,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31}],36:[function(e,f,t){(function(t){\"use strict\";var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(h),a=t.document.createTextNode(\"\");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2}}else if(t.setImmediate||void 0===t.MessageChannel)r=\"document\"in t&&\"onreadystatechange\"in t.document.createElement(\"script\")?function(){var e=t.document.createElement(\"script\");e.onreadystatechange=function(){h(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(h,0)};else{var o=new t.MessageChannel;o.port1.onmessage=h,r=function(){o.port2.postMessage(0)}}var u=[];function h(){var e,t;n=!0;for(var r=u.length;r;){for(t=u,u=[],e=-1;++e<r;)t[e]();r=u.length}n=!1}f.exports=function(e){1!==u.push(e)||n||r()}}).call(this,void 0!==r?r:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],37:[function(e,t,r){\"use strict\";var i=e(\"immediate\");function h(){}var f={},s=[\"REJECTED\"],a=[\"FULFILLED\"],n=[\"PENDING\"];function o(e){if(\"function\"!=typeof e)throw new TypeError(\"resolver must be a function\");this.state=n,this.queue=[],this.outcome=void 0,e!==h&&c(this,e)}function u(e,t,r){this.promise=e,\"function\"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),\"function\"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function l(t,r,n){i(function(){var e;try{e=r(n)}catch(e){return f.reject(t,e)}e===t?f.reject(t,new TypeError(\"Cannot resolve promise with itself\")):f.resolve(t,e)})}function d(e){var t=e&&e.then;if(e&&(\"object\"==typeof e||\"function\"==typeof e)&&\"function\"==typeof t)return function(){t.apply(e,arguments)}}function c(t,e){var r=!1;function n(e){r||(r=!0,f.reject(t,e))}function i(e){r||(r=!0,f.resolve(t,e))}var s=p(function(){e(i,n)});\"error\"===s.status&&n(s.value)}function p(e,t){var r={};try{r.value=e(t),r.status=\"success\"}catch(e){r.status=\"error\",r.value=e}return r}(t.exports=o).prototype.finally=function(t){if(\"function\"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if(\"function\"!=typeof e&&this.state===a||\"function\"!=typeof t&&this.state===s)return this;var r=new this.constructor(h);return this.state!==n?l(r,this.state===a?e:t,this.outcome):this.queue.push(new u(r,e,t)),r},u.prototype.callFulfilled=function(e){f.resolve(this.promise,e)},u.prototype.otherCallFulfilled=function(e){l(this.promise,this.onFulfilled,e)},u.prototype.callRejected=function(e){f.reject(this.promise,e)},u.prototype.otherCallRejected=function(e){l(this.promise,this.onRejected,e)},f.resolve=function(e,t){var r=p(d,t);if(\"error\"===r.status)return f.reject(e,r.value);var n=r.value;if(n)c(e,n);else{e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t)}return e},f.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},o.resolve=function(e){return e instanceof this?e:f.resolve(new this(h),e)},o.reject=function(e){var t=new this(h);return f.reject(t,e)},o.all=function(e){var r=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var n=e.length,i=!1;if(!n)return this.resolve([]);for(var s=new Array(n),a=0,t=-1,o=new this(h);++t<n;)u(e[t],t);return o;function u(e,t){r.resolve(e).then(function(e){s[t]=e,++a!==n||i||(i=!0,f.resolve(o,s))},function(e){i||(i=!0,f.reject(o,e))})}},o.race=function(e){if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var t=e.length,r=!1;if(!t)return this.resolve([]);for(var n,i=-1,s=new this(h);++i<t;)n=e[i],this.resolve(n).then(function(e){r||(r=!0,f.resolve(s,e))},function(e){r||(r=!0,f.reject(s,e))});return s}},{immediate:36}],38:[function(e,t,r){\"use strict\";var n={};(0,e(\"./lib/utils/common\").assign)(n,e(\"./lib/deflate\"),e(\"./lib/inflate\"),e(\"./lib/zlib/constants\")),t.exports=n},{\"./lib/deflate\":39,\"./lib/inflate\":40,\"./lib/utils/common\":41,\"./lib/zlib/constants\":44}],39:[function(e,t,r){\"use strict\";var a=e(\"./zlib/deflate\"),o=e(\"./utils/common\"),u=e(\"./utils/strings\"),i=e(\"./zlib/messages\"),s=e(\"./zlib/zstream\"),h=Object.prototype.toString,f=0,l=-1,d=0,c=8;function p(e){if(!(this instanceof p))return new p(e);this.options=o.assign({level:l,method:c,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:\"\"},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==f)throw new Error(i[r]);if(t.header&&a.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n=\"string\"==typeof t.dictionary?u.string2buf(t.dictionary):\"[object ArrayBuffer]\"===h.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=a.deflateSetDictionary(this.strm,n))!==f)throw new Error(i[r]);this._dict_set=!0}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return!1;n=t===~~t?t:!0===t?4:0,\"string\"==typeof e?i.input=u.string2buf(e):\"[object ArrayBuffer]\"===h.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=a.deflate(i,n))&&r!==f)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||(\"string\"===this.options.to?this.onData(u.buf2binstring(o.shrinkBuf(i.output,i.next_out))):this.onData(o.shrinkBuf(i.output,i.next_out)))}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===f):2!==n||(this.onEnd(f),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e)},p.prototype.onEnd=function(e){e===f&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,n(e,t)}},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/deflate\":46,\"./zlib/messages\":51,\"./zlib/zstream\":53}],40:[function(e,t,r){\"use strict\";var d=e(\"./zlib/inflate\"),c=e(\"./utils/common\"),p=e(\"./utils/strings\"),m=e(\"./zlib/constants\"),n=e(\"./zlib/messages\"),i=e(\"./zlib/zstream\"),s=e(\"./zlib/gzheader\"),_=Object.prototype.toString;function a(e){if(!(this instanceof a))return new a(e);this.options=c.assign({chunkSize:16384,windowBits:0,to:\"\"},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=d.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,d.inflateGetHeader(this.strm,this.header)}function o(e,t){var r=new a(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}a.prototype.push=function(e,t){var r,n,i,s,a,o,u=this.strm,h=this.options.chunkSize,f=this.options.dictionary,l=!1;if(this.ended)return!1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,\"string\"==typeof e?u.input=p.binstring2buf(e):\"[object ArrayBuffer]\"===_.call(e)?u.input=new Uint8Array(e):u.input=e,u.next_in=0,u.avail_in=u.input.length;do{if(0===u.avail_out&&(u.output=new c.Buf8(h),u.next_out=0,u.avail_out=h),(r=d.inflate(u,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&f&&(o=\"string\"==typeof f?p.string2buf(f):\"[object ArrayBuffer]\"===_.call(f)?new Uint8Array(f):f,r=d.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===l&&(r=m.Z_OK,l=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);u.next_out&&(0!==u.avail_out&&r!==m.Z_STREAM_END&&(0!==u.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(i=p.utf8border(u.output,u.next_out),s=u.next_out-i,a=p.buf2string(u.output,i),u.next_out=s,u.avail_out=h-s,s&&c.arraySet(u.output,u.output,i,s,0),this.onData(a)):this.onData(c.shrinkBuf(u.output,u.next_out)))),0===u.avail_in&&0===u.avail_out&&(l=!0)}while((0<u.avail_in||0===u.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=d.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(u.avail_out=0))},a.prototype.onData=function(e){this.chunks.push(e)},a.prototype.onEnd=function(e){e===m.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=c.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,o(e,t)},r.ungzip=o},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/constants\":44,\"./zlib/gzheader\":47,\"./zlib/inflate\":49,\"./zlib/messages\":51,\"./zlib/zstream\":53}],41:[function(e,t,r){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if(\"object\"!=typeof r)throw new TypeError(r+\"must be non-object\");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(n)},{}],42:[function(e,t,r){\"use strict\";var u=e(\"./common\"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var h=new u.Buf8(256),n=0;n<256;n++)h[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function f(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,u.shrinkBuf(e,t));for(var r=\"\",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}h[254]=h[254]=1,r.string2buf=function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=new u.Buf8(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return f(e,e.length)},r.binstring2buf=function(e){for(var t=new u.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,a=t||e.length,o=new Array(2*a);for(r=n=0;r<a;)if((i=e[r++])<128)o[n++]=i;else if(4<(s=h[i]))o[n++]=65533,r+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&r<a;)i=i<<6|63&e[r++],s--;1<s?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i)}return f(o,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+h[e[r]]>t?r:t}},{\"./common\":41}],43:[function(e,t,r){\"use strict\";t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521}return i|s<<16|0}},{}],44:[function(e,t,r){\"use strict\";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){\"use strict\";var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}},{}],46:[function(e,t,r){\"use strict\";var u,d=e(\"../utils/common\"),h=e(\"./trees\"),c=e(\"./adler32\"),p=e(\"./crc32\"),n=e(\"./messages\"),f=0,l=0,m=-2,i=2,_=8,s=286,a=30,o=19,g=2*s+1,v=15,b=3,w=258,y=w+b+1,k=42,x=113;function S(e,t){return e.msg=n[t],t}function z(e){return(e<<1)-(4<e?9:0)}function E(e){for(var t=e.length;0<=--t;)e[t]=0}function C(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(d.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function A(e,t){h._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,C(e.strm)}function I(e,t){e.pending_buf[e.pending++]=t}function O(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function B(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,u=e.strstart>e.w_size-y?e.strstart-(e.w_size-y):0,h=e.window,f=e.w_mask,l=e.prev,d=e.strstart+w,c=h[s+a-1],p=h[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(h[(r=t)+a]===p&&h[r+a-1]===c&&h[r]===h[s]&&h[++r]===h[s+1]){s+=2,r++;do{}while(h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&s<d);if(n=w-(d-s),s=d-w,a<n){if(e.match_start=t,o<=(a=n))break;c=h[s+a-1],p=h[s+a]}}}while((t=l[t&f])>u&&0!=--i);return a<=e.lookahead?a:e.lookahead}function T(e){var t,r,n,i,s,a,o,u,h,f,l=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=l+(l-y)){for(d.arraySet(e.window,e.window,l,l,0),e.match_start-=l,e.strstart-=l,e.block_start-=l,t=r=e.hash_size;n=e.head[--t],e.head[t]=l<=n?n-l:0,--r;);for(t=r=l;n=e.prev[--t],e.prev[t]=l<=n?n-l:0,--r;);i+=l}if(0===e.strm.avail_in)break;if(a=e.strm,o=e.window,u=e.strstart+e.lookahead,f=void 0,(h=i)<(f=a.avail_in)&&(f=h),r=0===f?0:(a.avail_in-=f,d.arraySet(o,a.input,a.next_in,f,u),1===a.state.wrap?a.adler=c(a.adler,o,f,u):2===a.state.wrap&&(a.adler=p(a.adler,o,f,u)),a.next_in+=f,a.total_in+=f,f),e.lookahead+=r,e.lookahead+e.insert>=b)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+b-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<b)););}while(e.lookahead<y&&0!==e.strm.avail_in)}function R(e,t){for(var r,n;;){if(e.lookahead<y){if(T(e),e.lookahead<y&&t===f)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=b&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-y&&(e.match_length=B(e,r)),e.match_length>=b)if(n=h._tr_tally(e,e.strstart-e.match_start,e.match_length-b),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=b){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=h._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<b-1?e.strstart:b-1,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}function D(e,t){for(var r,n,i;;){if(e.lookahead<y){if(T(e),e.lookahead<y&&t===f)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=b&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=b-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-y&&(e.match_length=B(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===b&&4096<e.strstart-e.match_start)&&(e.match_length=b-1)),e.prev_length>=b&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-b,n=h._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-b),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=b-1,e.strstart++,n&&(A(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=h._tr_tally(e,0,e.window[e.strstart-1]))&&A(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=h._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<b-1?e.strstart:b-1,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}function F(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function N(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=_,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new d.Buf16(2*g),this.dyn_dtree=new d.Buf16(2*(2*a+1)),this.bl_tree=new d.Buf16(2*(2*o+1)),E(this.dyn_ltree),E(this.dyn_dtree),E(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new d.Buf16(v+1),this.heap=new d.Buf16(2*s+1),E(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new d.Buf16(2*s+1),E(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function U(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?k:x,e.adler=2===t.wrap?0:1,t.last_flush=f,h._tr_init(t),l):S(e,m)}function P(e){var t,r=U(e);return r===l&&((t=e.state).window_size=2*t.w_size,E(t.head),t.max_lazy_match=u[t.level].max_lazy,t.good_match=u[t.level].good_length,t.nice_match=u[t.level].nice_length,t.max_chain_length=u[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=b-1,t.match_available=0,t.ins_h=0),r}function L(e,t,r,n,i,s){if(!e)return m;var a=1;if(-1===t&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||9<i||r!==_||n<8||15<n||t<0||9<t||s<0||4<s)return S(e,m);8===n&&(n=9);var o=new N;return(e.state=o).strm=e,o.wrap=a,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+b-1)/b),o.window=new d.Buf8(2*o.w_size),o.head=new d.Buf16(o.hash_size),o.prev=new d.Buf16(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new d.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=r,P(e)}u=[new F(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(T(e),0===e.lookahead&&t===f)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,A(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-y&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(A(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(A(e,!1),e.strm.avail_out),1)}),new F(4,4,8,4,R),new F(4,5,16,8,R),new F(4,6,32,32,R),new F(4,4,16,16,D),new F(8,16,32,32,D),new F(8,16,128,128,D),new F(8,32,128,256,D),new F(32,128,258,1024,D),new F(32,258,258,4096,D)],r.deflateInit=function(e,t){return L(e,t,_,15,8,0)},r.deflateInit2=L,r.deflateReset=P,r.deflateResetKeep=U,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?m:(e.state.gzhead=t,l):m},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?S(e,m):m;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&4!==t)return S(e,0===e.avail_out?-5:m);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===k)if(2===n.wrap)e.adler=0,I(n,31),I(n,139),I(n,8),n.gzhead?(I(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),I(n,255&n.gzhead.time),I(n,n.gzhead.time>>8&255),I(n,n.gzhead.time>>16&255),I(n,n.gzhead.time>>24&255),I(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),I(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(I(n,255&n.gzhead.extra.length),I(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(I(n,0),I(n,0),I(n,0),I(n,0),I(n,0),I(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),I(n,3),n.status=x);else{var a=_+(n.w_bits-8<<4)<<8;a|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=x,O(n,a),0!==n.strstart&&(O(n,e.adler>>>16),O(n,65535&e.adler)),e.adler=1}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),C(e),i=n.pending,n.pending!==n.pending_buf_size));)I(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),C(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,I(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),C(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,I(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103)}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&C(e),n.pending+2<=n.pending_buf_size&&(I(n,255&e.adler),I(n,e.adler>>8&255),e.adler=0,n.status=x)):n.status=x),0!==n.pending){if(C(e),0===e.avail_out)return n.last_flush=-1,l}else if(0===e.avail_in&&z(t)<=z(r)&&4!==t)return S(e,-5);if(666===n.status&&0!==e.avail_in)return S(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==f&&666!==n.status){var o=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(T(e),0===e.lookahead)){if(t===f)return 1;break}if(e.match_length=0,r=h._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,a=e.window;;){if(e.lookahead<=w){if(T(e),e.lookahead<=w&&t===f)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=b&&0<e.strstart&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){s=e.strstart+w;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<s);e.match_length=w-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=b?(r=h._tr_tally(e,1,e.match_length-b),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=h._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}(n,t):u[n.level].func(n,t);if(3!==o&&4!==o||(n.status=666),1===o||3===o)return 0===e.avail_out&&(n.last_flush=-1),l;if(2===o&&(1===t?h._tr_align(n):5!==t&&(h._tr_stored_block(n,0,0,!1),3===t&&(E(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),C(e),0===e.avail_out))return n.last_flush=-1,l}return 4!==t?l:n.wrap<=0?1:(2===n.wrap?(I(n,255&e.adler),I(n,e.adler>>8&255),I(n,e.adler>>16&255),I(n,e.adler>>24&255),I(n,255&e.total_in),I(n,e.total_in>>8&255),I(n,e.total_in>>16&255),I(n,e.total_in>>24&255)):(O(n,e.adler>>>16),O(n,65535&e.adler)),C(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?l:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==k&&69!==t&&73!==t&&91!==t&&103!==t&&t!==x&&666!==t?S(e,m):(e.state=null,t===x?S(e,-3):l):m},r.deflateSetDictionary=function(e,t){var r,n,i,s,a,o,u,h,f=t.length;if(!e||!e.state)return m;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==k||r.lookahead)return m;for(1===s&&(e.adler=c(e.adler,t,f,0)),r.wrap=0,f>=r.w_size&&(0===s&&(E(r.head),r.strstart=0,r.block_start=0,r.insert=0),h=new d.Buf8(r.w_size),d.arraySet(h,t,f-r.w_size,r.w_size,0),t=h,f=r.w_size),a=e.avail_in,o=e.next_in,u=e.input,e.avail_in=f,e.next_in=0,e.input=t,T(r);r.lookahead>=b;){for(n=r.strstart,i=r.lookahead-(b-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+b-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=b-1,T(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=b-1,r.match_available=0,e.next_in=o,e.input=u,e.avail_in=a,r.wrap=s,l},r.deflateInfo=\"pako deflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./messages\":51,\"./trees\":52}],47:[function(e,t,r){\"use strict\";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){\"use strict\";t.exports=function(e,t){var r,n,i,s,a,o,u,h,f,l,d,c,p,m,_,g,v,b,w,y,k,x,S,z,E;r=e.state,n=e.next_in,z=e.input,i=n+(e.avail_in-5),s=e.next_out,E=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),u=r.dmax,h=r.wsize,f=r.whave,l=r.wnext,d=r.window,c=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,v=(1<<r.distbits)-1;e:do{p<15&&(c+=z[n++]<<p,p+=8,c+=z[n++]<<p,p+=8),b=m[c&g];t:for(;;){if(c>>>=w=b>>>24,p-=w,0==(w=b>>>16&255))E[s++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=m[(65535&b)+(c&(1<<w)-1)];continue t}if(32&w){r.mode=12;break e}e.msg=\"invalid literal/length code\",r.mode=30;break e}y=65535&b,(w&=15)&&(p<w&&(c+=z[n++]<<p,p+=8),y+=c&(1<<w)-1,c>>>=w,p-=w),p<15&&(c+=z[n++]<<p,p+=8,c+=z[n++]<<p,p+=8),b=_[c&v];r:for(;;){if(c>>>=w=b>>>24,p-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=_[(65535&b)+(c&(1<<w)-1)];continue r}e.msg=\"invalid distance code\",r.mode=30;break e}if(k=65535&b,p<(w&=15)&&(c+=z[n++]<<p,(p+=8)<w&&(c+=z[n++]<<p,p+=8)),u<(k+=c&(1<<w)-1)){e.msg=\"invalid distance too far back\",r.mode=30;break e}if(c>>>=w,p-=w,(w=s-a)<k){if(f<(w=k-w)&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break e}if(S=d,(x=0)===l){if(x+=h-w,w<y){for(y-=w;E[s++]=d[x++],--w;);x=s-k,S=E}}else if(l<w){if(x+=h+l-w,(w-=l)<y){for(y-=w;E[s++]=d[x++],--w;);if(x=0,l<y){for(y-=w=l;E[s++]=d[x++],--w;);x=s-k,S=E}}}else if(x+=l-w,w<y){for(y-=w;E[s++]=d[x++],--w;);x=s-k,S=E}for(;2<y;)E[s++]=S[x++],E[s++]=S[x++],E[s++]=S[x++],y-=3;y&&(E[s++]=S[x++],1<y&&(E[s++]=S[x++]))}else{for(x=s-k;E[s++]=E[x++],E[s++]=E[x++],E[s++]=E[x++],2<(y-=3););y&&(E[s++]=E[x++],1<y&&(E[s++]=E[x++]))}break}}break}}while(n<i&&s<o);n-=y=p>>3,c&=(1<<(p-=y<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=c,r.bits=p}},{}],49:[function(e,t,r){\"use strict\";var I=e(\"../utils/common\"),O=e(\"./adler32\"),B=e(\"./crc32\"),T=e(\"./inffast\"),R=e(\"./inftrees\"),D=1,F=2,N=0,U=-2,P=1,n=852,i=592;function L(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg=\"\",t.wrap&&(e.adler=1&t.wrap),t.mode=P,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(n),t.distcode=t.distdyn=new I.Buf32(i),t.sane=1,t.back=-1,N):U}function o(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,a(e)):U}function u(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,o(e))):U}function h(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=u(e,t))!==N&&(e.state=null),r):U}var f,l,d=!0;function j(e){if(d){var t;for(f=new I.Buf32(512),l=new I.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(R(D,e.lens,0,288,f,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;R(F,e.lens,0,32,l,0,e.work,{bits:5}),d=!1}e.lencode=f,e.lenbits=9,e.distcode=l,e.distbits=5}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),n>=s.wsize?(I.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),I.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(I.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=o,r.inflateReset2=u,r.inflateResetKeep=a,r.inflateInit=function(e){return h(e,15)},r.inflateInit2=h,r.inflate=function(e,t){var r,n,i,s,a,o,u,h,f,l,d,c,p,m,_,g,v,b,w,y,k,x,S,z,E=0,C=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),a=e.next_out,i=e.output,u=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,h=r.hold,f=r.bits,l=o,d=u,x=N;e:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(2&r.wrap&&35615===h){C[r.check=0]=255&h,C[1]=h>>>8&255,r.check=B(r.check,C,2,0),f=h=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&h)<<8)+(h>>8))%31){e.msg=\"incorrect header check\",r.mode=30;break}if(8!=(15&h)){e.msg=\"unknown compression method\",r.mode=30;break}if(f-=4,k=8+(15&(h>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg=\"invalid window size\",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&h?10:12,f=h=0;break;case 2:for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(r.flags=h,8!=(255&r.flags)){e.msg=\"unknown compression method\",r.mode=30;break}if(57344&r.flags){e.msg=\"unknown header flags set\",r.mode=30;break}r.head&&(r.head.text=h>>8&1),512&r.flags&&(C[0]=255&h,C[1]=h>>>8&255,r.check=B(r.check,C,2,0)),f=h=0,r.mode=3;case 3:for(;f<32;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.head&&(r.head.time=h),512&r.flags&&(C[0]=255&h,C[1]=h>>>8&255,C[2]=h>>>16&255,C[3]=h>>>24&255,r.check=B(r.check,C,4,0)),f=h=0,r.mode=4;case 4:for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.head&&(r.head.xflags=255&h,r.head.os=h>>8),512&r.flags&&(C[0]=255&h,C[1]=h>>>8&255,r.check=B(r.check,C,2,0)),f=h=0,r.mode=5;case 5:if(1024&r.flags){for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.length=h,r.head&&(r.head.extra_len=h),512&r.flags&&(C[0]=255&h,C[1]=h>>>8&255,r.check=B(r.check,C,2,0)),f=h=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(c=r.length)&&(c=o),c&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,n,s,c,k)),512&r.flags&&(r.check=B(r.check,n,c,s)),o-=c,s+=c,r.length-=c),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break e;for(c=0;k=n[s+c++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,n,c,s)),o-=c,s+=c,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break e;for(c=0;k=n[s+c++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,n,c,s)),o-=c,s+=c,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(h!==(65535&r.check)){e.msg=\"header crc mismatch\",r.mode=30;break}f=h=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;f<32;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}e.adler=r.check=L(h),f=h=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=u,e.next_in=s,e.avail_in=o,r.hold=h,r.bits=f,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){h>>>=7&f,f-=7&f,r.mode=27;break}for(;f<3;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}switch(r.last=1&h,f-=1,3&(h>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;h>>>=2,f-=2;break e;case 2:r.mode=17;break;case 3:e.msg=\"invalid block type\",r.mode=30}h>>>=2,f-=2;break;case 14:for(h>>>=7&f,f-=7&f;f<32;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if((65535&h)!=(h>>>16^65535)){e.msg=\"invalid stored block lengths\",r.mode=30;break}if(r.length=65535&h,f=h=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(c=r.length){if(o<c&&(c=o),u<c&&(c=u),0===c)break e;I.arraySet(i,n,s,c,a),o-=c,s+=c,u-=c,a+=c,r.length-=c;break}r.mode=12;break;case 17:for(;f<14;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(r.nlen=257+(31&h),h>>>=5,f-=5,r.ndist=1+(31&h),h>>>=5,f-=5,r.ncode=4+(15&h),h>>>=4,f-=4,286<r.nlen||30<r.ndist){e.msg=\"too many length or distance symbols\",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;f<3;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.lens[A[r.have++]]=7&h,h>>>=3,f-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=R(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg=\"invalid code lengths set\",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(E=r.lencode[h&(1<<r.lenbits)-1])>>>16&255,v=65535&E,!((_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(v<16)h>>>=_,f-=_,r.lens[r.have++]=v;else{if(16===v){for(z=_+2;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(h>>>=_,f-=_,0===r.have){e.msg=\"invalid bit length repeat\",r.mode=30;break}k=r.lens[r.have-1],c=3+(3&h),h>>>=2,f-=2}else if(17===v){for(z=_+3;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}f-=_,k=0,c=3+(7&(h>>>=_)),h>>>=3,f-=3}else{for(z=_+7;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}f-=_,k=0,c=11+(127&(h>>>=_)),h>>>=7,f-=7}if(r.have+c>r.nlen+r.ndist){e.msg=\"invalid bit length repeat\",r.mode=30;break}for(;c--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){e.msg=\"invalid code -- missing end-of-block\",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=R(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg=\"invalid literal/lengths set\",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=R(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg=\"invalid distances set\",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=o&&258<=u){e.next_out=a,e.avail_out=u,e.next_in=s,e.avail_in=o,r.hold=h,r.bits=f,T(e,d),a=e.next_out,i=e.output,u=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,h=r.hold,f=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(E=r.lencode[h&(1<<r.lenbits)-1])>>>16&255,v=65535&E,!((_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(g&&0==(240&g)){for(b=_,w=g,y=v;g=(E=r.lencode[y+((h&(1<<b+w)-1)>>b)])>>>16&255,v=65535&E,!(b+(_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}h>>>=b,f-=b,r.back+=b}if(h>>>=_,f-=_,r.back+=_,r.length=v,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){e.msg=\"invalid literal/length code\",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.length+=h&(1<<r.extra)-1,h>>>=r.extra,f-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(E=r.distcode[h&(1<<r.distbits)-1])>>>16&255,v=65535&E,!((_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(0==(240&g)){for(b=_,w=g,y=v;g=(E=r.distcode[y+((h&(1<<b+w)-1)>>b)])>>>16&255,v=65535&E,!(b+(_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}h>>>=b,f-=b,r.back+=b}if(h>>>=_,f-=_,r.back+=_,64&g){e.msg=\"invalid distance code\",r.mode=30;break}r.offset=v,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.offset+=h&(1<<r.extra)-1,h>>>=r.extra,f-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg=\"invalid distance too far back\",r.mode=30;break}r.mode=25;case 25:if(0===u)break e;if(c=d-u,r.offset>c){if((c=r.offset-c)>r.whave&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break}p=c>r.wnext?(c-=r.wnext,r.wsize-c):r.wnext-c,c>r.length&&(c=r.length),m=r.window}else m=i,p=a-r.offset,c=r.length;for(u<c&&(c=u),u-=c,r.length-=c;i[a++]=m[p++],--c;);0===r.length&&(r.mode=21);break;case 26:if(0===u)break e;i[a++]=r.length,u--,r.mode=21;break;case 27:if(r.wrap){for(;f<32;){if(0===o)break e;o--,h|=n[s++]<<f,f+=8}if(d-=u,e.total_out+=d,r.total+=d,d&&(e.adler=r.check=r.flags?B(r.check,i,d,a-d):O(r.check,i,d,a-d)),d=u,(r.flags?h:L(h))!==r.check){e.msg=\"incorrect data check\",r.mode=30;break}f=h=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;f<32;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(h!==(4294967295&r.total)){e.msg=\"incorrect length check\",r.mode=30;break}f=h=0}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return-4;case 32:default:return U}return e.next_out=a,e.avail_out=u,e.next_in=s,e.avail_in=o,r.hold=h,r.bits=f,(r.wsize||d!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,d-e.avail_out)?(r.mode=31,-4):(l-=e.avail_in,d-=e.avail_out,e.total_in+=l,e.total_out+=d,r.total+=d,r.wrap&&d&&(e.adler=r.check=r.flags?B(r.check,i,d,e.next_out-d):O(r.check,i,d,e.next_out-d)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==l&&0===d||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo=\"pako inflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./inffast\":48,\"./inftrees\":50}],50:[function(e,t,r){\"use strict\";var D=e(\"../utils/common\"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,a,o){var u,h,f,l,d,c,p,m,_,g=o.bits,v=0,b=0,w=0,y=0,k=0,x=0,S=0,z=0,E=0,C=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),T=null,R=0;for(v=0;v<=15;v++)O[v]=0;for(b=0;b<n;b++)O[t[r+b]]++;for(k=g,y=15;1<=y&&0===O[y];y--);if(y<k&&(k=y),0===y)return i[s++]=20971520,i[s++]=20971520,o.bits=1,0;for(w=1;w<y&&0===O[w];w++);for(k<w&&(k=w),v=z=1;v<=15;v++)if(z<<=1,(z-=O[v])<0)return-1;if(0<z&&(0===e||1!==y))return-1;for(B[1]=0,v=1;v<15;v++)B[v+1]=B[v]+O[v];for(b=0;b<n;b++)0!==t[r+b]&&(a[B[t[r+b]]++]=b);if(c=0===e?(A=T=a,19):1===e?(A=F,I-=257,T=N,R-=257,256):(A=U,T=P,-1),v=w,d=s,S=b=C=0,f=-1,l=(E=1<<(x=k))-1,1===e&&852<E||2===e&&592<E)return 1;for(;;){for(p=v-S,_=a[b]<c?(m=0,a[b]):a[b]>c?(m=T[R+a[b]],A[I+a[b]]):(m=96,0),u=1<<v-S,w=h=1<<x;i[d+(C>>S)+(h-=u)]=p<<24|m<<16|_|0,0!==h;);for(u=1<<v-1;C&u;)u>>=1;if(0!==u?(C&=u-1,C+=u):C=0,b++,0==--O[v]){if(v===y)break;v=t[r+a[b]]}if(k<v&&(C&l)!==f){for(0===S&&(S=k),d+=w,z=1<<(x=v-S);x+S<y&&!((z-=O[x+S])<=0);)x++,z<<=1;if(E+=1<<x,1===e&&852<E||2===e&&592<E)return 1;i[f=C&l]=k<<24|x<<16|d-s|0}}return 0!==C&&(i[d+C]=v-S<<24|64<<16|0),o.bits=k,0}},{\"../utils/common\":41}],51:[function(e,t,r){\"use strict\";t.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},{}],52:[function(e,t,r){\"use strict\";var o=e(\"../utils/common\");function n(e){for(var t=e.length;0<=--t;)e[t]=0}var _=15,i=16,u=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],h=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],f=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],l=new Array(576);n(l);var d=new Array(60);n(d);var c=new Array(512);n(c);var p=new Array(256);n(p);var m=new Array(29);n(m);var g,v,b,w=new Array(30);function y(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function s(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function k(e){return e<256?c[e]:c[256+(e>>>7)]}function x(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function S(e,t,r){e.bi_valid>i-r?(e.bi_buf|=t<<e.bi_valid&65535,x(e,e.bi_buf),e.bi_buf=t>>i-e.bi_valid,e.bi_valid+=r-i):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function z(e,t,r){S(e,r[2*t],r[2*t+1])}function E(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function C(e,t,r){var n,i,s=new Array(_+1),a=0;for(n=1;n<=_;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=E(s[o]++,o))}}function A(e){var t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function I(e){8<e.bi_valid?x(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function O(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function B(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&O(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!O(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function T(e,t,r){var n,i,s,a,o=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],i=e.pending_buf[e.l_buf+o],o++,0===n?z(e,i,t):(z(e,(s=p[i])+256+1,t),0!==(a=u[s])&&S(e,i-=m[s],a),z(e,s=k(--n),r),0!==(a=h[s])&&S(e,n-=w[s],a)),o<e.last_lit;);z(e,256,t)}function R(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,u=t.stat_desc.elems,h=-1;for(e.heap_len=0,e.heap_max=573,r=0;r<u;r++)0!==s[2*r]?(e.heap[++e.heap_len]=h=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=h<2?++h:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=h,r=e.heap_len>>1;1<=r;r--)B(e,s,r);for(i=u;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],B(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,B(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,u=t.dyn_tree,h=t.max_code,f=t.stat_desc.static_tree,l=t.stat_desc.has_stree,d=t.stat_desc.extra_bits,c=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=_;s++)e.bl_count[s]=0;for(u[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<573;r++)p<(s=u[2*u[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),u[2*n+1]=s,h<n||(e.bl_count[s]++,a=0,c<=n&&(a=d[n-c]),o=u[2*n],e.opt_len+=o*(s+a),l&&(e.static_len+=o*(f[2*n+1]+a)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)h<(i=e.heap[--r])||(u[2*i+1]!==s&&(e.opt_len+=(s-u[2*i+1])*u[2*i],u[2*i+1]=s),n--)}}(e,t),C(s,h,e.bl_count)}function D(e,t,r){var n,i,s=-1,a=t[1],o=0,u=7,h=4;for(0===a&&(u=138,h=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<u&&i===a||(o<h?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[32]++):o<=10?e.bl_tree[34]++:e.bl_tree[36]++,s=i,h=(o=0)===a?(u=138,3):i===a?(u=6,3):(u=7,4))}function F(e,t,r){var n,i,s=-1,a=t[1],o=0,u=7,h=4;for(0===a&&(u=138,h=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<u&&i===a)){if(o<h)for(;z(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(z(e,i,e.bl_tree),o--),z(e,16,e.bl_tree),S(e,o-3,2)):o<=10?(z(e,17,e.bl_tree),S(e,o-3,3)):(z(e,18,e.bl_tree),S(e,o-11,7));s=i,h=(o=0)===a?(u=138,3):i===a?(u=6,3):(u=7,4)}}n(w);var N=!1;function U(e,t,r,n){var i,s,a;S(e,0+(n?1:0),3),s=t,a=r,I(i=e),x(i,a),x(i,~a),o.arraySet(i.pending_buf,i.window,s,a,i.pending),i.pending+=a}r._tr_init=function(e){N||(function(){var e,t,r,n,i,s=new Array(_+1);for(n=r=0;n<28;n++)for(m[n]=r,e=0;e<1<<u[n];e++)p[r++]=n;for(p[r-1]=n,n=i=0;n<16;n++)for(w[n]=i,e=0;e<1<<h[n];e++)c[i++]=n;for(i>>=7;n<30;n++)for(w[n]=i<<7,e=0;e<1<<h[n]-7;e++)c[256+i++]=n;for(t=0;t<=_;t++)s[t]=0;for(e=0;e<=143;)l[2*e+1]=8,e++,s[8]++;for(;e<=255;)l[2*e+1]=9,e++,s[9]++;for(;e<=279;)l[2*e+1]=7,e++,s[7]++;for(;e<=287;)l[2*e+1]=8,e++,s[8]++;for(C(l,287,s),e=0;e<30;e++)d[2*e+1]=5,d[2*e]=E(e,5);g=new y(l,u,257,286,_),v=new y(d,h,0,30,_),b=new y(new Array(0),a,0,19,7)}(),N=!0),e.l_desc=new s(e.dyn_ltree,g),e.d_desc=new s(e.dyn_dtree,v),e.bl_desc=new s(e.bl_tree,b),e.bi_buf=0,e.bi_valid=0,A(e)},r._tr_stored_block=U,r._tr_flush_block=function(e,t,r,n){var i,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),R(e,e.l_desc),R(e,e.d_desc),a=function(e){var t;for(D(e,e.dyn_ltree,e.l_desc.max_code),D(e,e.dyn_dtree,e.d_desc.max_code),R(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*f[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?U(e,t,r,n):4===e.strategy||s===i?(S(e,2+(n?1:0),3),T(e,l,d)):(S(e,4+(n?1:0),3),function(e,t,r,n){var i;for(S(e,t-257,5),S(e,r-1,5),S(e,n-4,4),i=0;i<n;i++)S(e,e.bl_tree[2*f[i]+1],3);F(e,e.dyn_ltree,t-1),F(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),T(e,e.dyn_ltree,e.dyn_dtree)),A(e),n&&I(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(p[r]+256+1)]++,e.dyn_dtree[2*k(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){var t;S(e,2,3),z(e,256,l),16===(t=e).bi_valid?(x(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}},{\"../utils/common\":41}],53:[function(e,t,r){\"use strict\";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){\"use strict\";t.exports=\"function\"==typeof setImmediate?setImmediate:function(){var e=[].slice.apply(arguments);e.splice(1,0,0),setTimeout.apply(null,e)}},{}]},{},[10])(10)})}).call(this,void 0!==r?r:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}]},{},[1])(1)})}).call(this,void 0!==r?r:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}]},{},[1])(1)})}).call(this,void 0!==r?r:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}]},{},[1])(1)})}).call(this,void 0!==r?r:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}]},{},[1])(1)})}).call(this,\"undefined\"!=typeof __webpack_require__.g?__webpack_require__.g:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}]},{},[1])(1)});\n\n//# sourceURL=webpack://treb/./node_modules/jszip/dist/jszip.min.js?");

/***/ }),

/***/ "./node_modules/readable-stream/errors-browser.js":
/*!********************************************************!*\
  !*** ./node_modules/readable-stream/errors-browser.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar codes = {};\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n\n  var NodeError =\n  /*#__PURE__*/\n  function (_Base) {\n    _inheritsLoose(NodeError, _Base);\n\n    function NodeError(arg1, arg2, arg3) {\n      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n    }\n\n    return NodeError;\n  }(Base);\n\n  NodeError.prototype.name = Base.name;\n  NodeError.prototype.code = code;\n  codes[code] = NodeError;\n} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\n\n\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n\n  return str.substring(this_len - search.length, this_len) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n\n\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {\n  return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  // determiner: 'must be' or 'must not be'\n  var determiner;\n\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  var msg;\n\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  }\n\n  msg += \". Received type \".concat(typeof actual);\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');\ncreateErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {\n  return 'The ' + name + ' method is not implemented';\n});\ncreateErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');\ncreateErrorType('ERR_STREAM_DESTROYED', function (name) {\n  return 'Cannot call ' + name + ' after a stream was destroyed';\n});\ncreateErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');\ncreateErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');\ncreateErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');\ncreateErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\ncreateErrorType('ERR_UNKNOWN_ENCODING', function (arg) {\n  return 'Unknown encoding: ' + arg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');\nmodule.exports.codes = codes;\n\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/errors-browser.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = __webpack_require__(/*! ./_stream_readable */ \"./node_modules/readable-stream/lib/_stream_readable.js\");\n\nvar Writable = __webpack_require__(/*! ./_stream_writable */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\n\n__webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\")(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/_stream_duplex.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n\nmodule.exports = PassThrough;\n\nvar Transform = __webpack_require__(/*! ./_stream_transform */ \"./node_modules/readable-stream/lib/_stream_transform.js\");\n\n__webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\")(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/_stream_passthrough.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n\nvar Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\").Buffer;\n\nvar OurUint8Array = __webpack_require__.g.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/\n\n\nvar debugUtil = __webpack_require__(/*! util */ \"?d17e\");\n\nvar debug;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\n\nvar BufferList = __webpack_require__(/*! ./internal/streams/buffer_list */ \"./node_modules/readable-stream/lib/internal/streams/buffer_list.js\");\n\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/readable-stream/lib/internal/streams/destroy.js\");\n\nvar _require = __webpack_require__(/*! ./internal/streams/state */ \"./node_modules/readable-stream/lib/internal/streams/state.js\"),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = __webpack_require__(/*! ../errors */ \"./node_modules/readable-stream/errors-browser.js\").codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\n\n\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\n\n__webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\")(Readable, Stream);\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\n\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  } // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n\n\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n\n  return er;\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\n\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\n\n  var p = this._readableState.buffer.head;\n  var content = '';\n\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n\n  this._readableState.buffer.clear();\n\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n}; // Don't raise the hwm > 1GB\n\n\nvar MAX_HWM = 0x40000000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true;\n\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  } // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n\n\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      });\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\n\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true; // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume'); // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n\n  state.paused = false;\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  this._readableState.paused = true;\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = __webpack_require__(/*! ./internal/streams/async_iterator */ \"./node_modules/readable-stream/lib/internal/streams/async_iterator.js\");\n    }\n\n    return createReadableStreamAsyncIterator(this);\n  };\n}\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n}); // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\n\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\n\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = __webpack_require__(/*! ./internal/streams/from */ \"./node_modules/readable-stream/lib/internal/streams/from-browser.js\");\n    }\n\n    return from(Readable, iterable, opts);\n  };\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/_stream_readable.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n\nmodule.exports = Transform;\n\nvar _require$codes = __webpack_require__(/*! ../errors */ \"./node_modules/readable-stream/errors-browser.js\").codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n\n__webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\")(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/_stream_transform.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: __webpack_require__(/*! util-deprecate */ \"./node_modules/util-deprecate/browser.js\")\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = __webpack_require__(/*! ./internal/streams/stream */ \"./node_modules/readable-stream/lib/internal/streams/stream-browser.js\");\n/*</replacement>*/\n\n\nvar Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\").Buffer;\n\nvar OurUint8Array = __webpack_require__.g.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ \"./node_modules/readable-stream/lib/internal/streams/destroy.js\");\n\nvar _require = __webpack_require__(/*! ./internal/streams/state */ \"./node_modules/readable-stream/lib/internal/streams/state.js\"),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = __webpack_require__(/*! ../errors */ \"./node_modules/readable-stream/errors-browser.js\").codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\n__webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\")(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ \"./node_modules/readable-stream/lib/_stream_duplex.js\"); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/_stream_writable.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/async_iterator.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/async_iterator.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _Object$setPrototypeO;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar finished = __webpack_require__(/*! ./end-of-stream */ \"./node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\n\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\n\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\n\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n\n  if (resolve !== null) {\n    var data = iter[kStream].read(); // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\n\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\n\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\n\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n\n  next: function next() {\n    var _this = this;\n\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    } // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n\n\n    var lastPromise = this[kLastPromise];\n    var promise;\n\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n\n      promise = new Promise(this[kHandlePromise]);\n    }\n\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\n\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n\n      iterator[kError] = err;\n      return;\n    }\n\n    var resolve = iterator[kLastResolve];\n\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\n\nmodule.exports = createReadableStreamAsyncIterator;\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/internal/streams/async_iterator.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/buffer_list.js":
/*!**************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/buffer_list.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\"),\n    Buffer = _require.Buffer;\n\nvar _require2 = __webpack_require__(/*! util */ \"?ed1b\"),\n    inspect = _require2.inspect;\n\nvar custom = inspect && inspect.custom || 'inspect';\n\nfunction copyBuffer(src, target, offset) {\n  Buffer.prototype.copy.call(src, target, offset);\n}\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  _createClass(BufferList, [{\n    key: \"push\",\n    value: function push(v) {\n      var entry = {\n        data: v,\n        next: null\n      };\n      if (this.length > 0) this.tail.next = entry;else this.head = entry;\n      this.tail = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(v) {\n      var entry = {\n        data: v,\n        next: this.head\n      };\n      if (this.length === 0) this.tail = entry;\n      this.head = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) return;\n      var ret = this.head.data;\n      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n      --this.length;\n      return ret;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n  }, {\n    key: \"join\",\n    value: function join(s) {\n      if (this.length === 0) return '';\n      var p = this.head;\n      var ret = '' + p.data;\n\n      while (p = p.next) {\n        ret += s + p.data;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(n) {\n      if (this.length === 0) return Buffer.alloc(0);\n      var ret = Buffer.allocUnsafe(n >>> 0);\n      var p = this.head;\n      var i = 0;\n\n      while (p) {\n        copyBuffer(p.data, ret, i);\n        i += p.data.length;\n        p = p.next;\n      }\n\n      return ret;\n    } // Consumes a specified amount of bytes or characters from the buffered data.\n\n  }, {\n    key: \"consume\",\n    value: function consume(n, hasStrings) {\n      var ret;\n\n      if (n < this.head.data.length) {\n        // `slice` is the same for buffers and strings.\n        ret = this.head.data.slice(0, n);\n        this.head.data = this.head.data.slice(n);\n      } else if (n === this.head.data.length) {\n        // First chunk is a perfect match.\n        ret = this.shift();\n      } else {\n        // Result spans more than one buffer.\n        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head.data;\n    } // Consumes a specified amount of characters from the buffered data.\n\n  }, {\n    key: \"_getString\",\n    value: function _getString(n) {\n      var p = this.head;\n      var c = 1;\n      var ret = p.data;\n      n -= ret.length;\n\n      while (p = p.next) {\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;else ret += str.slice(0, n);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === str.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = str.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Consumes a specified amount of bytes from the buffered data.\n\n  }, {\n    key: \"_getBuffer\",\n    value: function _getBuffer(n) {\n      var ret = Buffer.allocUnsafe(n);\n      var p = this.head;\n      var c = 1;\n      p.data.copy(ret);\n      n -= p.data.length;\n\n      while (p = p.next) {\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === buf.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = buf.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Make sure the linked list only shows the minimal necessary information.\n\n  }, {\n    key: custom,\n    value: function value(_, options) {\n      return inspect(this, _objectSpread({}, options, {\n        // Only inspect one level.\n        depth: 0,\n        // It should not recurse.\n        customInspect: false\n      }));\n    }\n  }]);\n\n  return BufferList;\n}();\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/internal/streams/buffer_list.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval(" // undocumented cb() API, needed for core, not for public API\n\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err) {\n      if (!this._writableState) {\n        process.nextTick(emitErrorNT, this, err);\n      } else if (!this._writableState.errorEmitted) {\n        this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorNT, this, err);\n      }\n    }\n\n    return this;\n  } // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  } // if this is a duplex stream mark the writable part as destroyed as well\n\n\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      if (!_this._writableState) {\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else if (!_this._writableState.errorEmitted) {\n        _this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else {\n        process.nextTick(emitCloseNT, _this);\n      }\n    } else if (cb) {\n      process.nextTick(emitCloseNT, _this);\n      cb(err);\n    } else {\n      process.nextTick(emitCloseNT, _this);\n    }\n  });\n\n  return this;\n}\n\nfunction emitErrorAndCloseNT(self, err) {\n  emitErrorNT(self, err);\n  emitCloseNT(self);\n}\n\nfunction emitCloseNT(self) {\n  if (self._writableState && !self._writableState.emitClose) return;\n  if (self._readableState && !self._readableState.emitClose) return;\n  self.emit('close');\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finalCalled = false;\n    this._writableState.prefinished = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nfunction errorOrDestroy(stream, err) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n  var rState = stream._readableState;\n  var wState = stream._writableState;\n  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy,\n  errorOrDestroy: errorOrDestroy\n};\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/internal/streams/destroy.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/end-of-stream.js":
/*!****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/end-of-stream.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n\n\nvar ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(/*! ../../../errors */ \"./node_modules/readable-stream/errors-browser.js\").codes.ERR_STREAM_PREMATURE_CLOSE;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args);\n  };\n}\n\nfunction noop() {}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n\n  var writableEnded = stream._writableState && stream._writableState.finished;\n\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n\n  var onclose = function onclose() {\n    var err;\n\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\n\nmodule.exports = eos;\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/internal/streams/end-of-stream.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/from-browser.js":
/*!***************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/from-browser.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  throw new Error('Readable.from is not available in the browser')\n};\n\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/internal/streams/from-browser.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/pipeline.js":
/*!***********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/pipeline.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n\n\nvar eos;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\n\nvar _require$codes = __webpack_require__(/*! ../../../errors */ \"./node_modules/readable-stream/errors-browser.js\").codes,\n    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = __webpack_require__(/*! ./end-of-stream */ \"./node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true; // request.destroy just do .end - .abort is what we want\n\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\n\nfunction call(fn) {\n  fn();\n}\n\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\n\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\n\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\n\nmodule.exports = pipeline;\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/internal/streams/pipeline.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/state.js":
/*!********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/state.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar ERR_INVALID_OPT_VALUE = __webpack_require__(/*! ../../../errors */ \"./node_modules/readable-stream/errors-browser.js\").codes.ERR_INVALID_OPT_VALUE;\n\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\n\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n\n  if (hwm != null) {\n    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n      var name = isDuplex ? duplexKey : 'highWaterMark';\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\n    }\n\n    return Math.floor(hwm);\n  } // Default value\n\n\n  return state.objectMode ? 16 : 16 * 1024;\n}\n\nmodule.exports = {\n  getHighWaterMark: getHighWaterMark\n};\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/internal/streams/state.js?");

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\n\n\n//# sourceURL=webpack://treb/./node_modules/readable-stream/lib/internal/streams/stream-browser.js?");

/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n\n\n//# sourceURL=webpack://treb/./node_modules/safe-buffer/index.js?");

/***/ }),

/***/ "./node_modules/sax/lib/sax.js":
/*!*************************************!*\
  !*** ./node_modules/sax/lib/sax.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = __webpack_require__(/*! stream */ \"./node_modules/stream-browserify/index.js\").Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = __webpack_require__(/*! string_decoder */ \"./node_modules/string_decoder/lib/string_decoder.js\").StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // character classes and tokens\n  var whitespace = '\\r\\n\\t '\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var number = '0124356789'\n  var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n  // (Letter | \"_\" | \":\")\n  var quote = '\\'\"'\n  var attribEnd = whitespace + '>'\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // turn all the string character sets into character class objects.\n  whitespace = charClass(whitespace)\n  number = charClass(number)\n  letter = charClass(letter)\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\.\\d-]/\n\n  quote = charClass(quote)\n  attribEnd = charClass(attribEnd)\n\n  function charClass (str) {\n    return str.split('').reduce(function (s, c) {\n      s[c] = true\n      return s\n    }, {})\n  }\n\n  function isRegExp (c) {\n    return Object.prototype.toString.call(c) === '[object RegExp]'\n  }\n\n  function is (charclass, c) {\n    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]\n  }\n\n  function not (charclass, c) {\n    return !is(charclass, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (not(whitespace, c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = chunk.charAt(i++)\n      parser.c = c\n      if (!c) {\n        break\n      }\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = chunk.charAt(i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (is(whitespace, c)) {\n            // wait for it...\n          } else if (is(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (is(quote, c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (is(quote, c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (is(quote, c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (is(whitespace, c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && is(whitespace, c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (is(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (not(whitespace, c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (is(whitespace, c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (is(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (is(whitespace, c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (is(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (is(whitespace, c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (is(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (is(whitespace, c)) {\n            continue\n          } else if (is(quote, c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (is(whitespace, c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (is(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (not(attribEnd, c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (is(whitespace, c)) {\n              continue\n            } else if (not(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (is(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (not(whitespace, c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (is(whitespace, c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser)\n            parser.entity = ''\n            parser.state = returnState\n          } else if (is(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})( false ? 0 : exports)\n\n\n//# sourceURL=webpack://treb/./node_modules/sax/lib/sax.js?");

/***/ }),

/***/ "./node_modules/stream-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/stream-browserify/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\ninherits(Stream, EE);\nStream.Readable = __webpack_require__(/*! readable-stream/lib/_stream_readable.js */ \"./node_modules/readable-stream/lib/_stream_readable.js\");\nStream.Writable = __webpack_require__(/*! readable-stream/lib/_stream_writable.js */ \"./node_modules/readable-stream/lib/_stream_writable.js\");\nStream.Duplex = __webpack_require__(/*! readable-stream/lib/_stream_duplex.js */ \"./node_modules/readable-stream/lib/_stream_duplex.js\");\nStream.Transform = __webpack_require__(/*! readable-stream/lib/_stream_transform.js */ \"./node_modules/readable-stream/lib/_stream_transform.js\");\nStream.PassThrough = __webpack_require__(/*! readable-stream/lib/_stream_passthrough.js */ \"./node_modules/readable-stream/lib/_stream_passthrough.js\");\nStream.finished = __webpack_require__(/*! readable-stream/lib/internal/streams/end-of-stream.js */ \"./node_modules/readable-stream/lib/internal/streams/end-of-stream.js\")\nStream.pipeline = __webpack_require__(/*! readable-stream/lib/internal/streams/pipeline.js */ \"./node_modules/readable-stream/lib/internal/streams/pipeline.js\")\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n\n\n//# sourceURL=webpack://treb/./node_modules/stream-browserify/index.js?");

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n/*<replacement>*/\n\nvar Buffer = __webpack_require__(/*! safe-buffer */ \"./node_modules/safe-buffer/index.js\").Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}\n\n//# sourceURL=webpack://treb/./node_modules/string_decoder/lib/string_decoder.js?");

/***/ }),

/***/ "./treb-base-types/src/area.ts":
/*!*************************************!*\
  !*** ./treb-base-types/src/area.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IsCellAddress\": () => (/* binding */ IsCellAddress),\n/* harmony export */   \"Area\": () => (/* binding */ Area)\n/* harmony export */ });\n/**\n * type guard function\n * FIXME: is there a naming convention for these?\n */\nconst IsCellAddress = (obj) => {\n    return (typeof obj === 'object' &&\n        typeof obj.row !== 'undefined' &&\n        typeof obj.column !== 'undefined');\n};\n/**\n * class represents a rectangular area on a sheet. can be a range,\n * single cell, entire row/column, or entire sheet.\n *\n * \"entire\" row/column/sheet is represented with an infinity in the\n * start/end value for row/column/both, so watch out on loops. the\n * sheet class has a method for reducing infinite ranges to actual\n * populated ranges.\n */\nclass Area {\n    /**\n     *\n     * @param start\n     * @param end\n     * @param normalize: calls the normalize function\n     */\n    constructor(start, end = start, normalize = false) {\n        /*\n        // copy\n        this.start_ = {\n          row: start.row, column: start.column,\n          absolute_column: !!start.absolute_column,\n          absolute_row: !!start.absolute_row };\n    \n        this.end_ = {\n          row: end.row, column: end.column,\n          absolute_column: !!end.absolute_column,\n          absolute_row: !!end.absolute_row };\n        */\n        // patch nulls. this is an effect of transferring via JSON, \n        // infinities are -> null. make sure to strict === null.\n        // NOTE that the patch function returns a clone, so we can store the \n        // returned object (instead of copying, which we used to do).\n        this.end_ = this.PatchNull(end);\n        this.start_ = this.PatchNull(start);\n        if (normalize)\n            this.Normalize();\n        // this.ResetIterator();\n    }\n    static FromColumn(column) {\n        return new Area({ row: Infinity, column });\n    }\n    static FromRow(row) {\n        return new Area({ row, column: Infinity });\n    }\n    static ColumnToLabel(c) {\n        let s = String.fromCharCode(65 + c % 26);\n        while (c > 25) {\n            c = Math.floor(c / 26) - 1;\n            s = String.fromCharCode(65 + c % 26) + s;\n        }\n        return s;\n    }\n    static CellAddressToLabel(address, sheet_id = false) {\n        const prefix = sheet_id ? `${address.sheet_id || 0}!` : '';\n        return prefix\n            + (address.absolute_column ? '$' : '')\n            + this.ColumnToLabel(address.column)\n            + (address.absolute_row ? '$' : '')\n            + (address.row + 1);\n    }\n    /**\n     * merge two areas and return a new area.\n     * UPDATE to support arbitrary arguments\n     */\n    static Join(base, ...args) {\n        const area = new Area(base.start, base.end);\n        for (const arg of args) {\n            if (arg) {\n                area.ConsumeAddress(arg.start);\n                area.ConsumeAddress(arg.end);\n            }\n        }\n        return area;\n    }\n    /**\n     * creates an area that expands the original area in all directions\n     * (except at the top/left edges)\n     */\n    static Bleed(area, length = 1) {\n        return new Area({\n            row: Math.max(0, area.start.row - length),\n            column: Math.max(0, area.start.column - length),\n        }, {\n            row: area.end.row + length,\n            column: area.end.column + length,\n        });\n    }\n    /** accessor returns a _copy_ of the start address */\n    get start() {\n        return Object.assign({}, this.start_);\n    }\n    /** accessor */\n    set start(value) { this.start_ = value; }\n    /** accessor returns a _copy_ of the end address */\n    get end() {\n        return Object.assign({}, this.end_);\n    }\n    /** accessor */\n    set end(value) { this.end_ = value; }\n    /** returns number of rows, possibly infinity */\n    get rows() {\n        if (this.start_.row === Infinity || this.end_.row === Infinity)\n            return Infinity;\n        return this.end_.row - this.start_.row + 1;\n    }\n    /** returns number of columns, possibly infinity */\n    get columns() {\n        if (this.start_.column === Infinity || this.end_.column === Infinity)\n            return Infinity;\n        return this.end_.column - this.start_.column + 1;\n    }\n    /** returns number of cells, possibly infinity */\n    get count() {\n        return this.rows * this.columns;\n    }\n    /** returns flag indicating this is the entire sheet, usually after \"select all\" */\n    get entire_sheet() {\n        return this.entire_row && this.entire_column;\n    }\n    /** returns flag indicating this range includes infinite rows */\n    get entire_column() {\n        return (this.start_.row === Infinity);\n    }\n    /** returns flag indicating this range includes infinite columns */\n    get entire_row() {\n        return (this.start_.column === Infinity);\n    }\n    PatchNull(address) {\n        const copy = Object.assign({}, address);\n        if (copy.row === null) {\n            copy.row = Infinity;\n        }\n        if (copy.column === null) {\n            copy.column = Infinity;\n        }\n        return copy;\n    }\n    SetSheetID(id) {\n        this.start_.sheet_id = id;\n    }\n    Normalize() {\n        /*\n        let columns = [this.start.column, this.end.column].sort((a, b) => a-b);\n        let rows = [this.start.row, this.end.row].sort((a, b) => a-b);\n    \n        this.start_ = {row: rows[0], column: columns[0]};\n        this.end = {row:rows[1], column: columns[1]};\n        */\n        // we need to bind the element and the absolute/relative status\n        // so sorting is too simple\n        const start = Object.assign({}, this.start_);\n        const end = Object.assign({}, this.end_);\n        /*\n        const start = {\n          sheet_id: this.start_.sheet_id,\n          row: this.start_.row,\n          column: this.start_.column,\n          absolute_column: this.start_.absolute_column,\n          absolute_row: this.start_.absolute_row };\n    \n        const end = {\n          sheet_id: this.end_.sheet_id, // we don't ever use this, but copy JIC\n          row: this.end_.row,\n          column: this.end_.column,\n          absolute_column: this.end_.absolute_column,\n          absolute_row: this.end_.absolute_row };\n        */\n        // swap row\n        if (start.row === Infinity || end.row === Infinity) {\n            start.row = end.row = Infinity;\n        }\n        else if (start.row > end.row) {\n            start.row = this.end_.row;\n            start.absolute_row = this.end_.absolute_row;\n            end.row = this.start_.row;\n            end.absolute_row = this.start_.absolute_row;\n        }\n        // swap column\n        if (start.column === Infinity || end.column === Infinity) {\n            start.column = end.column = Infinity;\n        }\n        else if (start.column > end.column) {\n            start.column = this.end_.column;\n            start.absolute_column = this.end_.absolute_column;\n            end.column = this.start_.column;\n            end.absolute_column = this.start_.absolute_column;\n        }\n        this.start_ = start;\n        this.end_ = end;\n    }\n    /** returns the top-left cell in the area */\n    TopLeft() {\n        const address = { row: 0, column: 0 };\n        if (!this.entire_row)\n            address.column = this.start.column;\n        if (!this.entire_column)\n            address.row = this.start.row;\n        return address;\n    }\n    /** returns the bottom-right cell in the area */\n    BottomRight() {\n        const address = { row: 0, column: 0 };\n        if (!this.entire_row)\n            address.column = this.end.column;\n        if (!this.entire_column)\n            address.row = this.end.row;\n        return address;\n    }\n    ContainsRow(row) {\n        return this.entire_column || (row >= this.start_.row && row <= this.end_.row);\n    }\n    ContainsColumn(column) {\n        return this.entire_row || (column >= this.start_.column && column <= this.end_.column);\n    }\n    Contains(address) {\n        return (this.entire_column || (address.row >= this.start_.row && address.row <= this.end_.row))\n            && (this.entire_row || (address.column >= this.start_.column && address.column <= this.end_.column));\n    }\n    /**\n     * returns true if this area completely contains the argument area\n     * (also if areas are ===, as a side effect). note that this returns\n     * true if A contains B, but not vice-versa\n     */\n    ContainsArea(area) {\n        return this.start.column <= area.start.column\n            && this.end.column >= area.end.column\n            && this.start.row <= area.start.row\n            && this.end.row >= area.end.row;\n    }\n    /**\n     * returns true if there's an intersection. note that this won't work\n     * if there are infinities -- needs real area ?\n     */\n    Intersects(area) {\n        return !(area.start.column > this.end.column\n            || this.start.column > area.end.column\n            || area.start.row > this.end.row\n            || this.start.row > area.end.row);\n    }\n    Equals(area) {\n        return area.start_.row === this.start_.row\n            && area.start_.column === this.start_.column\n            && area.end_.row === this.end_.row\n            && area.end_.column === this.end_.column;\n    }\n    Clone() {\n        return new Area(this.start, this.end); // ensure copies\n    }\n    Array() {\n        if (this.entire_column || this.entire_row)\n            throw new Error('can\\'t convert infinite area to array');\n        const array = new Array(this.rows * this.columns);\n        const sheet_id = this.start_.sheet_id;\n        let index = 0;\n        // does this need sheet ID?\n        for (let row = this.start_.row; row <= this.end_.row; row++) {\n            for (let column = this.start_.column; column <= this.end_.column; column++) {\n                array[index++] = { row, column, sheet_id };\n            }\n        }\n        return array;\n    }\n    get left() {\n        const area = new Area(this.start_, this.end_);\n        area.end_.column = area.start_.column;\n        return area;\n    }\n    get right() {\n        const area = new Area(this.start_, this.end_);\n        area.start_.column = area.end_.column;\n        return area;\n    }\n    get top() {\n        const area = new Area(this.start_, this.end_);\n        area.end_.row = area.start_.row;\n        return area;\n    }\n    get bottom() {\n        const area = new Area(this.start_, this.end_);\n        area.start_.row = area.end_.row;\n        return area;\n    }\n    /** shifts range in place */\n    Shift(rows, columns) {\n        this.start_.row += rows;\n        this.start_.column += columns;\n        this.end_.row += rows;\n        this.end_.column += columns;\n        return this; // fluent\n    }\n    /** Resizes range in place so that it includes the given address */\n    ConsumeAddress(addr) {\n        if (!this.entire_row) {\n            if (addr.column < this.start_.column)\n                this.start_.column = addr.column;\n            if (addr.column > this.end_.column)\n                this.end_.column = addr.column;\n        }\n        if (!this.entire_column) {\n            if (addr.row < this.start_.row)\n                this.start_.row = addr.row;\n            if (addr.row > this.end_.row)\n                this.end_.row = addr.row;\n        }\n    }\n    /** Resizes range in place so that it includes the given area (merge) */\n    ConsumeArea(area) {\n        this.ConsumeAddress(area.start);\n        this.ConsumeAddress(area.end);\n    }\n    /** resizes range in place (updates end) */\n    Resize(rows, columns) {\n        this.end_.row = this.start_.row + rows - 1;\n        this.end_.column = this.start_.column + columns - 1;\n        return this; // fluent\n    }\n    Iterate(f) {\n        if (this.entire_column || this.entire_row) {\n            console.warn(`don't iterate infinite area`);\n            return;\n        }\n        for (let c = this.start_.column; c <= this.end_.column; c++) {\n            for (let r = this.start_.row; r <= this.end_.row; r++) {\n                f({ column: c, row: r, sheet_id: this.start_.sheet_id });\n            }\n        }\n    }\n    /* *\n     * testing: we may have to polyfill for IE11, or just not use it at\n     * all, depending on support level... but it works OK (kind of a clumsy\n     * implementation though).\n     *\n     * as it turns out we don't really use iteration that much (I thought\n     * we did) so it's probably not worth the polyfill...\n     *\n     * /\n    public next(): IteratorResult<ICellAddress> {\n  \n      // sanity\n  \n      if (this.entire_column || this.entire_row) {\n        console.warn('don\\'t iterate over infinte range');\n        return { value: undefined, done: true };\n      }\n  \n      // return current, unless it's OOB; if so, advance\n  \n      if (this.iterator_index.column > this.end.column) {\n        this.iterator_index.column = this.start_.column;\n        this.iterator_index.row++;\n  \n        if (this.iterator_index.row > this.end.row) {\n          this.ResetIterator();\n          return { value: undefined, done: true };\n        }\n  \n      }\n  \n      const result = { value: { ...this.iterator_index }, done: false };\n      this.iterator_index.column++;\n  \n      return result;\n    }\n  \n    public [Symbol.iterator](): IterableIterator <ICellAddress> {\n      return this;\n    }\n    */\n    /**\n     * returns the range in A1-style spreadsheet addressing. if the\n     * entire sheet is selected, returns nothing (there's no way to\n     * express that in A1 notation). returns the row numbers for entire\n     * columns and vice-versa for rows.\n     */\n    get spreadsheet_label() {\n        let s;\n        if (this.entire_sheet)\n            return '';\n        if (this.entire_column) {\n            s = Area.ColumnToLabel(this.start_.column);\n            s += ':' + Area.ColumnToLabel(this.end_.column);\n            return s;\n        }\n        if (this.entire_row) {\n            s = String(this.start_.row + 1);\n            s += ':' + (this.end_.row + 1);\n            return s;\n        }\n        s = Area.CellAddressToLabel(this.start_);\n        if (this.columns > 1 || this.rows > 1)\n            return s + ':' + Area.CellAddressToLabel(this.end_);\n        return s;\n    }\n    /**\n     * FIXME: is this different than what would be returned if\n     * we just used the default json serializer? (...)\n     */\n    toJSON() {\n        return {\n            start: Object.assign({}, this.start_),\n            end: Object.assign({}, this.end_),\n        };\n        /*\n        return {\n          start: {\n            row: this.start.row,\n            absolute_row: this.start.absolute_row,\n            column: this.start.column,\n            absolute_column: this.start.absolute_column,\n          },\n          end: {\n            row: this.end.row,\n            absolute_row: this.end.absolute_row,\n            column: this.end.column,\n            absolute_column: this.end.absolute_column,\n          },\n        };\n        */\n    }\n}\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/area.ts?");

/***/ }),

/***/ "./treb-base-types/src/basic_types.ts":
/*!********************************************!*\
  !*** ./treb-base-types/src/basic_types.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * utility types collected from various other files,\n * attempting to consolidate\n */\n\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/basic_types.ts?");

/***/ }),

/***/ "./treb-base-types/src/cell.ts":
/*!*************************************!*\
  !*** ./treb-base-types/src/cell.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ValidationType\": () => (/* binding */ ValidationType),\n/* harmony export */   \"Cell\": () => (/* binding */ Cell)\n/* harmony export */ });\n/* harmony import */ var _value_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value-type */ \"./treb-base-types/src/value-type.ts\");\n// import { Parser } from 'treb-parser';\n\n/**\n * restructuring from the old system, which had lots of separate arrays for\n * things. for the most part I think having a single array (or object) with\n * objects will be more useful (if not necessarily more efficient). the\n * standout case where this will be inefficient is in passing data to a\n * calculation service, where style information is not useful.\n *\n * things that are in the cell class:\n *  - raw data (formula or value)\n *  - formatted representation\n *  - type (data type including formula or value, implicitly)\n *  - array pointer -- if this cell is part of an array, the array object\n *\n * things that are NOT in the cell class:\n *  - raw per-cell style information. this is in a separate array (object).\n */\n/* *\n * I _think_ using enums is faster. I'm not actually sure about that, though.\n * it stands to reason that a single int compare is faster than a string\n * compare, but you never know with javascript. undefined preferred over null.\n * formula implies a string.\n *\n * undefined is 0 so we can test it as falsy.\n *\n * we're passing this type information out to calculators, so it needs\n * to have known values. DO NOT MODIFY EXISTING INDEXES, or at least be\n * aware of the implications. definitely do not change undefined => 0.\n * /\nexport enum ValueType {\n  undefined = 0,\n\n  // formula is a string; we usually test the first character === '='\n  formula = 1,\n  string = 2,\n  number = 3,\n  boolean = 4,\n\n  // we don't actually use this type, it's here for matching only\n  object = 5,\n\n  // error is a STRING VALUE... object errors are layered on top? is that\n  // correct? (...) it sort of makes sense... since we have separate typing\n  error = 6,\n}\n*/\n/**\n * validation TODO: date, number, boolean, &c\n */\nvar ValidationType;\n(function (ValidationType) {\n    ValidationType[ValidationType[\"List\"] = 0] = \"List\";\n    ValidationType[ValidationType[\"Date\"] = 1] = \"Date\";\n    ValidationType[ValidationType[\"Range\"] = 2] = \"Range\";\n    ValidationType[ValidationType[\"Number\"] = 3] = \"Number\";\n    ValidationType[ValidationType[\"Boolean\"] = 4] = \"Boolean\";\n})(ValidationType || (ValidationType = {}));\nclass Cell {\n    // --- class methods --------------------------------------------------------\n    constructor(value, value_type) {\n        // the value type, js intrinics plus a special type for formula\n        this.type = _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.undefined;\n        this.render_dirty = true;\n        if (typeof value !== 'undefined')\n            this.Set(value, value_type);\n    }\n    // --- static methods -------------------------------------------------------\n    static StringToColumn(s) {\n        let index = 0;\n        s = s.toUpperCase();\n        for (let i = 0; i < s.length; i++) {\n            index *= 26;\n            index += (s.charCodeAt(i) - 64);\n        }\n        return index - 1;\n    }\n    /** type guard */\n    ValueIsNumber() {\n        return this.type === _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.number;\n    }\n    /** type guard */\n    ValueIsFormula() {\n        return this.type === _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.formula;\n    }\n    /** type guard */\n    ValueIsBoolean() {\n        return this.type === _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.boolean;\n    }\n    ///\n    /** flush style information and things that rely on it (formatted value) */\n    FlushStyle() {\n        this.formatted = this.rendered_type = this.style = undefined;\n        this.render_dirty = true;\n    }\n    /** flush array information */\n    FlushArray() {\n        this.area = undefined;\n    }\n    /** flush cached data: formatted and calculated */\n    FlushCache() {\n        this.calculated\n            = this.calculated_type\n                = this.formatted\n                    = this.rendered_type\n                        = this.render_function\n                            = this.click_function\n                                = undefined;\n        this.render_dirty = true;\n    }\n    Reset() {\n        this.type = _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.undefined;\n        this.value\n            = this.note\n                = this.hyperlink\n                    = this.formatted\n                        = this.rendered_type\n                            = this.style\n                                = this.calculated\n                                    = this.calculated_type\n                                        = this.area\n                                            = this.renderer_data // keep here?\n                                                = this.render_function\n                                                    = this.click_function\n                                                        = undefined;\n        this.render_dirty = true;\n    }\n    Set(value, type = (0,_value_type__WEBPACK_IMPORTED_MODULE_0__.GetValueType)(value)) {\n        this.value = value;\n        this.type = type;\n        this.formatted =\n            this.rendered_type =\n                this.style =\n                    this.calculated =\n                        this.calculated_type =\n                            this.render_function =\n                                this.click_function =\n                                    this.area = undefined;\n        this.render_dirty = true;\n    }\n    /** sets calculated value and flushes cached value */\n    SetCalculatedValue(value, type = (0,_value_type__WEBPACK_IMPORTED_MODULE_0__.GetValueType)(value)) {\n        if (this.calculated === value)\n            return;\n        this.calculated = value;\n        this.calculated_type = type;\n        this.formatted = this.rendered_type = undefined;\n        this.render_dirty = true;\n    }\n    /**\n     * composite method for setting value or error, based on value\n     */\n    SetCalculatedValueOrError(value, type) {\n        if (typeof type === 'undefined') {\n            if (typeof value === 'object' && value.error) {\n                type = _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.error;\n                value = value.error;\n            }\n            else {\n                type = (0,_value_type__WEBPACK_IMPORTED_MODULE_0__.GetValueType)(value);\n            }\n        }\n        if (this.calculated === value)\n            return;\n        this.calculated = value;\n        this.calculated_type = type;\n        this.formatted = this.rendered_type = undefined;\n        this.render_dirty = true;\n    }\n    /**\n     * get value -- calculation result (not formatted) or literal. for\n     * literal strings, we strip leading apostrophes (these are used to\n     * prevent parsing of literal strings that look like other things).\n     */\n    GetValue() {\n        if (this.calculated_type)\n            return this.calculated;\n        // if (this.type === ValueType.string &&\n        //    this.value && this.value[0] === '\\'') return this.value.slice(1);\n        // we maintain a type, but typescript won't associate the two so\n        // this test needs to use the actual type\n        if (typeof this.value === 'string' && this.value[0] === '\\'') {\n            return this.value.slice(1);\n        }\n        return this.value;\n    }\n    /* *\n     * new version of GetValue that preserves errors. for non-errors this\n     * behaves identically to the original GetValue. for errors, returns\n     * an error object {error: string};\n     * /\n    public GetValue2(): CellValue | {error: CellValue} {\n      if (this.calculated_type) {\n        return (this.calculated_type === ValueType.error) ?\n          { error: this.calculated } : this.calculated;\n      }\n      // if (this.type === ValueType.string &&\n      //    this.value && this.value[0] === '\\'') return this.value.slice(1);\n      if (typeof this.value === 'string' && this.value[0] === '\\'') { return this.value.slice(1); } // @see GetValue\n  \n      return this.value;\n    }\n    */\n    /* *\n     * we have an issue where a reference to an empty cell winds up returning\n     * a string, goes into a numerical calculation, and slows everything down.\n     *\n     * this is kind of a corner case. it's not that there's a reference to an\n     * empty cell -- that works OK. there's a reference to a cell, which is\n     * itself a reference to an empty cell. that's why it's a function, which\n     * is being returned as a string.\n     *\n     * in this case because it's the function value, I think returning 0 is ok.\n     * BUT, it still might make sense to return undefined.\n     * /\n    public GetValue3(): CellValue|{error: string} { // |FunctionError {\n  \n      // so... what is this? shouldn't this be an object? (...)\n     \n      if (this.calculated_type) {\n        return (this.calculated_type === ValueType.error) ?\n          { error: this.calculated as string } : this.calculated;\n      }\n  \n      if (this.type === ValueType.formula) {\n        // formula, but no calc type... undefined or zero? (...)\n        return 0; // undefined;\n      }\n      // if (this.type === ValueType.string &&\n      //    this.value && this.value[0] === '\\'') return this.value.slice(1);\n      if (typeof this.value === 'string' && this.value[0] === '\\'') { return this.value.slice(1); } // @see GetValue\n  \n      return this.value;\n    }\n    */\n    /**\n     * this function follows the rule of GetValue3, which is: if the type\n     * is a function but there is no calculated value, then return 0.\n     */\n    GetValue4() {\n        if (this.calculated_type) {\n            return {\n                type: this.calculated_type,\n                value: this.calculated,\n            };\n        }\n        if (this.type === _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.formula) {\n            return {\n                type: _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.number,\n                value: 0,\n            };\n        }\n        return {\n            type: this.type,\n            value: (typeof this.value === 'string' && this.value[0] === '\\'') ? this.value.slice(1) : this.value, // @see GetValue \n        };\n    }\n    /**\n     * set note. set undefined to clear.\n     */\n    SetNote(note) {\n        this.note = note;\n        this.render_dirty = true;\n    }\n    /** sets error (FIXME: error type) */\n    SetCalculationError(err = 'ERR') {\n        this.SetCalculatedValue(err, _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.error);\n    }\n    SetArray(area) {\n        this.type = _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.undefined;\n        this.value =\n            this.formatted =\n                this.rendered_type =\n                    this.style =\n                        this.hyperlink = // note?\n                            this.calculated =\n                                this.calculated_type = undefined;\n        this.area = area;\n        this.render_dirty = true;\n    }\n    SetArrayHead(area, value) {\n        this.type = (0,_value_type__WEBPACK_IMPORTED_MODULE_0__.GetValueType)(value);\n        this.value = value;\n        this.formatted =\n            this.rendered_type =\n                this.style =\n                    this.calculated =\n                        this.calculated_type = undefined;\n        this.area = area;\n        this.render_dirty = true;\n    }\n}\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/cell.ts?");

/***/ }),

/***/ "./treb-base-types/src/cells.ts":
/*!**************************************!*\
  !*** ./treb-base-types/src/cells.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"IsFlatData\": () => (/* binding */ IsFlatData),\n/* harmony export */   \"IsFlatDataArray\": () => (/* binding */ IsFlatDataArray),\n/* harmony export */   \"IsNestedRowArray\": () => (/* binding */ IsNestedRowArray),\n/* harmony export */   \"Cells\": () => (/* binding */ Cells)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _area__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./area */ \"./treb-base-types/src/area.ts\");\n/* harmony import */ var _cell__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cell */ \"./treb-base-types/src/cell.ts\");\n/* harmony import */ var _value_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./value-type */ \"./treb-base-types/src/value-type.ts\");\n/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./union */ \"./treb-base-types/src/union.ts\");\n/**\n * switched to row-major, seems to have no ill effects\n * (not sure if there are benefits yet either)\n */\n\n\n\n\n\n// some type guards for the various data types\nconst IsFlatData = (test) => {\n    return !test.cells;\n};\nconst IsFlatDataArray = (test) => {\n    return (!!test[0]) && IsFlatData(test[0]);\n};\nconst IsNestedRowArray = (test) => {\n    return (!!test[0]) && (test[0].row !== undefined);\n};\n// ...\n/**\n * collection of cells, basically a wrapper around an\n * array, with some accessor and control methods.\n */\nclass Cells {\n    constructor() {\n        /** switching to row-major */\n        this.data = [];\n        // tslint:disable-next-line:variable-name\n        this.rows_ = 0;\n        // tslint:disable-next-line:variable-name\n        this.columns_ = 0;\n    }\n    get rows() { return this.rows_; }\n    get columns() { return this.columns_; }\n    /**\n     * the sheet wants to make sure this row exists, probably because it has\n     * a header. so we will update our dimensions to match. we don't actually\n     * add data.\n     *\n     * this is not serialized. specific headers aren't serialized either, at\n     * the moment, so it's sort of irrelevant. if we start serializing headers,\n     * the deserialization routine can call this function to pad out, so we\n     * don't need to store it here.\n     */\n    EnsureRow(row) {\n        this.rows_ = Math.max(row + 1, this.rows_);\n    }\n    /** @see EnsureRow */\n    EnsureColumn(column) {\n        this.columns_ = Math.max(column + 1, this.columns_);\n    }\n    /**\n     * this class does none of the validation/correction\n     * required when inserting rows/columns. that should\n     * be done by external logic. this method only does\n     * the mechanical work of inserting rows/columns.\n     */\n    InsertColumns(before = 0, count = 1) {\n        // NOTE: iterating a sparse array, in chrome at least, only\n        // hits populated keys. the returned array has the same\n        // indexes. that is very nice.\n        this.data = this.data.map((row) => {\n            if (row.length >= before) {\n                const tmp = row.slice(0, before);\n                let index = before + count;\n                row.slice(before).forEach((column) => tmp[index++] = column);\n                return tmp;\n            }\n            return row;\n        });\n        this.columns_ += count;\n    }\n    DeleteColumns(index, count = 1) {\n        // trap! splice returns _removed_ elements so don't use map()\n        this.data.forEach((row) => row.splice(index, count));\n        this.columns_ -= count;\n    }\n    DeleteRows(index, count = 1) {\n        this.data.splice(index, count);\n        this.rows_ -= count;\n    }\n    /**\n     * this class does none of the validation/correction\n     * required when inserting rows/columns. that should\n     * be done by external logic. this method only does\n     * the mechanical work of inserting rows/columns.\n     */\n    InsertRows(before = 0, count = 1) {\n        const args = [before, 0, []];\n        for (let i = 1; i < count; i++)\n            args.push([]);\n        Array.prototype.splice.apply(this.data, args);\n        this.rows_ += count;\n    }\n    /**\n     * return the given cell or `undefined`, optionally creating\n     * new cells as necessary\n     *\n     * @param create_new always return a cell\n     */\n    GetCell(address, create_new) {\n        const { row, column } = address;\n        if (!this.data[row]) {\n            if (create_new) {\n                this.data[row] = [];\n                this.rows_ = Math.max(this.rows_, row + 1);\n            }\n            else\n                return undefined;\n        }\n        if (!this.data[row][column]) {\n            if (create_new) {\n                this.data[row][column] = new _cell__WEBPACK_IMPORTED_MODULE_1__.Cell();\n                this.columns_ = Math.max(this.columns_, column + 1);\n            }\n        }\n        return this.data[row][column];\n    }\n    /**\n     * apply function to range or address. skips empty cells (for now...)\n     * (already have this function, it's called \"IterateArea\". \"Apply\" is better.)\n     * /\n    public Apply(target: ICellAddress|IArea, func: (cell: Cell) => void): void {\n  \n      if (IsCellAddress(target)) {\n        target = new Area(target);\n      }\n  \n      const start = target.start;\n      const end = target.end;\n  \n      for (let r = start.row; r <= end.row; r++) {\n        if (this.data[r]) {\n          const row = this.data[r];\n          for (let c = start.column; c < end.column; c++) {\n            if (this.data[r][c]) {\n              func.call(undefined, row[c]);\n            }\n          }\n        }\n      }\n  \n    }\n    */\n    /** returns an existing cell or creates a new cell. */\n    EnsureCell(address) {\n        const { row, column } = address;\n        let ref = this.data[row];\n        if (!ref) {\n            this.data[row] = ref = [];\n            this.rows_ = Math.max(this.rows_, row + 1);\n        }\n        let cell = ref[column];\n        if (!cell) {\n            cell = ref[column] = new _cell__WEBPACK_IMPORTED_MODULE_1__.Cell();\n            this.columns_ = Math.max(this.columns_, column + 1);\n        }\n        return cell;\n    }\n    /**\n     * with the update, we assume the passed-in data is row-major.\n     * when reading an older file, transpose.\n     */\n    FromArray(data = [], transpose = false) {\n        this.data = [];\n        let rows = 0;\n        let columns = 0;\n        if (transpose) {\n            columns = data.length;\n            for (let c = 0; c < columns; c++) {\n                const ref = data[c];\n                rows = Math.max(rows, ref.length);\n                for (let r = 0; r < ref.length; r++) {\n                    if (!this.data[r])\n                        this.data[r] = [];\n                    this.data[r][c] = new _cell__WEBPACK_IMPORTED_MODULE_1__.Cell(ref[r]);\n                }\n            }\n        }\n        else {\n            rows = data.length;\n            for (let r = 0; r < rows; r++) {\n                const column = [];\n                const ref = data[r];\n                columns = Math.max(columns, ref.length);\n                for (let c = 0; c < ref.length; c++)\n                    column[c] = new _cell__WEBPACK_IMPORTED_MODULE_1__.Cell(ref[c]);\n                this.data[r] = column;\n            }\n        }\n        this.rows_ = rows;\n        this.columns_ = columns;\n    }\n    FromJSON(data = []) {\n        this.data = [];\n        // handle nested data; fix. we can make the simplifying assumption\n        // that data is either nested, or not, but never both. therefore, we\n        // just need to check the first element.\n        if (!IsFlatDataArray(data)) {\n            const new_data = [];\n            if (IsNestedRowArray(data)) {\n                for (const block of data) {\n                    for (const cell of block.cells) {\n                        new_data.push(Object.assign(Object.assign({}, cell), { row: block.row }));\n                    }\n                }\n            }\n            else {\n                for (const block of data) {\n                    for (const cell of block.cells) {\n                        new_data.push(Object.assign(Object.assign({}, cell), { column: block.column }));\n                    }\n                }\n            }\n            data = new_data;\n        }\n        /*\n        if (data[0] && data[0].cells) {\n    \n          // console.info('reading nested data');\n    \n          const new_data: any[] = [];\n          for (const element of data) {\n            if (typeof element.row !== 'undefined') {\n              for (const cell of element.cells) {\n                new_data.push({row: element.row, ...cell});\n              }\n            }\n            else if (typeof element.column !== 'undefined') {\n              for (const cell of element.cells) {\n                new_data.push({column: element.column, ...cell});\n              }\n            }\n          }\n          data = new_data;\n    \n        }\n        */\n        for (const obj of data) {\n            if (!this.data[obj.row])\n                this.data[obj.row] = [];\n            const cell = new _cell__WEBPACK_IMPORTED_MODULE_1__.Cell(obj.value);\n            if (typeof obj.calculated !== 'undefined') {\n                // cell.calculated = obj.calculated;\n                // cell.calculated_type = obj.calculated_type;\n                cell.SetCalculatedValue(obj.calculated, obj.calculated_type);\n            }\n            if (typeof obj.note !== 'undefined') {\n                cell.note = obj.note;\n            }\n            if (typeof obj.hyperlink !== 'undefined') {\n                cell.hyperlink = obj.hyperlink;\n            }\n            // stop wrecking arrays\n            if (this.data[obj.row][obj.column] && this.data[obj.row][obj.column].area) {\n                cell.area = this.data[obj.row][obj.column].area;\n            }\n            this.data[obj.row][obj.column] = cell;\n            // since we are serializing the array data (when storing calculated\n            // values), is this getting called every time? I think it might be...\n            // we're fixing the former, anyway.\n            if (obj.area) {\n                const area = new _area__WEBPACK_IMPORTED_MODULE_0__.Area(obj.area.start, obj.area.end); // isn't there a clone method?\n                for (let row = area.start.row; row <= area.end.row; row++) {\n                    for (let column = area.start.column; column <= area.end.column; column++) {\n                        if (!this.data[row])\n                            this.data[row] = [];\n                        if (!this.data[row][column])\n                            this.data[row][column] = new _cell__WEBPACK_IMPORTED_MODULE_1__.Cell();\n                        this.data[row][column].area = area;\n                    }\n                }\n            }\n            if (obj.merge_area) {\n                const merge_area = new _area__WEBPACK_IMPORTED_MODULE_0__.Area(obj.merge_area.start, obj.merge_area.end);\n                for (let row = merge_area.start.row; row <= merge_area.end.row; row++) {\n                    for (let column = merge_area.start.column; column <= merge_area.end.column; column++) {\n                        if (!this.data[row])\n                            this.data[row] = [];\n                        if (!this.data[row][column])\n                            this.data[row][column] = new _cell__WEBPACK_IMPORTED_MODULE_1__.Cell();\n                        this.data[row][column].merge_area = merge_area;\n                    }\n                }\n            }\n            if (obj.validation) {\n                cell.validation = obj.validation;\n            }\n            //if (obj.locked) {\n            //  cell.locked = obj.locked;\n            //}\n        }\n        this.rows_ = this.data.length;\n        this.columns_ = this.data.reduce((max, row) => Math.max(max, row.length), 0);\n    }\n    toJSON(options = {}) {\n        let start_column = 0;\n        let start_row = 0;\n        let end_row = this.data.length - 1;\n        let end_column;\n        if (options.subset) {\n            start_column = options.subset.start.column;\n            start_row = options.subset.start.row;\n            end_row = options.subset.end.row;\n        }\n        const data = [];\n        let last_row = -1;\n        let last_col = -1;\n        // unifying [FIXME: move into class]\n        // FIXME: why not use the original, instead of requiring a method\n        // call, and then re-order? that also makes it easier to pivot\n        // (order by rows or columns)\n        // ... (we did that)\n        const row_keys = {};\n        const column_keys = {};\n        for (let row = start_row; row <= end_row; row++) {\n            if (this.data[row]) {\n                const ref = this.data[row];\n                end_column = ref.length - 1;\n                if (options.subset)\n                    end_column = options.subset.end.column;\n                for (let column = start_column; column <= end_column; column++) {\n                    const cell = ref[column];\n                    // because only the array head will have a value, this test\n                    // will filter out empty cells and non-head array cells\n                    // update: also add merge heads\n                    const merge_head = cell && cell.merge_area\n                        && cell.merge_area.start.row === row\n                        && cell.merge_area.start.column === column;\n                    const array_head = cell && cell.area\n                        && cell.area.start.row === row\n                        && cell.area.start.column === column;\n                    const is_empty = cell ? (cell.type === _value_type__WEBPACK_IMPORTED_MODULE_2__.ValueType.string && !cell.value) : true;\n                    // NOTE: we added the check on calculated && calculated_value,\n                    // so we preserve rendered data for arrays. but that actually writes\n                    // the array data as well, which is unnecessary (?) -- FIXME\n                    //\n                    // actually, check how that's interpreted on load, because it might\n                    // break if we have a value but not the array area (...)\n                    // FIXME: what's up with this? we check style? (...) can't recall\n                    // why we do that, because we should ensure empty cells if there's\n                    // a style (separately).\n                    // NOTE: switching test from \"calculated\" to \"calculated type\": this\n                    // should preserve zeros.\n                    if (cell && (!is_empty || options.preserve_empty_strings) &&\n                        (merge_head || cell.type || (cell.calculated_type && options.expand_arrays) ||\n                            (cell.calculated_type && options.calculated_value) ||\n                            (cell.validation) ||\n                            (options.decorated_cells && cell.style &&\n                                (cell.style.fill || cell.style.border_bottom ||\n                                    cell.style.border_top || cell.style.border_left || cell.style.border_right)))) {\n                        const obj = { row, column, value: cell.value };\n                        if (cell.note) {\n                            obj.note = cell.note;\n                        }\n                        if (cell.hyperlink) {\n                            obj.hyperlink = cell.hyperlink;\n                        }\n                        if (options.preserve_type)\n                            obj.type = cell.type;\n                        if (options.sheet_id)\n                            obj.sheet_id = options.sheet_id;\n                        if (options.calculated_value &&\n                            typeof cell.calculated !== 'undefined') { // && cell.calculated_type !== ValueType.error) {\n                            obj.calculated = cell.calculated;\n                            // always preserve error type, because we can't infer\n                            if (options.preserve_type || cell.calculated_type === _value_type__WEBPACK_IMPORTED_MODULE_2__.ValueType.error) {\n                                obj.calculated_type = cell.calculated_type;\n                            }\n                        }\n                        if (cell.area && array_head) {\n                            obj.area = cell.area.toJSON();\n                        }\n                        if (cell.merge_area) {\n                            obj.merge_area = cell.merge_area.toJSON();\n                        }\n                        if (cell.validation) {\n                            obj.validation = cell.validation; // safe? \n                        }\n                        //if (cell.locked) {\n                        //  obj.locked = cell.locked; // d'oh\n                        //}\n                        if (options.cell_style_refs &&\n                            options.cell_style_refs[column] &&\n                            options.cell_style_refs[column][row]) {\n                            obj.style_ref = options.cell_style_refs[column][row];\n                            options.cell_style_refs[column][row] = 0; // consume\n                            // console.info(`consume @ ${column}, ${row}: ${obj.style_ref } => ${options.cell_style_refs[column][row]}`);\n                        }\n                        row_keys[row] = row;\n                        column_keys[column] = column;\n                        last_row = Math.max(row, last_row);\n                        last_col = Math.max(column, last_col);\n                        data.push(obj);\n                    }\n                }\n            }\n        }\n        if (options.nested) {\n            const row_key_map = Object.keys(row_keys);\n            const col_key_map = Object.keys(column_keys);\n            // extra test to make sure it's not empty\n            if ((row_key_map.length <= col_key_map.length) && row_key_map.length) {\n                const cells = {};\n                // use rows\n                const new_data = [];\n                for (const element of data) {\n                    const { row } = element, remainder = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(element, [\"row\"]);\n                    if (!cells[element.row])\n                        cells[element.row] = [];\n                    cells[element.row].push(remainder);\n                }\n                for (const key of row_key_map) {\n                    const row = Number(key);\n                    new_data.push({ row, cells: cells[row] });\n                }\n                return { data: new_data, rows: last_row, columns: last_col + 1 };\n            }\n            else if (col_key_map.length) {\n                const cells = {};\n                // use columns\n                const new_data = [];\n                for (const element of data) {\n                    const { column } = element, remainder = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__rest)(element, [\"column\"]);\n                    if (!cells[element.column])\n                        cells[element.column] = [];\n                    cells[element.column].push(remainder);\n                }\n                for (const key of col_key_map) {\n                    const column = Number(key);\n                    new_data.push({ column, cells: cells[column] });\n                }\n                return { data: new_data, rows: last_row, columns: last_col + 1 };\n            }\n        }\n        return { data, rows: last_row + 1, columns: last_col + 1 };\n    }\n    GetAll(transpose = false) {\n        return this.GetRange({ row: 0, column: 0 }, { row: this.rows_ - 1, column: this.columns_ - 1 }, transpose);\n    }\n    /** simply cannot make this work with overloads (prove me wrong) */\n    Normalize2(from, to) {\n        if (from.column === Infinity) {\n            from = Object.assign(Object.assign({}, from), { column: 0 });\n        }\n        if (from.row === Infinity) {\n            from = Object.assign(Object.assign({}, from), { row: 0 });\n        }\n        if (to.column === Infinity) {\n            to = Object.assign(Object.assign({}, to), { column: this.columns_ - 1 });\n        }\n        if (to.row === Infinity) {\n            to = Object.assign(Object.assign({}, to), { row: this.rows_ - 1 });\n        }\n        return { from, to };\n    }\n    /** simply cannot make this work with overloads (prove me wrong) */\n    Normalize1(from) {\n        if (from.column === Infinity) {\n            from = Object.assign(Object.assign({}, from), { column: 0 });\n        }\n        if (from.row === Infinity) {\n            from = Object.assign(Object.assign({}, from), { row: 0 });\n        }\n        return from;\n    }\n    /**\n     * get raw values (i.e. not calculated). anything outside of actual\n     * range will be undefined OR not populated.\n     *\n     * to match GetRange, we return a single value in the case of a single cell,\n     * or a matrix.\n     *\n     * NOTE that I'm not sure this is good behavior. if you're going to\n     * return a single value for one cell, you should return a vector for\n     * a single row OR a single column. alternatively, you should always\n     * return a matrix.\n     *\n     * @param from\n     * @param to\n     * @param transpose\n     */\n    RawValue(from, to = from) {\n        ({ from, to } = this.Normalize2(from, to));\n        if (from.row === to.row && from.column === to.column) {\n            if (this.data[from.row] && this.data[from.row][from.column]) {\n                return this.data[from.row][from.column].value;\n            }\n            return undefined;\n        }\n        const result = [];\n        // grab rows\n        const rows = this.data.slice(from.row, to.row + 1);\n        // now columns\n        const start = from.column;\n        const end = to.column + 1;\n        for (const source of rows) {\n            const target = [];\n            for (let column = start, index = 0; column < end; column++, index++) {\n                const cell = source[column];\n                target.push(cell ? cell.value : undefined);\n            }\n            result.push(target);\n        }\n        return result;\n    }\n    /** gets range as values */\n    GetRange(from, to, transpose = false) {\n        if (to) {\n            ({ from, to } = this.Normalize2(from, to));\n        }\n        else {\n            from = this.Normalize1(from);\n        }\n        // console.info(\"getrange\", from, to, transpose);\n        if (!to || from === to || (from.column === to.column && from.row === to.row)) {\n            if (this.data[from.row] && this.data[from.row][from.column]) {\n                return this.data[from.row][from.column].GetValue();\n            }\n            return undefined;\n        }\n        const value = [];\n        if (transpose) {\n            for (let c = from.column; c <= to.column; c++) {\n                const column = [];\n                for (let r = from.row; r <= to.row; r++) {\n                    if (this.data[r] && this.data[r][c])\n                        column.push(this.data[r][c].GetValue());\n                    else\n                        column.push(undefined);\n                }\n                value.push(column);\n            }\n        }\n        else {\n            for (let r = from.row; r <= to.row; r++) {\n                const row = [];\n                for (let c = from.column; c <= to.column; c++) {\n                    if (this.data[r] && this.data[r][c])\n                        row.push(this.data[r][c].GetValue());\n                    else\n                        row.push(undefined);\n                }\n                value.push(row);\n            }\n        }\n        // console.info(value)\n        return value;\n    }\n    /* *\n     * updated version of GetRange that preserves errors, by calling\n     * the GetValue2 cell function.\n     * /\n    public GetRange2(from: ICellAddress, to?: ICellAddress, transpose = false) {\n  \n      if (!to || from === to || (from.column === to.column && from.row === to.row )){\n        if (this.data[from.row] && this.data[from.row][from.column]){\n          return this.data[from.row][from.column].GetValue2();\n        }\n        return undefined;\n      }\n  \n      const value = [];\n  \n      if (transpose){\n        for ( let c = from.column; c <= to.column; c++ ){\n          const column = [];\n          for ( let r = from.row; r <= to.row; r++ ){\n            if (this.data[r] && this.data[r][c]) column.push(this.data[r][c].GetValue2());\n            else column.push(undefined);\n          }\n          value.push(column);\n        }\n      }\n      else {\n        for ( let r = from.row; r <= to.row; r++ ){\n          const row = [];\n          for ( let c = from.column; c <= to.column; c++ ){\n            if (this.data[r] && this.data[r][c]) row.push(this.data[r][c].GetValue2());\n            else row.push(undefined);\n          }\n          value.push(row);\n        }\n      }\n  \n      return value;\n  \n    }\n    */\n    GetRange4(from, to = from, transpose = false) {\n        ({ from, to } = this.Normalize2(from, to));\n        if (from.row === to.row && from.column === to.column) {\n            if (this.data[from.row] && this.data[from.row][from.column]) {\n                return this.data[from.row][from.column].GetValue4();\n            }\n            return { value: undefined, type: _value_type__WEBPACK_IMPORTED_MODULE_2__.ValueType.undefined };\n        }\n        const value = [];\n        if (transpose) {\n            for (let c = from.column; c <= to.column; c++) {\n                const column = [];\n                for (let r = from.row; r <= to.row; r++) {\n                    if (this.data[r] && this.data[r][c])\n                        column.push(this.data[r][c].GetValue4());\n                    else\n                        column.push((0,_union__WEBPACK_IMPORTED_MODULE_3__.UndefinedUnion)());\n                }\n                value.push(column);\n            }\n        }\n        else {\n            for (let r = from.row; r <= to.row; r++) {\n                const row = [];\n                for (let c = from.column; c <= to.column; c++) {\n                    if (this.data[r] && this.data[r][c])\n                        row.push(this.data[r][c].GetValue4());\n                    else\n                        row.push((0,_union__WEBPACK_IMPORTED_MODULE_3__.UndefinedUnion)());\n                }\n                value.push(row);\n            }\n        }\n        return value;\n    }\n    /**\n     * apply function to address/area\n     */\n    Apply(area, f, create_missing_cells = false) {\n        // allow single address\n        if ((0,_area__WEBPACK_IMPORTED_MODULE_0__.IsCellAddress)(area)) {\n            area = new _area__WEBPACK_IMPORTED_MODULE_0__.Area(area);\n        }\n        // why not just cap? (...)\n        if (area.entire_column || area.entire_row) {\n            throw new Error(`don't iterate infinite cells`);\n        }\n        // these are accessors so we don't want them in the loop\n        const start = area.start;\n        const end = area.end;\n        if (create_missing_cells) {\n            for (let r = start.row; r <= end.row; r++) {\n                if (!this.data[r])\n                    this.data[r] = [];\n                const row = this.data[r];\n                for (let c = start.column; c <= end.column; c++) {\n                    if (!row[c])\n                        row[c] = new _cell__WEBPACK_IMPORTED_MODULE_1__.Cell();\n                    f(row[c], c, r);\n                }\n            }\n        }\n        else {\n            // we can loop over indexes that don't exist, just check for existence\n            for (let r = start.row; r <= end.row; r++) {\n                if (this.data[r]) {\n                    const row = this.data[r];\n                    for (let c = start.column; c <= end.column; c++) {\n                        if (row[c])\n                            f(row[c], c, r);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * set area. shortcut to reduce overhead. consolidates single value\n     * and array value methods, although the implementation is separate.\n     *\n     * watch out for typed arrays, which do not satisfy Array.isArray\n     *\n     * when would this function get a 1D typed array? can't figure that out.\n     * might have something to do with simulation data, but not sure.\n     *\n     * just drop for the time being.\n     *\n     */\n    SetArea(area, values) {\n        if (ArrayBuffer.isView(values)) {\n            throw new Error('ABIV');\n        }\n        if (Array.isArray(values)) { // || ArrayBuffer.isView(values)) {\n            for (let r = area.start.row, i = 0; r <= area.end.row; r++, i++) {\n                if (!this.data[r])\n                    this.data[r] = [];\n                const row = this.data[r];\n                if (values[i]) {\n                    for (let c = area.start.column, j = 0; c <= area.end.column; c++, j++) {\n                        if (!row[c])\n                            row[c] = new _cell__WEBPACK_IMPORTED_MODULE_1__.Cell();\n                        row[c].Set(values[i][j]); // undefined should be implicit\n                    }\n                }\n            }\n        }\n        else {\n            const value_type = (0,_value_type__WEBPACK_IMPORTED_MODULE_2__.GetValueType)(values); // otherwise we'd just call it every time\n            for (let r = area.start.row; r <= area.end.row; r++) {\n                if (!this.data[r])\n                    this.data[r] = [];\n                const row = this.data[r];\n                for (let c = area.start.column; c <= area.end.column; c++) {\n                    if (!row[c])\n                        row[c] = new _cell__WEBPACK_IMPORTED_MODULE_1__.Cell();\n                    row[c].Set(values, value_type);\n                }\n            }\n        }\n        this.rows_ = Math.max(this.rows_, area.end.row + 1);\n        this.columns_ = Math.max(this.columns_, area.end.column + 1);\n    }\n    /**\n     * iterates over all cells (using loops) and runs function per-cell.\n     * FIXME: switch to indexing on empty indexes? (...)\n     */\n    IterateAll(func) {\n        /*\n        const row_keys = Object.keys(this.data);\n        for (const row of row_keys){\n          const n_row = Number(row) || 0;\n          const column_keys = Object.keys(this.data[n_row]);\n          for (const column_key of column_keys){\n            f(this.data[n_row][Number(column_key)]);\n          }\n        }\n        */\n        for (const row of this.data) {\n            if (row) {\n                for (const cell of row) {\n                    if (cell) {\n                        func(cell);\n                    }\n                }\n            }\n        }\n    }\n    /** moved from sheet, so we can do it non-functional style (for perf) */\n    FlushCellStyles() {\n        for (const row of this.data) {\n            if (row) {\n                for (const cell of row) {\n                    if (cell) {\n                        cell.FlushStyle();\n                    }\n                }\n            }\n        }\n    }\n    /** moved from sheet, so we can do it non-functional style (for perf) */\n    FlushCachedValues() {\n        for (const row of this.data) {\n            if (row) {\n                for (const cell of row) {\n                    if (cell) {\n                        cell.FlushCache();\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/cells.ts?");

/***/ }),

/***/ "./treb-base-types/src/color.ts":
/*!**************************************!*\
  !*** ./treb-base-types/src/color.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Color\": () => (/* binding */ Color)\n/* harmony export */ });\n/**\n * utility functions, primarily for adjusting lightness. since we generally\n * traffic in RGB (or symbolic colors) that requires translating to/from HSL.\n */\nclass ColorFunctions {\n    /** darken rgb color by amount (%), optionally relative */\n    Darken(r, g, b, amount, relative = false) {\n        // eslint-disable-next-line prefer-const\n        let { h, s, l } = this.RGBToHSL(r, g, b);\n        if (relative)\n            l -= l * amount / 100;\n        else\n            l -= amount / 100;\n        l = Math.max(0, Math.min(1, l));\n        return this.HSLToRGB(h, s, l);\n    }\n    /** lighten rgb color by amount (%), optionally relative */\n    Lighten(r, g, b, amount, relative = false) {\n        // eslint-disable-next-line prefer-const\n        let { h, s, l } = this.RGBToHSL(r, g, b);\n        if (relative)\n            l += l * amount / 100;\n        else\n            l += amount / 100;\n        l = Math.max(0, Math.min(1, l));\n        return this.HSLToRGB(h, s, l);\n    }\n    RGBToHSL(r, g, b) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n        const max = Math.max(r, g, b);\n        const min = Math.min(r, g, b);\n        let h = 0;\n        let s = 0;\n        const l = (max + min) / 2;\n        if (max === min) {\n            h = s = 0;\n        }\n        else {\n            const d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        return { h: h * 360, s, l };\n    }\n    HSLToRGB(h, s, l) {\n        let r;\n        let g;\n        let b;\n        if (s === 0) {\n            r = g = b = l;\n        }\n        else {\n            h = h / 360;\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n            r = this.HueToRGB(p, q, h + 1 / 3);\n            g = this.HueToRGB(p, q, h);\n            b = this.HueToRGB(p, q, h - 1 / 3);\n        }\n        return {\n            r: Math.round(r * 255),\n            g: Math.round(g * 255),\n            b: Math.round(b * 255),\n        };\n    }\n    HueToRGB(p, q, t) {\n        if (t < 0)\n            t += 1;\n        if (t > 1)\n            t -= 1;\n        if (t < 1 / 6)\n            return p + (q - p) * 6 * t;\n        if (t < 1 / 2)\n            return q;\n        if (t < 2 / 3)\n            return p + (q - p) * (2 / 3 - t) * 6;\n        return p;\n    }\n}\nconst Color = new ColorFunctions();\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/color.ts?");

/***/ }),

/***/ "./treb-base-types/src/import.ts":
/*!***************************************!*\
  !*** ./treb-base-types/src/import.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/import.ts?");

/***/ }),

/***/ "./treb-base-types/src/index.ts":
/*!**************************************!*\
  !*** ./treb-base-types/src/index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Area\": () => (/* reexport safe */ _area__WEBPACK_IMPORTED_MODULE_0__.Area),\n/* harmony export */   \"IsCellAddress\": () => (/* reexport safe */ _area__WEBPACK_IMPORTED_MODULE_0__.IsCellAddress),\n/* harmony export */   \"Cell\": () => (/* reexport safe */ _cell__WEBPACK_IMPORTED_MODULE_1__.Cell),\n/* harmony export */   \"ValidationType\": () => (/* reexport safe */ _cell__WEBPACK_IMPORTED_MODULE_1__.ValidationType),\n/* harmony export */   \"Cells\": () => (/* reexport safe */ _cells__WEBPACK_IMPORTED_MODULE_2__.Cells),\n/* harmony export */   \"IsFlatData\": () => (/* reexport safe */ _cells__WEBPACK_IMPORTED_MODULE_2__.IsFlatData),\n/* harmony export */   \"IsFlatDataArray\": () => (/* reexport safe */ _cells__WEBPACK_IMPORTED_MODULE_2__.IsFlatDataArray),\n/* harmony export */   \"IsNestedRowArray\": () => (/* reexport safe */ _cells__WEBPACK_IMPORTED_MODULE_2__.IsNestedRowArray),\n/* harmony export */   \"Localization\": () => (/* reexport safe */ _localization__WEBPACK_IMPORTED_MODULE_3__.Localization),\n/* harmony export */   \"Rectangle\": () => (/* reexport safe */ _rectangle__WEBPACK_IMPORTED_MODULE_5__.Rectangle),\n/* harmony export */   \"Style\": () => (/* reexport safe */ _style__WEBPACK_IMPORTED_MODULE_6__.Style),\n/* harmony export */   \"TextPartFlag\": () => (/* reexport safe */ _text_part__WEBPACK_IMPORTED_MODULE_7__.TextPartFlag),\n/* harmony export */   \"Box\": () => (/* reexport safe */ _union__WEBPACK_IMPORTED_MODULE_9__.Box),\n/* harmony export */   \"Is2DArray\": () => (/* reexport safe */ _union__WEBPACK_IMPORTED_MODULE_9__.Is2DArray),\n/* harmony export */   \"UndefinedUnion\": () => (/* reexport safe */ _union__WEBPACK_IMPORTED_MODULE_9__.UndefinedUnion),\n/* harmony export */   \"UnionIs\": () => (/* reexport safe */ _union__WEBPACK_IMPORTED_MODULE_9__.UnionIs),\n/* harmony export */   \"GetValueType\": () => (/* reexport safe */ _value_type__WEBPACK_IMPORTED_MODULE_10__.GetValueType),\n/* harmony export */   \"ValueType\": () => (/* reexport safe */ _value_type__WEBPACK_IMPORTED_MODULE_10__.ValueType),\n/* harmony export */   \"DefaultTheme\": () => (/* reexport safe */ _theme__WEBPACK_IMPORTED_MODULE_11__.DefaultTheme),\n/* harmony export */   \"LoadThemeProperties\": () => (/* reexport safe */ _theme__WEBPACK_IMPORTED_MODULE_11__.LoadThemeProperties),\n/* harmony export */   \"ThemeColor\": () => (/* reexport safe */ _theme__WEBPACK_IMPORTED_MODULE_11__.ThemeColor),\n/* harmony export */   \"ThemeColor2\": () => (/* reexport safe */ _theme__WEBPACK_IMPORTED_MODULE_11__.ThemeColor2),\n/* harmony export */   \"Color\": () => (/* reexport safe */ _color__WEBPACK_IMPORTED_MODULE_12__.Color)\n/* harmony export */ });\n/* harmony import */ var _area__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./area */ \"./treb-base-types/src/area.ts\");\n/* harmony import */ var _cell__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cell */ \"./treb-base-types/src/cell.ts\");\n/* harmony import */ var _cells__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cells */ \"./treb-base-types/src/cells.ts\");\n/* harmony import */ var _localization__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./localization */ \"./treb-base-types/src/localization.ts\");\n/* harmony import */ var _basic_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./basic_types */ \"./treb-base-types/src/basic_types.ts\");\n/* harmony import */ var _rectangle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./rectangle */ \"./treb-base-types/src/rectangle.ts\");\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./style */ \"./treb-base-types/src/style.ts\");\n/* harmony import */ var _text_part__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./text_part */ \"./treb-base-types/src/text_part.ts\");\n/* harmony import */ var _import__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./import */ \"./treb-base-types/src/import.ts\");\n/* harmony import */ var _union__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./union */ \"./treb-base-types/src/union.ts\");\n/* harmony import */ var _value_type__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./value-type */ \"./treb-base-types/src/value-type.ts\");\n/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./theme */ \"./treb-base-types/src/theme.ts\");\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./color */ \"./treb-base-types/src/color.ts\");\n/* harmony import */ var _layout__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./layout */ \"./treb-base-types/src/layout.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import * as Style from './style';\n// export { Style };\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/index.ts?");

/***/ }),

/***/ "./treb-base-types/src/layout.ts":
/*!***************************************!*\
  !*** ./treb-base-types/src/layout.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/layout.ts?");

/***/ }),

/***/ "./treb-base-types/src/localization.ts":
/*!*********************************************!*\
  !*** ./treb-base-types/src/localization.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Localization\": () => (/* binding */ Localization)\n/* harmony export */ });\n/**\n * the point of localization is to have a central, single source of truth\n * for the current locale. this can come from the browser, via a GET\n * parameter (mostly for testing), or explicitly from a method call.\n *\n * based on locale we report settings for decimal separator, digit grouping,\n * and argument separator.\n */\nclass Localization {\n    /**\n     * update the locale. this will be called on module load (should\n     * be just once), but can be called subsequently to update.\n     *\n     * priority:\n     * (1) function argument\n     * (2) get parameter\n     * (3) navigator.languages[0]\n     * (4) navigator.language\n     *\n     * regarding languages[0] vs language, see\n     * https://stackoverflow.com/a/33204290\n     *\n     * @param locale explicitly set locale\n     */\n    static UpdateLocale(locale) {\n        var _a;\n        if (locale) {\n            this.locale = locale; // 1\n        }\n        else if (typeof self !== 'undefined') {\n            // const location = ((typeof self === 'undefined' || typeof self.document === 'undefined') ?\n            //  undefined : self.document.location);\n            const location = (_a = self === null || self === void 0 ? void 0 : self.document) === null || _a === void 0 ? void 0 : _a.location;\n            if (location && location.search &&\n                /locale=([^?&]+?)(?:\\?|$|&)/.test(location.search)) {\n                const match = location.search.match(/locale=(.*?)(?:\\?|$|&)/);\n                if (match)\n                    this.locale = match[1];\n                console.info('override locale', this.locale);\n            }\n            else if (typeof navigator !== 'undefined') {\n                if (navigator.languages && navigator.languages[0]) {\n                    this.locale = navigator.languages[0];\n                }\n                else {\n                    this.locale = navigator.language;\n                }\n            }\n        }\n        const decimal_separator = new Intl.NumberFormat(this.locale, { minimumFractionDigits: 1 }).format(3.3).replace(/\\d/g, '');\n        this.decimal_separator = (decimal_separator === ',') ? ',' : '.';\n        if (this.decimal_separator === ',') {\n            this.argument_separator = ';';\n            // FIXME: should be half-space (char?)\n            //\n            // the appropriate character (I think) is \\u2009, \"thin space\", but\n            // it seems to be rendered as full-width space in monospace fonts --\n            // which makes sense -- and since we mostly use those it's probably \n            // immaterial.\n            //\n            // it might be useful for fonts with variable-width characters but\n            // tabular numbers, in which case we would want to use it.\n            //\n            // FIXME: does format use this field, or does it have its own? (...)\n            this.grouping_separator = ' ';\n        }\n        // moved from number format lib\n        let date = new Date(2000, 0, 2, 12, 0, 0, 0); // Sun Jan 2\n        this.UpdateDateComponent(0, 0, date);\n        date = new Date(2000, 1, 7, 12, 0, 0, 0); // Mon Feb 7\n        this.UpdateDateComponent(1, 1, date);\n        date = new Date(2000, 2, 7, 12, 0, 0, 0); // Tue Mar 7\n        this.UpdateDateComponent(2, 2, date);\n        date = new Date(2000, 3, 5, 12, 0, 0, 0); // Wed Apr 5\n        this.UpdateDateComponent(3, 3, date);\n        date = new Date(2000, 4, 4, 12, 0, 0, 0); // Thur May 4\n        this.UpdateDateComponent(4, 4, date);\n        date = new Date(2000, 5, 2, 12, 0, 0, 0); // Fri Jun 2\n        this.UpdateDateComponent(5, 5, date);\n        date = new Date(2000, 6, 1, 12, 0, 0, 0); // Sat Jul 1\n        this.UpdateDateComponent(6, 6, date);\n        date = new Date(2000, 7, 1, 12, 0, 0, 0); // Aug\n        this.UpdateDateComponent(7, -1, date);\n        date = new Date(2000, 8, 1, 12, 0, 0, 0); // Sep\n        this.UpdateDateComponent(8, -1, date);\n        date = new Date(2000, 9, 1, 12, 0, 0, 0); // Oct\n        this.UpdateDateComponent(9, -1, date);\n        date = new Date(2000, 10, 1, 12, 0, 0, 0); // Nov\n        this.UpdateDateComponent(10, -1, date);\n        date = new Date(2000, 11, 1, 12, 0, 0, 0); // Dec\n        this.UpdateDateComponent(11, -1, date);\n        /*\n        console.info('LX', this.locale, this.date_components.short_days,\n          this.date_components.long_days, this.date_components.short_months,\n          this.date_components.long_months);\n        */\n    }\n    static UpdateDateComponent(month_index, day_index, date) {\n        if (day_index >= 0) {\n            this.date_components.short_days[day_index] = date.toLocaleString(this.locale, { weekday: 'short' });\n            this.date_components.long_days[day_index] = date.toLocaleString(this.locale, { weekday: 'long' });\n        }\n        if (month_index >= 0) {\n            this.date_components.short_months[month_index] = date.toLocaleString(this.locale, { month: 'short' });\n            this.date_components.long_months[month_index] = date.toLocaleString(this.locale, { month: 'long' });\n        }\n    }\n}\nLocalization.locale = 'en-us'; // default, for node\nLocalization.decimal_separator = '.';\nLocalization.argument_separator = ',';\nLocalization.grouping_separator = ',';\nLocalization.date_components = {\n    short_days: [\n        'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n    ],\n    long_days: [\n        'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday',\n    ],\n    short_months: [\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\n    ],\n    long_months: [\n        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n        'September', 'October', 'November', 'December',\n    ],\n};\nLocalization.UpdateLocale(); // always call\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/localization.ts?");

/***/ }),

/***/ "./treb-base-types/src/rectangle.ts":
/*!******************************************!*\
  !*** ./treb-base-types/src/rectangle.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Rectangle\": () => (/* binding */ Rectangle)\n/* harmony export */ });\nclass Rectangle {\n    constructor(left = 0, top = 0, width = 0, height = 0) {\n        this.left = left;\n        this.top = top;\n        this.width = width;\n        this.height = height;\n    }\n    get right() { return this.left + this.width; }\n    get bottom() { return this.top + this.height; }\n    /**\n     * create a rectangle from an object that looks\n     * like a rectangle, probably a serialized object\n     */\n    static Create(obj) {\n        return new Rectangle(obj.left || 0, obj.top || 0, obj.width || 0, obj.height || 0);\n    }\n    static IsRectangle(obj) {\n        var _a, _b, _c, _d;\n        return (typeof obj === 'object') &&\n            (typeof ((_a = obj) === null || _a === void 0 ? void 0 : _a.left) === 'number') &&\n            (typeof ((_b = obj) === null || _b === void 0 ? void 0 : _b.top) === 'number') &&\n            (typeof ((_c = obj) === null || _c === void 0 ? void 0 : _c.width) === 'number') &&\n            (typeof ((_d = obj) === null || _d === void 0 ? void 0 : _d.height) === 'number');\n    }\n    /** returns a new rect shifted from this one by (x,y) */\n    Shift(x = 0, y = 0) {\n        return new Rectangle(this.left + x, this.top + y, this.width, this.height);\n    }\n    Scale(scale_x = 1, scale_y = scale_x) {\n        return new Rectangle(this.left * scale_x, this.top * scale_y, this.width * scale_x, this.height * scale_y);\n    }\n    /** returns a new rect expanded from this one by (x,y) */\n    Expand(x = 0, y = 0) {\n        return new Rectangle(this.left, this.top, this.width + x, this.height + y);\n    }\n    /** returns a new rectangle that combines this rectangle with the argument */\n    Combine(rect) {\n        return new Rectangle(Math.min(this.left, rect.left), Math.min(this.top, rect.top), Math.max(this.right, rect.right) - Math.min(this.left, rect.left), Math.max(this.bottom, rect.bottom) - Math.min(this.top, rect.top));\n    }\n    CheckEdges(x, y, border = 16) {\n        let edge = 0;\n        // tslint:disable-next-line:no-bitwise\n        if (x - this.left < border)\n            edge |= 1;\n        // tslint:disable-next-line:no-bitwise\n        if (this.right - x < border)\n            edge |= 2;\n        // tslint:disable-next-line:no-bitwise\n        if (y - this.top < border)\n            edge |= 4;\n        // tslint:disable-next-line:no-bitwise\n        if (this.bottom - y < border)\n            edge |= 8;\n        return edge;\n    }\n    /**\n     * check if rectangle contains the given coordinates, optionally with\n     * some added padding\n     */\n    Contains(x, y, padding = 0) {\n        return (x >= this.left - padding)\n            && (x <= (this.left + this.width + padding))\n            && (y >= this.top - padding)\n            && (y <= (this.top + this.height + padding));\n    }\n    /** convenience method for canvas */\n    ContextFill(context) {\n        context.fillRect(this.left, this.top, this.width, this.height);\n    }\n    /** convenience method for canvas */\n    ContextStroke(context) {\n        context.strokeRect(this.left, this.top, this.width, this.height);\n    }\n    /** clamp coordinate to rectangle */\n    Clamp(x, y) {\n        x = Math.min(Math.max(x, this.left), this.right);\n        y = Math.min(Math.max(y, this.top), this.bottom);\n        return { x, y };\n    }\n    /** convenience method for html element style */\n    ApplyStyle(element) {\n        element.style.top = this.top + 'px';\n        element.style.left = this.left + 'px';\n        element.style.width = this.width + 'px';\n        element.style.height = this.height + 'px';\n    }\n    toJSON() {\n        return {\n            top: this.top, left: this.left, width: this.width, height: this.height,\n        };\n    }\n}\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/rectangle.ts?");

/***/ }),

/***/ "./treb-base-types/src/style.ts":
/*!**************************************!*\
  !*** ./treb-base-types/src/style.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Style\": () => (/* binding */ Style)\n/* harmony export */ });\n// why is this a namespace? module is implicit... it's because of how\n// base types exports; we can't export * as Style, so we're stuck with\n// the namespace (or you could add an intermediate file and import ->\n// export, but that just seems like unecessary complexity and still kludgy).\n// eslint-disable-next-line @typescript-eslint/no-namespace\nvar Style;\n(function (Style) {\n    const empty_json = JSON.stringify({});\n    /** horizontal align constants */\n    let HorizontalAlign;\n    (function (HorizontalAlign) {\n        HorizontalAlign[HorizontalAlign[\"None\"] = 0] = \"None\";\n        HorizontalAlign[HorizontalAlign[\"Left\"] = 1] = \"Left\";\n        HorizontalAlign[HorizontalAlign[\"Center\"] = 2] = \"Center\";\n        HorizontalAlign[HorizontalAlign[\"Right\"] = 3] = \"Right\";\n    })(HorizontalAlign = Style.HorizontalAlign || (Style.HorizontalAlign = {}));\n    /** vertical align constants */\n    let VerticalAlign;\n    (function (VerticalAlign) {\n        VerticalAlign[VerticalAlign[\"None\"] = 0] = \"None\";\n        VerticalAlign[VerticalAlign[\"Top\"] = 1] = \"Top\";\n        VerticalAlign[VerticalAlign[\"Bottom\"] = 2] = \"Bottom\";\n        VerticalAlign[VerticalAlign[\"Middle\"] = 3] = \"Middle\";\n    })(VerticalAlign = Style.VerticalAlign || (Style.VerticalAlign = {}));\n    /**\n     * note that there are no default colors; those should be set\n     * in grid when style is applied. that way the default colors for\n     * border, text and background colors will be theme-dependent and\n     * can change.\n     */\n    Style.DefaultProperties = {\n        horizontal_align: HorizontalAlign.None,\n        vertical_align: VerticalAlign.None,\n        number_format: 'General',\n        nan: 'NaN',\n        // font_size: 10,              // should have units\n        font_size_value: 10,\n        font_size_unit: 'pt',\n        font_face: 'calibri',\n        font_bold: false,\n        font_italic: false,\n        font_underline: false,\n        font_strike: false,\n        // background: 'none',\n        // text_color: 'none',\n        // text: 'theme',\n        // text_theme: 0,\n        text: { theme: 1 },\n        // border_top_color: 'none',\n        // border_left_color: 'none',\n        // border_right_color: 'none',\n        // border_bottom_color: 'none',\n        border_top: 0,\n        border_left: 0,\n        border_right: 0,\n        border_bottom: 0,\n    };\n    /* *\n     * this version of merge is used to support explicit deletes, via\n     * \"undefined\" properties. we use a trick via JSON to skip iterating\n     * properties (I believe this is faster, but have not tested).\n     * /\n    export const Merge2 = (dest: Properties, src: Properties): Properties => {\n      return JSON.parse(JSON.stringify({...dest, ...src}));\n    }\n    */\n    /**\n     * merge. returns a new object, does not update dest in place.\n     * NOTE: if it does not update dest in place, then what would be\n     * the use case for a non-delta merge? (...)\n     */\n    Style.Merge = (dest, src, delta = true) => {\n        const properties = delta ? Object.assign(Object.assign({}, dest), src) : Object.assign({}, src);\n        return JSON.parse(JSON.stringify(properties));\n    };\n    Style.Composite = (list) => {\n        return JSON.parse(JSON.stringify(list.reduce((composite, item) => (Object.assign(Object.assign({}, composite), item)), {})));\n    };\n    Style.Empty = (style) => {\n        return JSON.stringify(style) === empty_json;\n    };\n    Style.ValidColor = (color) => {\n        return !!(color && (!color.none) && (color.text || color.theme || color.theme === 0));\n    };\n    /*\n    export const Prune = (style: Properties): void => {\n  \n      // text default is theme 0, so we can remove that if we see it.\n      // same for borders, we can group\n  \n      if (style.text && !style.text.text && !style.text.theme) {\n        style.text = undefined;\n      }\n  \n      if (style.border_top_fill && !style.border_top_fill.text && !style.border_top_fill.theme) {\n        style.border_top_fill = undefined;\n      }\n  \n      if (style.border_left_fill && !style.border_left_fill.text && !style.border_left_fill.theme) {\n        style.border_left_fill = undefined;\n      }\n  \n      if (style.border_right_fill && !style.border_right_fill.text && !style.border_right_fill.theme) {\n        style.border_right_fill = undefined;\n      }\n  \n      if (style.border_bottom_fill && !style.border_bottom_fill.text && !style.border_bottom_fill.theme) {\n        style.border_bottom_fill = undefined;\n      }\n  \n      // background has no default, so check for 0\n      if (style.fill && !style.fill.text && !style.fill.theme && style.fill.theme !== 0) {\n        style.fill = undefined;\n      }\n  \n    };\n    */\n    /* *\n     * overlay. will always put defaults at the bottom.\n     * /\n    export const Composite = (list: Properties[]) => {\n      return list.reduce((composite, item) => ({...composite, ...item}),\n        {...DefaultProperties});\n    };\n  \n    / * *\n     * modify default properties. useful for theming.\n     * /\n    export const UpdateDefaultProperties = (opts: Properties) => {\n      DefaultProperties = {\n        ...DefaultProperties, ...opts,\n      };\n    };\n    */\n    /**\n     * returns a string representation suitable for canvas (or style)\n     */\n    Style.Font = (properties, scale = 1) => {\n        /*\n        let font_size = properties.font_size;\n        if (typeof font_size === 'number') {\n          font_size = (font_size * scale) + 'pt';\n        }\n        else if (font_size && scale !== 1) {\n          const font_parts = font_size.match(/^([\\d\\.]+)(\\D*)$/);\n          if (font_parts) {\n            font_size = (Number(font_parts[1]) * scale) + font_parts[2];\n          }\n        }\n        */\n        const parts = [];\n        if (properties.font_weight) {\n            parts.push(properties.font_weight.toString());\n        }\n        else if (properties.font_bold) {\n            parts.push('bold');\n        }\n        if (properties.font_italic) {\n            parts.push('italic');\n        }\n        parts.push(((properties.font_size_value || 0) * scale).toFixed(2) +\n            (properties.font_size_unit || 'pt'));\n        parts.push(properties.font_face || '');\n        return parts.join(' ');\n        /*\n        // console.info(\"FS\", font_size);\n    \n        if (properties.font_weight) {\n          return (properties.font_weight + ' ')\n            + (properties.font_italic ? 'italic ' : '')\n            + font_size + ' ' + properties.font_face;\n        }\n        else {\n          return (properties.font_bold ? 'bold ' : '')\n            + (properties.font_italic ? 'italic ' : '')\n            + font_size + ' ' + properties.font_face;\n        }\n        */\n    };\n})(Style || (Style = {}));\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/style.ts?");

/***/ }),

/***/ "./treb-base-types/src/text_part.ts":
/*!******************************************!*\
  !*** ./treb-base-types/src/text_part.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TextPartFlag\": () => (/* binding */ TextPartFlag)\n/* harmony export */ });\nvar TextPartFlag;\n(function (TextPartFlag) {\n    /** just render */\n    TextPartFlag[TextPartFlag[\"default\"] = 0] = \"default\";\n    /** not rendered, but included in layout (spacing) */\n    TextPartFlag[TextPartFlag[\"hidden\"] = 1] = \"hidden\";\n    /** takes up all available space */\n    TextPartFlag[TextPartFlag[\"padded\"] = 2] = \"padded\";\n    /** date component, needs to be filled */\n    TextPartFlag[TextPartFlag[\"date_component\"] = 3] = \"date_component\";\n    /** special flag for minutes (instead of months), which is contextual */\n    TextPartFlag[TextPartFlag[\"date_component_minutes\"] = 4] = \"date_component_minutes\";\n    /** literal (@): reflect the original */\n    TextPartFlag[TextPartFlag[\"literal\"] = 5] = \"literal\";\n    /** formatting (e.g. [red]) */\n    TextPartFlag[TextPartFlag[\"formatting\"] = 6] = \"formatting\";\n})(TextPartFlag || (TextPartFlag = {}));\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/text_part.ts?");

/***/ }),

/***/ "./treb-base-types/src/theme.ts":
/*!**************************************!*\
  !*** ./treb-base-types/src/theme.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DefaultTheme\": () => (/* binding */ DefaultTheme),\n/* harmony export */   \"ThemeColor\": () => (/* binding */ ThemeColor),\n/* harmony export */   \"ThemeColor2\": () => (/* binding */ ThemeColor2),\n/* harmony export */   \"LoadThemeProperties\": () => (/* binding */ LoadThemeProperties)\n/* harmony export */ });\n/* harmony import */ var treb_base_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! treb-base-types */ \"./treb-base-types/src/index.ts\");\n\nconst DefaultTheme = {\n    grid_color: 'red',\n    note_marker_color: '#d2c500',\n};\n/**\n * now just a wrapper, we should remove\n * @deprecated\n */\nconst ThemeColor = (theme, color) => {\n    return ThemeColor2(theme, color, 0);\n};\n/**\n * we cache values in the theme object so that we can dump it when we\n * reload or update the theme.\n */\nconst TintedColor = (theme, index, tint) => {\n    if (!theme.tint_cache) {\n        theme.tint_cache = [];\n    }\n    if (!theme.tint_cache[index]) {\n        theme.tint_cache[index] = {};\n    }\n    let color = theme.tint_cache[index][tint];\n    if (!color) {\n        const rgb = theme.theme_colors_rgb ? theme.theme_colors_rgb[index] : [0, 0, 0];\n        let tinted;\n        if (tint > 0) {\n            tinted = treb_base_types__WEBPACK_IMPORTED_MODULE_0__.Color.Lighten(rgb[0], rgb[1], rgb[2], tint * 100, true);\n        }\n        else {\n            tinted = treb_base_types__WEBPACK_IMPORTED_MODULE_0__.Color.Darken(rgb[0], rgb[1], rgb[2], -tint * 100, true);\n        }\n        color = `rgb(${tinted.r},${tinted.g},${tinted.b})`;\n        // console.info(index, tint, color);\n        theme.tint_cache[index][tint] = color;\n    }\n    return color;\n};\n/**\n * this includes an implicit check for valid color, if a color\n * can't be resolved it returns ''\n */\nconst ThemeColor2 = (theme, color, default_index) => {\n    // explicit color, or none\n    if (color === null || color === void 0 ? void 0 : color.text) {\n        return color.text === 'none' ? '' : color.text;\n    }\n    // theme color. we need a way to cache these lookups, especially for tinting\n    if ((color === null || color === void 0 ? void 0 : color.theme) || (color === null || color === void 0 ? void 0 : color.theme) === 0) {\n        if (color.tint) {\n            return TintedColor(theme, color.theme, color.tint);\n        }\n        return theme.theme_colors ? theme.theme_colors[color.theme] : '';\n    }\n    // default from argument\n    if (default_index || default_index === 0) {\n        return theme.theme_colors ? theme.theme_colors[default_index] : '';\n    }\n    // actual default, which is nothing\n    return '';\n};\nconst ParseFontSize = (size) => {\n    let value = 10;\n    let unit = 'pt';\n    const match = size.match(/^([\\d.]+)(\\D.*)$/); // pt, px, em, rem, %\n    if (match) {\n        value = Number(match[1]);\n        unit = match[2];\n    }\n    return { value, unit };\n};\n// testing\nconst StyleFromCSS = (css) => {\n    const { value, unit } = ParseFontSize(css.fontSize || '');\n    const style = {\n        fill: { text: css.backgroundColor },\n        text: { text: css.color },\n        font_size_unit: unit,\n        font_size_value: value,\n        font_face: css.fontFamily,\n    };\n    // not sure about this... should maybe be undefined?\n    // console.info(\"BC?\", css.borderBottomColor);\n    //style.border_bottom_color = css.borderBottomColor || ''; // 'none';\n    //style.border_top_color = css.borderTopColor || ''; // 'none';\n    //style.border_left_color = css.borderLeftColor || ''; // 'none';\n    //style.border_right_color = css.borderRightColor || ''; // 'none';\n    if (/italic/i.test(css.font)) {\n        style.font_italic = true;\n    }\n    const weight = Number(css.fontWeight);\n    if (!isNaN(weight) && weight) {\n        style.font_weight = weight;\n    }\n    return style;\n};\nconst LoadThemeProperties = (container) => {\n    var _a, _b, _c;\n    const theme = JSON.parse(JSON.stringify(DefaultTheme));\n    const Append = (parent, classes) => {\n        const node = document.createElement('div');\n        node.setAttribute('class', classes);\n        parent.appendChild(node);\n        return node;\n    };\n    const ElementCSS = (parent, classes) => {\n        return window.getComputedStyle(Append(parent, classes));\n    };\n    const node = Append(container, '');\n    const CSS = ElementCSS.bind(0, node);\n    let css = CSS('grid-cells');\n    theme.grid_cell = StyleFromCSS(css);\n    theme.grid_color = css.stroke || '';\n    css = CSS('grid-headers');\n    theme.headers = StyleFromCSS(css);\n    // this _is_ painted, but it doesn't necessarily need to be -- we\n    // could use a node. that would require moving it around, though. \n    // let's leave it for now.\n    css = CSS('note-marker');\n    theme.note_marker_color = css.backgroundColor;\n    // theme colors\n    node.style.color = 'rgba(1,2,3,.4)'; // this is an attempt at a unique identifier\n    css = CSS('');\n    const compare = css.color;\n    theme.theme_colors = [\n        ((_a = theme.grid_cell.fill) === null || _a === void 0 ? void 0 : _a.text) || 'rgb(255, 255, 255)',\n        ((_b = theme.grid_cell.text) === null || _b === void 0 ? void 0 : _b.text) || 'rgb(51, 51, 51)',\n    ];\n    for (let i = 1; i < 32; i++) {\n        css = CSS(`theme-color-${i}`);\n        if (!css.color || css.color === compare) {\n            break;\n        }\n        theme.theme_colors.push(css.color);\n    }\n    // we could just parse, we know the returned css format is going\n    // to be an rgb triple (I think?)\n    const canvas = document.createElement('canvas');\n    canvas.width = 3;\n    canvas.height = 3;\n    const context = canvas.getContext('2d');\n    if (context) {\n        theme.theme_colors_rgb = theme.theme_colors.map((color) => {\n            context.fillStyle = color;\n            context.fillRect(0, 0, 3, 3);\n            const imagedata = context.getImageData(1, 1, 1, 1);\n            return Array.from(imagedata.data);\n        });\n    }\n    // this is a little odd, since we have the check above for \"existing element\";\n    // should we switch on that? or is that never used, and we can drop it? (...)\n    (_c = node.parentElement) === null || _c === void 0 ? void 0 : _c.removeChild(node);\n    return theme;\n};\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/theme.ts?");

/***/ }),

/***/ "./treb-base-types/src/union.ts":
/*!**************************************!*\
  !*** ./treb-base-types/src/union.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Is2DArray\": () => (/* binding */ Is2DArray),\n/* harmony export */   \"UnionIs\": () => (/* binding */ UnionIs),\n/* harmony export */   \"UndefinedUnion\": () => (/* binding */ UndefinedUnion),\n/* harmony export */   \"Box\": () => (/* binding */ Box)\n/* harmony export */ });\n/* harmony import */ var _value_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value-type */ \"./treb-base-types/src/value-type.ts\");\n\n/** utility method */\nconst Is2DArray = (obj) => {\n    return !!obj && Array.isArray(obj) && Array.isArray(obj[0]);\n};\n/*\nexport const UnionIsUndef = (test: UnionValue): test is { type: ValueType.undefined, value: undefined } => {\n  return test.type === ValueType.undefined;\n}\n\nexport const UnionIsNumber = (test: UnionValue): test is { type: ValueType.number, value: number } => {\n  return test.type === ValueType.number;\n}\n\nexport const UnionIsFormula = (test: UnionValue): test is { type: ValueType.formula, value: string } => {\n  return test.type === ValueType.formula;\n}\n\nexport const UnionIsBoolean = (test: UnionValue): test is { type: ValueType.boolean, value: boolean } => {\n  return test.type === ValueType.formula;\n}\n\nexport const UnionIsString = (test: UnionValue): test is { type: ValueType.string, value: string } => {\n  return test.type === ValueType.formula;\n}\n\nexport const UnionIsError = (test: UnionValue): test is { type: ValueType.error, value: string } => {\n  return test.type === ValueType.error;\n}\n\nexport const UnionIsExtended = (test: UnionValue): test is { type: ValueType.object, value: any } => {\n  return test.type === ValueType.object;\n}\n*/\n/** composite type guard (why do all these test for type formula? is that a bug?) */\nconst UnionIs = {\n    Undefined: (test) => {\n        return test.type === _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.undefined;\n    },\n    Number: (test) => {\n        return test.type === _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.number;\n    },\n    Formula: (test) => {\n        return test.type === _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.formula;\n    },\n    Boolean: (test) => {\n        return test.type === _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.formula;\n    },\n    String: (test) => {\n        return test.type === _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.formula;\n    },\n    Error: (test) => {\n        return test.type === _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.error;\n    },\n    Extended: (test) => {\n        return test.type === _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.object;\n    },\n};\n// common types\n/**\n * this is a factory instead of a constant value to prevent any accidental pollution\n */\nconst UndefinedUnion = () => {\n    return { type: _value_type__WEBPACK_IMPORTED_MODULE_0__.ValueType.undefined, value: undefined };\n};\n/** shortcut, although this is wasteful */\nconst Box = (value, type) => {\n    if (typeof type === 'undefined') {\n        type = (0,_value_type__WEBPACK_IMPORTED_MODULE_0__.GetValueType)(value);\n    }\n    return {\n        value,\n        type,\n    };\n};\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/union.ts?");

/***/ }),

/***/ "./treb-base-types/src/value-type.ts":
/*!*******************************************!*\
  !*** ./treb-base-types/src/value-type.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ValueType\": () => (/* binding */ ValueType),\n/* harmony export */   \"GetValueType\": () => (/* binding */ GetValueType)\n/* harmony export */ });\n// split from cell for separate import, \n// @see format-index.ts\n/**\n * I _think_ using enums is faster. I'm not actually sure about that, though.\n * it stands to reason that a single int compare is faster than a string\n * compare, but you never know with javascript. undefined preferred over null.\n * formula implies a string.\n *\n * undefined is 0 so we can test it as falsy.\n *\n * we're passing this type information out to calculators, so it needs\n * to have known values. DO NOT MODIFY EXISTING INDEXES, or at least be\n * aware of the implications. definitely do not change undefined => 0.\n */\nvar ValueType;\n(function (ValueType) {\n    ValueType[ValueType[\"undefined\"] = 0] = \"undefined\";\n    // formula is a string; we usually test the first character === '='\n    ValueType[ValueType[\"formula\"] = 1] = \"formula\";\n    ValueType[ValueType[\"string\"] = 2] = \"string\";\n    ValueType[ValueType[\"number\"] = 3] = \"number\";\n    ValueType[ValueType[\"boolean\"] = 4] = \"boolean\";\n    // we don't actually use this type, it's here for matching only\n    ValueType[ValueType[\"object\"] = 5] = \"object\";\n    // error is a STRING VALUE... object errors are layered on top? is that \n    // correct? (...) it sort of makes sense... since we have separate typing\n    ValueType[ValueType[\"error\"] = 6] = \"error\";\n})(ValueType || (ValueType = {}));\nconst GetValueType = (value) => {\n    switch (typeof value) {\n        case 'undefined':\n            return ValueType.undefined;\n        case 'number':\n            return ValueType.number;\n        case 'boolean':\n            return ValueType.boolean;\n        case 'object':\n            if (value === null) {\n                return ValueType.undefined;\n            }\n            return ValueType.object;\n        case 'string':\n            if (value[0] === '=') {\n                return ValueType.formula;\n            }\n            return ValueType.string;\n        default: // function or symbol\n            return ValueType.error;\n    }\n};\n\n\n//# sourceURL=webpack://treb/./treb-base-types/src/value-type.ts?");

/***/ }),

/***/ "./treb-export/src/address-type.ts":
/*!*****************************************!*\
  !*** ./treb-export/src/address-type.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"is_address\": () => (/* binding */ is_address),\n/* harmony export */   \"is_range\": () => (/* binding */ is_range),\n/* harmony export */   \"InRange\": () => (/* binding */ InRange),\n/* harmony export */   \"ShiftRange\": () => (/* binding */ ShiftRange)\n/* harmony export */ });\n/** typeguard for address */\nconst is_address = (candidate) => {\n    return 'row' in candidate &&\n        'col' in candidate;\n};\n/** typeguard for range */\nconst is_range = (candidate) => {\n    return 'from' in candidate &&\n        'to' in candidate &&\n        is_address(candidate.from) &&\n        is_address(candidate.to);\n};\nconst InRange = (range, address) => {\n    return address.sheet === range.sheet &&\n        address.row >= range.from.row &&\n        address.row <= range.to.row &&\n        address.col >= range.from.col &&\n        address.col <= range.to.col;\n};\nconst ShiftRange = (range, rows = 0, columns = 0) => {\n    return {\n        from: {\n            row: range.from.row + rows,\n            col: range.from.col + columns,\n            sheet: range.from.sheet,\n        }, to: {\n            row: range.to.row + rows,\n            col: range.to.col + columns,\n            sheet: range.to.sheet,\n        },\n    };\n};\n\n\n//# sourceURL=webpack://treb/./treb-export/src/address-type.ts?");

/***/ }),

/***/ "./treb-export/src/drawing/chart-template-components.ts":
/*!**************************************************************!*\
  !*** ./treb-export/src/drawing/chart-template-components.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ref_title\": () => (/* binding */ ref_title),\n/* harmony export */   \"static_title\": () => (/* binding */ static_title),\n/* harmony export */   \"chart_template\": () => (/* binding */ chart_template)\n/* harmony export */ });\nconst ref_title = {\n    'c:tx': {\n        'c:strRef': {\n            'c:f': {\n                '_t': '' // reference: Sheet1!$E$3\n            },\n            'c:strCache': {\n                'c:ptCount': {\n                    '_a': {\n                        'val': '1'\n                    }\n                },\n                'c:pt': {\n                    '_a': {\n                        'idx': '0'\n                    },\n                    'c:v': {\n                        '_t': '' // cached value: Fishton Lanier\n                    }\n                }\n            }\n        }\n    },\n    'c:overlay': {\n        '_a': {\n            'val': '0'\n        }\n    },\n    'c:spPr': {\n        'a:noFill': {},\n        'a:ln': {\n            'a:noFill': {}\n        },\n        'a:effectLst': {}\n    },\n    'c:txPr': {\n        'a:bodyPr': {\n            '_a': {\n                'rot': '0',\n                'spcFirstLastPara': '1',\n                'vertOverflow': 'ellipsis',\n                'vert': 'horz',\n                'wrap': 'square',\n                'anchor': 'ctr',\n                'anchorCtr': '1'\n            }\n        },\n        'a:lstStyle': {},\n        'a:p': {\n            'a:pPr': {\n                'a:defRPr': {\n                    '_a': {\n                        'sz': '1400',\n                        'b': '0',\n                        'i': '0',\n                        'u': 'none',\n                        'strike': 'noStrike',\n                        'kern': '1200',\n                        'spc': '0',\n                        'baseline': '0'\n                    },\n                    'a:solidFill': {\n                        'a:schemeClr': {\n                            '_a': {\n                                'val': 'tx1'\n                            },\n                            'a:lumMod': {\n                                '_a': {\n                                    'val': '65000'\n                                }\n                            },\n                            'a:lumOff': {\n                                '_a': {\n                                    'val': '35000'\n                                }\n                            }\n                        }\n                    },\n                    'a:latin': {\n                        '_a': {\n                            'typeface': '+mn-lt'\n                        }\n                    },\n                    'a:ea': {\n                        '_a': {\n                            'typeface': '+mn-ea'\n                        }\n                    },\n                    'a:cs': {\n                        '_a': {\n                            'typeface': '+mn-cs'\n                        }\n                    }\n                }\n            },\n            'a:endParaRPr': {\n                '_a': {\n                    'lang': 'en-US'\n                }\n            }\n        }\n    }\n};\nconst static_title = {\n    'c:tx': {\n        'c:rich': {\n            'a:bodyPr': {\n                '_a': {\n                    'rot': '0',\n                    'spcFirstLastPara': '1',\n                    'vertOverflow': 'ellipsis',\n                    'vert': 'horz',\n                    'wrap': 'square',\n                    'anchor': 'ctr',\n                    'anchorCtr': '1'\n                }\n            },\n            'a:lstStyle': {},\n            'a:p': {\n                'a:pPr': {\n                    'a:defRPr': {\n                        '_a': {\n                            'sz': '1400',\n                            'b': '0',\n                            'i': '0',\n                            'u': 'none',\n                            'strike': 'noStrike',\n                            'kern': '1200',\n                            'spc': '0',\n                            'baseline': '0'\n                        },\n                        'a:solidFill': {\n                            'a:schemeClr': {\n                                '_a': {\n                                    'val': 'tx1'\n                                },\n                                'a:lumMod': {\n                                    '_a': {\n                                        'val': '65000'\n                                    }\n                                },\n                                'a:lumOff': {\n                                    '_a': {\n                                        'val': '35000'\n                                    }\n                                }\n                            }\n                        },\n                        'a:latin': {\n                            '_a': {\n                                'typeface': '+mn-lt'\n                            }\n                        },\n                        'a:ea': {\n                            '_a': {\n                                'typeface': '+mn-ea'\n                            }\n                        },\n                        'a:cs': {\n                            '_a': {\n                                'typeface': '+mn-cs'\n                            }\n                        }\n                    }\n                },\n                'a:r': {\n                    'a:rPr': {\n                        '_a': {\n                            'lang': '' // locale: en-US\n                        }\n                    },\n                    'a:t': {\n                        '_t': '' // text: Herbal Metrix\n                    }\n                }\n            }\n        }\n    },\n    'c:overlay': {\n        '_a': {\n            'val': '0'\n        }\n    },\n    'c:spPr': {\n        'a:noFill': {},\n        'a:ln': {\n            'a:noFill': {}\n        },\n        'a:effectLst': {}\n    },\n    'c:txPr': {\n        'a:bodyPr': {\n            '_a': {\n                'rot': '0',\n                'spcFirstLastPara': '1',\n                'vertOverflow': 'ellipsis',\n                'vert': 'horz',\n                'wrap': 'square',\n                'anchor': 'ctr',\n                'anchorCtr': '1'\n            }\n        },\n        'a:lstStyle': {},\n        'a:p': {\n            'a:pPr': {\n                'a:defRPr': {\n                    '_a': {\n                        'sz': '1400',\n                        'b': '0',\n                        'i': '0',\n                        'u': 'none',\n                        'strike': 'noStrike',\n                        'kern': '1200',\n                        'spc': '0',\n                        'baseline': '0'\n                    },\n                    'a:solidFill': {\n                        'a:schemeClr': {\n                            '_a': {\n                                'val': 'tx1'\n                            },\n                            'a:lumMod': {\n                                '_a': {\n                                    'val': '65000'\n                                }\n                            },\n                            'a:lumOff': {\n                                '_a': {\n                                    'val': '35000'\n                                }\n                            }\n                        }\n                    },\n                    'a:latin': {\n                        '_a': {\n                            'typeface': '+mn-lt'\n                        }\n                    },\n                    'a:ea': {\n                        '_a': {\n                            'typeface': '+mn-ea'\n                        }\n                    },\n                    'a:cs': {\n                        '_a': {\n                            'typeface': '+mn-cs'\n                        }\n                    }\n                }\n            },\n            'a:endParaRPr': {\n                '_a': {\n                    'lang': 'en-US'\n                }\n            }\n        }\n    }\n};\nconst chart_template = {\n    'c:chartSpace': {\n        '_a': {\n            'xmlns:c': 'http://schemas.openxmlformats.org/drawingml/2006/chart',\n            'xmlns:a': 'http://schemas.openxmlformats.org/drawingml/2006/main',\n            'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n            'xmlns:c16r2': 'http://schemas.microsoft.com/office/drawing/2015/06/chart'\n        },\n        'c:date1904': {\n            '_a': {\n                'val': '0'\n            }\n        },\n        'c:lang': {\n            '_a': {\n                'val': 'en-US'\n            }\n        },\n        'c:roundedCorners': {\n            '_a': {\n                'val': '0'\n            }\n        },\n        'mc:AlternateContent': {\n            '_a': {\n                'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006'\n            },\n            'mc:Choice': {\n                '_a': {\n                    'Requires': 'c14',\n                    'xmlns:c14': 'http://schemas.microsoft.com/office/drawing/2007/8/2/chart'\n                },\n                'c14:style': {\n                    '_a': {\n                        'val': '102'\n                    }\n                }\n            },\n            'mc:Fallback': {\n                'c:style': {\n                    '_a': {\n                        'val': '2'\n                    }\n                }\n            }\n        },\n        'c:chart': {},\n        'c:spPr': {\n            'a:solidFill': {\n                'a:schemeClr': {\n                    '_a': {\n                        'val': 'bg1'\n                    }\n                }\n            },\n            'a:ln': {\n                '_a': {\n                    'w': '9525',\n                    'cap': 'flat',\n                    'cmpd': 'sng',\n                    'algn': 'ctr'\n                },\n                'a:solidFill': {\n                    'a:schemeClr': {\n                        '_a': {\n                            'val': 'tx1'\n                        },\n                        'a:lumMod': {\n                            '_a': {\n                                'val': '15000'\n                            }\n                        },\n                        'a:lumOff': {\n                            '_a': {\n                                'val': '85000'\n                            }\n                        }\n                    }\n                },\n                'a:round': {}\n            },\n            'a:effectLst': {}\n        },\n        'c:txPr': {\n            'a:bodyPr': {},\n            'a:lstStyle': {},\n            'a:p': {\n                'a:pPr': {\n                    'a:defRPr': {}\n                },\n                'a:endParaRPr': {\n                    '_a': {\n                        'lang': 'en-US'\n                    }\n                }\n            }\n        },\n        'c:printSettings': {\n            'c:headerFooter': {},\n            'c:pageMargins': {\n                '_a': {\n                    'b': '0.75',\n                    'l': '0.7',\n                    'r': '0.7',\n                    't': '0.75',\n                    'header': '0.3',\n                    'footer': '0.3'\n                }\n            },\n            'c:pageSetup': {}\n        }\n    }\n};\n\n\n//# sourceURL=webpack://treb/./treb-export/src/drawing/chart-template-components.ts?");

/***/ }),

/***/ "./treb-export/src/drawing/chart.ts":
/*!******************************************!*\
  !*** ./treb-export/src/drawing/chart.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Chart\": () => (/* binding */ Chart)\n/* harmony export */ });\n/* harmony import */ var elementtree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! elementtree */ \"./node_modules/elementtree/lib/elementtree.js\");\n/* harmony import */ var _donut_chart_template__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./donut-chart-template */ \"./treb-export/src/drawing/donut-chart-template.ts\");\n/* harmony import */ var _chart_template_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chart-template-components */ \"./treb-export/src/drawing/chart-template-components.ts\");\n/* harmony import */ var _column_chart_template__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./column-chart-template */ \"./treb-export/src/drawing/column-chart-template.ts\");\n/* harmony import */ var _scatter_chart_template__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scatter-chart-template */ \"./treb-export/src/drawing/scatter-chart-template.ts\");\n/* harmony import */ var _scatter2_chart_template__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scatter2-chart-template */ \"./treb-export/src/drawing/scatter2-chart-template.ts\");\n/* harmony import */ var treb_base_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! treb-base-types */ \"./treb-base-types/src/index.ts\");\n\n\n\n\n\n\n// import { v4 as uuidv4 } from 'uuid';\n\nclass Chart {\n    constructor(options, index = Chart.next_chart_index++) {\n        this.options = options;\n        this.index = index;\n    }\n    ProcessJSONNode(name, node) {\n        // create element\n        const element = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)(name, node._a);\n        if (node._t) {\n            element.text = node._t;\n        }\n        for (const key of Object.keys(node)) {\n            if (key === '_a' || key === '_t') {\n                continue;\n            }\n            let val = node[key];\n            if (!Array.isArray(val)) {\n                val = [val];\n            }\n            for (const entry of val) {\n                element.getchildren().push(this.ProcessJSONNode(key, entry));\n            }\n        }\n        return element;\n    }\n    FindNode(label, root) {\n        const label_components = label.split('/');\n        while (label_components.length) {\n            label = label_components.shift();\n            const found = this.FindNodeInternal(label, root);\n            if (!found) {\n                return undefined;\n            }\n            if (!label_components.length) {\n                return found;\n            }\n            root = found;\n        }\n    }\n    FindNodeInternal(label, root) {\n        if (root[label]) {\n            return root[label];\n        }\n        const keys = Object.keys(root);\n        for (const key of keys) {\n            if (key === '_a' || key === '_t') {\n                continue;\n            }\n            const found = this.FindNodeInternal(label, root[key]);\n            if (found)\n                return found;\n        }\n        return undefined;\n    }\n    /** set chart title, either static or reference to cell */\n    UpdateChartTitle(obj) {\n        /*\n        if (!this.options.title) {\n          const atd = this.FindNode('c:autoTitleDeleted', obj);\n          if (atd) {\n            atd._a.val = 1;\n          }\n        }\n        */\n        const unit = this.options.title || {\n            type: 'literal', value: '',\n        };\n        const CC = this.FindNode('c:chart', obj);\n        if (CC) {\n            if (unit && unit.type === 'literal') {\n                const title = _chart_template_components__WEBPACK_IMPORTED_MODULE_2__.static_title;\n                const AP = this.FindNode('a:p', title);\n                AP['a:r'] = {\n                    'a:rPr': {\n                        _a: {\n                            lang: treb_base_types__WEBPACK_IMPORTED_MODULE_6__.Localization.locale,\n                        },\n                    },\n                    'a:t': {\n                        _t: unit.value,\n                    }\n                };\n                CC['c:title'] = title;\n            }\n            else if (unit) {\n                const title = _chart_template_components__WEBPACK_IMPORTED_MODULE_2__.ref_title;\n                const CF = this.FindNode('c:tx/c:strRef/c:f', title);\n                CF._t = unit.label;\n                CC['c:title'] = title;\n            }\n        }\n    }\n    ObjectToXML(obj) {\n        const keys = Object.keys(obj);\n        if (keys.length !== 1) {\n            throw new Error('too many roots');\n        }\n        const root = keys[0];\n        const xml = new elementtree__WEBPACK_IMPORTED_MODULE_0__.ElementTree(this.ProcessJSONNode(root, obj[root]));\n        return xml;\n    }\n    /**\n     * this now unifies scatter and line charts\n     */\n    CreateScatter2() {\n        var _b, _c;\n        const template = JSON.parse(JSON.stringify(_chart_template_components__WEBPACK_IMPORTED_MODULE_2__.chart_template));\n        const chartspace = this.FindNode('c:chartSpace', template);\n        const scatter = JSON.parse(JSON.stringify(_scatter_chart_template__WEBPACK_IMPORTED_MODULE_4__.scatter_json));\n        if (this.options.smooth) {\n            const scatterstyle = this.FindNode('c:scatterStyle', scatter);\n            if (scatterstyle) {\n                scatterstyle._a.val = 'smoothMarker';\n            }\n        }\n        chartspace['c:chart'] = scatter;\n        this.UpdateChartTitle(template);\n        const cser = this.FindNode('c:ser', template);\n        let legend = false;\n        for (let i = 0; i < this.options.data.length; i++) {\n            const series = JSON.parse(JSON.stringify(_scatter2_chart_template__WEBPACK_IMPORTED_MODULE_5__.scatter_series));\n            /*\n            const uniq = this.FindNode('c16:uniqueId', series);\n            if (uniq) {\n              uniq._a.val = `{${uuidv4()}}`\n              console.info(uniq);\n            }\n            */\n            series['c:idx'] = { _a: { val: i.toString() } };\n            series['c:order'] = { _a: { val: i.toString() } };\n            if (this.options.names && this.options.names[i]) {\n                const name = this.options.names[i];\n                switch (name.type) {\n                    case 'literal':\n                        series['c:tx'] = {\n                            'c:v': {\n                                _t: name.value.toString(),\n                            }\n                        };\n                        legend = true;\n                        break;\n                    case 'range':\n                    case 'address':\n                        series['c:tx'] = {\n                            'c:strRef': {\n                                'c:f': {\n                                    _t: name.label,\n                                },\n                            }\n                        };\n                        legend = true;\n                        break;\n                }\n            }\n            series['c:spPr']['a:ln']['a:solidFill']['a:schemeClr']._a['val'] = `accent${i + 1}`;\n            /*\n            if (!i && this.options.labels) {\n              series['c:cat'] = {\n                'c:strRef': {\n                  'c:f': {\n                    _t: this.options.labels.label,\n                  }\n                }\n              }\n            }\n            */\n            let val = this.FindNode('c:yVal/c:numRef/c:f', series);\n            if (val) {\n                val._t = (_b = this.options.data[i]) === null || _b === void 0 ? void 0 : _b.label;\n            }\n            if (this.options.labels2 && this.options.labels2[i]) {\n                val = this.FindNode('c:xVal/c:numRef/c:f', series);\n                if (val) {\n                    val._t = (_c = this.options.labels2[i]) === null || _c === void 0 ? void 0 : _c.label;\n                }\n            }\n            if (this.options.smooth) {\n                const smooth = this.FindNode('c:smooth', series);\n                if (smooth) {\n                    smooth._a.val = '1';\n                }\n            }\n            // console.info(\"SER\", JSON.stringify(series, undefined, 2));\n            cser.push(series);\n        }\n        if (legend) {\n            const cchart = this.FindNode('c:chart', template);\n            if (cchart) {\n                cchart['c:legend'] = {\n                    'c:legendPos': {\n                        _a: { val: 'b' },\n                    },\n                    'c:overlay': {\n                        _a: { val: '0' },\n                    }\n                };\n            }\n        }\n        return this.ObjectToXML(template);\n    }\n    /*\n    public CreateScatterChart() {\n  \n      const template = JSON.parse(JSON.stringify(chart_template));\n      const chartspace = this.FindNode('c:chartSpace', template);\n      const scatter = JSON.parse(JSON.stringify(scatter_json));\n  \n      if (this.options.smooth) {\n        const scatterstyle = this.FindNode('c:scatterStyle', scatter);\n        if (scatterstyle) {\n          scatterstyle._a.val = 'smoothMarker';\n        }\n      }\n  \n      chartspace['c:chart'] = scatter;\n  \n      this.UpdateChartTitle(template);\n  \n      const cser = this.FindNode('c:ser', template);\n  \n      let legend = false;\n  \n      for (let i = 0; i < this.options.data.length; i++) {\n  \n        const series = JSON.parse(JSON.stringify(scatter_series));\n  \n        series['c:idx'] = { _a: { val: i.toString() }};\n        series['c:order'] = { _a: { val: i.toString() }};\n  \n        // snip\n        // ... FIXME: unify\n  \n        if (this.options.names && this.options.names[i]) {\n  \n          const name = this.options.names[i];\n          switch (name.type) {\n            case 'literal':\n              series['c:tx'] = {\n                'c:v': {\n                  _t: name.value.toString(),\n                }\n              };\n              legend = true;\n              break;\n  \n            case 'range':\n            case 'address':\n              series['c:tx'] = {\n                'c:strRef': {\n                  'c:f': {\n                    _t: name.label,\n                  },\n                }\n              };\n              legend = true;\n              break;\n          }\n        }\n  \n        // /snip\n  \n        series['c:spPr']['a:ln']['a:solidFill']['a:schemeClr']._a['val'] = `accent${i+1}`;\n  \n        / *\n        if (!i && this.options.labels) {\n          series['c:cat'] = {\n            'c:strRef': {\n              'c:f': {\n                _t: this.options.labels.label,\n              }\n            }\n          }\n        }\n        * /\n  \n        const val = this.FindNode('c:yVal/c:numRef/c:f', series);\n        if (val) {\n          val._t = this.options.data[i]?.label;\n        }\n  \n        if (this.options.smooth) {\n          const smooth = this.FindNode('c:smooth', series);\n          if (smooth) {\n            smooth._a.val = '1';\n          }\n        }\n  \n        cser.push(series);\n  \n      }\n  \n      if (legend) {\n        const cchart = this.FindNode('c:chart', template);\n        if (cchart) {\n          cchart['c:legend'] = {\n            'c:legendPos': {\n              _a: {val: 'b'},\n            },\n            'c:overlay': {\n              _a: {val: '0'},\n            }\n          };\n        }\n      }\n  \n      return this.ObjectToXML(template);\n  \n    }\n    */\n    CreateBarChart() {\n        var _b;\n        const template = JSON.parse(JSON.stringify(_chart_template_components__WEBPACK_IMPORTED_MODULE_2__.chart_template));\n        const chartspace = this.FindNode('c:chartSpace', template);\n        const bar = JSON.parse(JSON.stringify(_column_chart_template__WEBPACK_IMPORTED_MODULE_3__.column_json));\n        chartspace['c:chart'] = bar;\n        this.UpdateChartTitle(template);\n        const column = this.FindNode('c:barChart', template);\n        if (column) {\n            const bardir = this.FindNode('c:barDir', column);\n            if (bardir) {\n                bardir._a.val = (this.options.type === 'bar') ? 'bar' : 'col';\n            }\n            const cser = this.FindNode('c:ser', column);\n            for (let i = 0; i < this.options.data.length; i++) {\n                const series = JSON.parse(JSON.stringify(_column_chart_template__WEBPACK_IMPORTED_MODULE_3__.column_series));\n                series['c:idx'] = { _a: { val: i.toString() } };\n                series['c:order'] = { _a: { val: i.toString() } };\n                series['c:spPr']['a:solidFill']['a:schemeClr']._a['val'] = `accent${i + 1}`;\n                if (!i && this.options.labels) {\n                    series['c:cat'] = {\n                        'c:strRef': {\n                            'c:f': {\n                                _t: this.options.labels.label,\n                            }\n                        }\n                    };\n                }\n                const val = this.FindNode('c:val/c:numRef/c:f', series);\n                if (val) {\n                    val._t = (_b = this.options.data[i]) === null || _b === void 0 ? void 0 : _b.label;\n                }\n                cser.push(series);\n            }\n        }\n        return this.ObjectToXML(template);\n    }\n    CreateDonutChart() {\n        var _b, _c;\n        const template = JSON.parse(JSON.stringify(_chart_template_components__WEBPACK_IMPORTED_MODULE_2__.chart_template));\n        const chartspace = this.FindNode('c:chartSpace', template);\n        const chart = JSON.parse(JSON.stringify(_donut_chart_template__WEBPACK_IMPORTED_MODULE_1__.donut_json));\n        chartspace['c:chart'] = chart;\n        // const obj = JSON.parse(JSON.stringify(donut_json)); // clone\n        this.UpdateChartTitle(template);\n        const donut = this.FindNode('c:doughnutChart', template);\n        if (donut) {\n            const cat = this.FindNode('c:cat/c:strRef/c:f', donut);\n            if (cat) {\n                cat._t = (_b = this.options.labels) === null || _b === void 0 ? void 0 : _b.label;\n            }\n            const val = this.FindNode('c:val/c:numRef/c:f', donut);\n            if (val) {\n                val._t = (_c = this.options.data[0]) === null || _c === void 0 ? void 0 : _c.label;\n            }\n        }\n        return this.ObjectToXML(template);\n    }\n    ///\n    GetChartXML() {\n        switch (this.options.type) {\n            case 'donut':\n                return this.CreateDonutChart().write({ xml_declaration: true });\n            case 'scatter':\n            case 'scatter2':\n                return this.CreateScatter2().write({ xml_declaration: true });\n            //case 'scatter':\n            //  return this.CreateScatterChart().write({xml_declaration: true});\n            case 'column':\n            case 'bar':\n                return this.CreateBarChart().write({ xml_declaration: true });\n        }\n        console.warn('missing chart type xml');\n        return '';\n    }\n    GetChartRels() {\n        // FIXME\n        // if (this.indexes.style || this.indexes.colors) {\n        //   console.warn('not adding relationships for colors, style');\n        // }\n        /*\n        return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n        <Relationships\n          xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n          <Relationship Id=\"rId2\" Type=\"http://schemas.microsoft.com/office/2011/relationships/chartColorStyle\" Target=\"colors${this.indexes.colors}.xml\"/>\n          <Relationship Id=\"rId1\" Type=\"http://schemas.microsoft.com/office/2011/relationships/chartStyle\" Target=\"style${this.indexes.style}.xml\"/>\n        </Relationships>`;\n        */\n        return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n   <Relationships\r\n     xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\r\n   </Relationships>`;\n    }\n}\nChart.next_chart_index = 1;\n\n\n//# sourceURL=webpack://treb/./treb-export/src/drawing/chart.ts?");

/***/ }),

/***/ "./treb-export/src/drawing/column-chart-template.ts":
/*!**********************************************************!*\
  !*** ./treb-export/src/drawing/column-chart-template.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"column_series\": () => (/* binding */ column_series),\n/* harmony export */   \"column_json\": () => (/* binding */ column_json)\n/* harmony export */ });\nconst column_series = {\n    'c:idx': {\n        '_a': {\n            'val': '0'\n        }\n    },\n    'c:order': {\n        '_a': {\n            'val': '0'\n        }\n    },\n    'c:spPr': {\n        'a:solidFill': {\n            'a:schemeClr': {\n                '_a': {\n                    'val': 'accent1'\n                }\n            }\n        },\n        'a:ln': {\n            'a:noFill': {}\n        },\n        'a:effectLst': {}\n    },\n    'c:invertIfNegative': {\n        '_a': {\n            'val': '0'\n        }\n    },\n    'c:val': {\n        'c:numRef': {\n            'c:f': {\n                '_t': '', // ref: 'Sheet1!$B$3:$B$14'\n            },\n        }\n    },\n    'c:extLst': {\n        'c:ext': {\n            '_a': {\n                'uri': '{C3380CC4-5D6E-409C-BE32-E72D297353CC}',\n                'xmlns:c16': 'http://schemas.microsoft.com/office/drawing/2014/chart'\n            },\n            'c16:uniqueId': {\n                '_a': {\n                    'val': '{00000000-F52E-47BC-822F-A046A80610BE}'\n                }\n            }\n        }\n    }\n};\nconst column_json = {\n    'c:title': {},\n    'c:autoTitleDeleted': {\n        '_a': {\n            'val': '0'\n        }\n    },\n    'c:plotArea': {\n        'c:layout': {},\n        'c:barChart': {\n            'c:barDir': {\n                '_a': {\n                    'val': 'col'\n                }\n            },\n            'c:grouping': {\n                '_a': {\n                    'val': 'clustered'\n                }\n            },\n            'c:varyColors': {\n                '_a': {\n                    'val': '0'\n                }\n            },\n            'c:ser': [],\n            'c:dLbls': {\n                'c:showLegendKey': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showVal': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showCatName': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showSerName': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showPercent': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showBubbleSize': {\n                    '_a': {\n                        'val': '0'\n                    }\n                }\n            },\n            'c:gapWidth': {\n                '_a': {\n                    'val': '219'\n                }\n            },\n            'c:overlap': {\n                '_a': {\n                    'val': '-27'\n                }\n            },\n            'c:axId': [\n                {\n                    '_a': {\n                        'val': '47003664'\n                    }\n                },\n                {\n                    '_a': {\n                        'val': '1789284464'\n                    }\n                }\n            ]\n        },\n        'c:catAx': {\n            'c:axId': {\n                '_a': {\n                    'val': '47003664'\n                }\n            },\n            'c:scaling': {\n                'c:orientation': {\n                    '_a': {\n                        'val': 'minMax'\n                    }\n                }\n            },\n            'c:delete': {\n                '_a': {\n                    'val': '0'\n                }\n            },\n            'c:axPos': {\n                '_a': {\n                    'val': 'b'\n                }\n            },\n            'c:majorTickMark': {\n                '_a': {\n                    'val': 'none'\n                }\n            },\n            'c:minorTickMark': {\n                '_a': {\n                    'val': 'none'\n                }\n            },\n            'c:tickLblPos': {\n                '_a': {\n                    'val': 'nextTo'\n                }\n            },\n            'c:spPr': {\n                'a:noFill': {},\n                'a:ln': {\n                    '_a': {\n                        'w': '9525',\n                        'cap': 'flat',\n                        'cmpd': 'sng',\n                        'algn': 'ctr'\n                    },\n                    'a:solidFill': {\n                        'a:schemeClr': {\n                            '_a': {\n                                'val': 'tx1'\n                            },\n                            'a:lumMod': {\n                                '_a': {\n                                    'val': '15000'\n                                }\n                            },\n                            'a:lumOff': {\n                                '_a': {\n                                    'val': '85000'\n                                }\n                            }\n                        }\n                    },\n                    'a:round': {}\n                },\n                'a:effectLst': {}\n            },\n            'c:txPr': {\n                'a:bodyPr': {\n                    '_a': {\n                        'rot': '-60000000',\n                        'spcFirstLastPara': '1',\n                        'vertOverflow': 'ellipsis',\n                        'vert': 'horz',\n                        'wrap': 'square',\n                        'anchor': 'ctr',\n                        'anchorCtr': '1'\n                    }\n                },\n                'a:lstStyle': {},\n                'a:p': {\n                    'a:pPr': {\n                        'a:defRPr': {\n                            '_a': {\n                                'sz': '900',\n                                'b': '0',\n                                'i': '0',\n                                'u': 'none',\n                                'strike': 'noStrike',\n                                'kern': '1200',\n                                'baseline': '0'\n                            },\n                            'a:solidFill': {\n                                'a:schemeClr': {\n                                    '_a': {\n                                        'val': 'tx1'\n                                    },\n                                    'a:lumMod': {\n                                        '_a': {\n                                            'val': '65000'\n                                        }\n                                    },\n                                    'a:lumOff': {\n                                        '_a': {\n                                            'val': '35000'\n                                        }\n                                    }\n                                }\n                            },\n                            'a:latin': {\n                                '_a': {\n                                    'typeface': '+mn-lt'\n                                }\n                            },\n                            'a:ea': {\n                                '_a': {\n                                    'typeface': '+mn-ea'\n                                }\n                            },\n                            'a:cs': {\n                                '_a': {\n                                    'typeface': '+mn-cs'\n                                }\n                            }\n                        }\n                    },\n                    'a:endParaRPr': {\n                        '_a': {\n                            'lang': 'en-US'\n                        }\n                    }\n                }\n            },\n            'c:crossAx': {\n                '_a': {\n                    'val': '1789284464'\n                }\n            },\n            'c:crosses': {\n                '_a': {\n                    'val': 'autoZero'\n                }\n            },\n            'c:auto': {\n                '_a': {\n                    'val': '1'\n                }\n            },\n            'c:lblAlgn': {\n                '_a': {\n                    'val': 'ctr'\n                }\n            },\n            'c:lblOffset': {\n                '_a': {\n                    'val': '100'\n                }\n            },\n            'c:noMultiLvlLbl': {\n                '_a': {\n                    'val': '0'\n                }\n            }\n        },\n        'c:valAx': {\n            'c:axId': {\n                '_a': {\n                    'val': '1789284464'\n                }\n            },\n            'c:scaling': {\n                'c:orientation': {\n                    '_a': {\n                        'val': 'minMax'\n                    }\n                }\n            },\n            'c:delete': {\n                '_a': {\n                    'val': '0'\n                }\n            },\n            'c:axPos': {\n                '_a': {\n                    'val': 'l'\n                }\n            },\n            'c:majorGridlines': {\n                'c:spPr': {\n                    'a:ln': {\n                        '_a': {\n                            'w': '9525',\n                            'cap': 'flat',\n                            'cmpd': 'sng',\n                            'algn': 'ctr'\n                        },\n                        'a:solidFill': {\n                            'a:schemeClr': {\n                                '_a': {\n                                    'val': 'tx1'\n                                },\n                                'a:lumMod': {\n                                    '_a': {\n                                        'val': '15000'\n                                    }\n                                },\n                                'a:lumOff': {\n                                    '_a': {\n                                        'val': '85000'\n                                    }\n                                }\n                            }\n                        },\n                        'a:round': {}\n                    },\n                    'a:effectLst': {}\n                }\n            },\n            'c:numFmt': {\n                '_a': {\n                    'formatCode': 'General',\n                    'sourceLinked': '1'\n                }\n            },\n            'c:majorTickMark': {\n                '_a': {\n                    'val': 'none'\n                }\n            },\n            'c:minorTickMark': {\n                '_a': {\n                    'val': 'none'\n                }\n            },\n            'c:tickLblPos': {\n                '_a': {\n                    'val': 'nextTo'\n                }\n            },\n            'c:spPr': {\n                'a:noFill': {},\n                'a:ln': {\n                    'a:noFill': {}\n                },\n                'a:effectLst': {}\n            },\n            'c:txPr': {\n                'a:bodyPr': {\n                    '_a': {\n                        'rot': '-60000000',\n                        'spcFirstLastPara': '1',\n                        'vertOverflow': 'ellipsis',\n                        'vert': 'horz',\n                        'wrap': 'square',\n                        'anchor': 'ctr',\n                        'anchorCtr': '1'\n                    }\n                },\n                'a:lstStyle': {},\n                'a:p': {\n                    'a:pPr': {\n                        'a:defRPr': {\n                            '_a': {\n                                'sz': '900',\n                                'b': '0',\n                                'i': '0',\n                                'u': 'none',\n                                'strike': 'noStrike',\n                                'kern': '1200',\n                                'baseline': '0'\n                            },\n                            'a:solidFill': {\n                                'a:schemeClr': {\n                                    '_a': {\n                                        'val': 'tx1'\n                                    },\n                                    'a:lumMod': {\n                                        '_a': {\n                                            'val': '65000'\n                                        }\n                                    },\n                                    'a:lumOff': {\n                                        '_a': {\n                                            'val': '35000'\n                                        }\n                                    }\n                                }\n                            },\n                            'a:latin': {\n                                '_a': {\n                                    'typeface': '+mn-lt'\n                                }\n                            },\n                            'a:ea': {\n                                '_a': {\n                                    'typeface': '+mn-ea'\n                                }\n                            },\n                            'a:cs': {\n                                '_a': {\n                                    'typeface': '+mn-cs'\n                                }\n                            }\n                        }\n                    },\n                    'a:endParaRPr': {\n                        '_a': {\n                            'lang': 'en-US'\n                        }\n                    }\n                }\n            },\n            'c:crossAx': {\n                '_a': {\n                    'val': '47003664'\n                }\n            },\n            'c:crosses': {\n                '_a': {\n                    'val': 'autoZero'\n                }\n            },\n            'c:crossBetween': {\n                '_a': {\n                    'val': 'between'\n                }\n            }\n        },\n        'c:spPr': {\n            'a:noFill': {},\n            'a:ln': {\n                'a:noFill': {}\n            },\n            'a:effectLst': {}\n        }\n    },\n    'c:plotVisOnly': {\n        '_a': {\n            'val': '1'\n        }\n    },\n    'c:dispBlanksAs': {\n        '_a': {\n            'val': 'gap'\n        }\n    },\n    'c:extLst': {\n        'c:ext': {\n            '_a': {\n                'uri': '{56B9EC1D-385E-4148-901F-78D8002777C0}',\n                'xmlns:c16r3': 'http://schemas.microsoft.com/office/drawing/2017/03/chart'\n            },\n            'c16r3:dataDisplayOptions16': {\n                'c16r3:dispNaAsBlank': {\n                    '_a': {\n                        'val': '1'\n                    }\n                }\n            }\n        }\n    },\n    'c:showDLblsOverMax': {\n        '_a': {\n            'val': '0'\n        }\n    }\n};\n\n\n//# sourceURL=webpack://treb/./treb-export/src/drawing/column-chart-template.ts?");

/***/ }),

/***/ "./treb-export/src/drawing/donut-chart-template.ts":
/*!*********************************************************!*\
  !*** ./treb-export/src/drawing/donut-chart-template.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"donut_json\": () => (/* binding */ donut_json)\n/* harmony export */ });\nconst donut_json = {\n    'c:title': {},\n    'c:autoTitleDeleted': {\n        '_a': {\n            'val': '0'\n        }\n    },\n    'c:plotArea': {\n        'c:layout': {},\n        'c:doughnutChart': {\n            'c:varyColors': {\n                '_a': {\n                    'val': '1'\n                }\n            },\n            'c:ser': {\n                'c:idx': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:order': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:dPt': {\n                    'c:idx': {\n                        '_a': {\n                            'val': '3'\n                        }\n                    },\n                    'c:bubble3D': {\n                        '_a': {\n                            'val': '0'\n                        }\n                    },\n                    'c:spPr': {\n                        'a:solidFill': {\n                            'a:schemeClr': {\n                                '_a': {\n                                    'val': 'accent4'\n                                }\n                            }\n                        },\n                        'a:ln': {\n                            '_a': {\n                                'w': '19050'\n                            },\n                            'a:solidFill': {\n                                'a:schemeClr': {\n                                    '_a': {\n                                        'val': 'lt1'\n                                    }\n                                }\n                            }\n                        },\n                        'a:effectLst': {}\n                    },\n                    'c:extLst': {\n                        'c:ext': {\n                            '_a': {\n                                'uri': '{C3380CC4-5D6E-409C-BE32-E72D297353CC}',\n                                'xmlns:c16': 'http://schemas.microsoft.com/office/drawing/2014/chart'\n                            },\n                            'c16:uniqueId': {\n                                '_a': {\n                                    'val': '{00000007-E886-49A6-AE6D-C67D8A27530F}'\n                                }\n                            }\n                        }\n                    }\n                },\n                'c:cat': {\n                    'c:strRef': {\n                        'c:f': {\n                            '_t': '', // ref: 'Sheet1!$E$5:$E$8'\n                        },\n                    }\n                },\n                'c:val': {\n                    'c:numRef': {\n                        'c:f': {\n                            '_t': '', // ref: 'Sheet1!$F$5:$F$8'\n                        },\n                    }\n                },\n                'c:extLst': {\n                    'c:ext': {\n                        '_a': {\n                            'uri': '{C3380CC4-5D6E-409C-BE32-E72D297353CC}',\n                            'xmlns:c16': 'http://schemas.microsoft.com/office/drawing/2014/chart'\n                        },\n                        'c16:uniqueId': {\n                            '_a': {\n                                'val': '{00000000-3689-4BB4-A84F-05B9F3BBE577}'\n                            }\n                        }\n                    }\n                }\n            },\n            'c:dLbls': {\n                'c:showLegendKey': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showVal': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showCatName': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showSerName': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showPercent': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showBubbleSize': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showLeaderLines': {\n                    '_a': {\n                        'val': '1'\n                    }\n                }\n            },\n            'c:firstSliceAng': {\n                '_a': {\n                    'val': '0'\n                }\n            },\n            'c:holeSize': {\n                '_a': {\n                    'val': '75'\n                }\n            }\n        },\n        'c:spPr': {\n            'a:noFill': {},\n            'a:ln': {\n                'a:noFill': {}\n            },\n            'a:effectLst': {}\n        }\n    },\n    'c:legend': {\n        'c:legendPos': {\n            '_a': {\n                'val': 'b'\n            }\n        },\n        'c:overlay': {\n            '_a': {\n                'val': '0'\n            }\n        },\n        'c:spPr': {\n            'a:noFill': {},\n            'a:ln': {\n                'a:noFill': {}\n            },\n            'a:effectLst': {}\n        },\n        'c:txPr': {\n            'a:bodyPr': {\n                '_a': {\n                    'rot': '0',\n                    'spcFirstLastPara': '1',\n                    'vertOverflow': 'ellipsis',\n                    'vert': 'horz',\n                    'wrap': 'square',\n                    'anchor': 'ctr',\n                    'anchorCtr': '1'\n                }\n            },\n            'a:lstStyle': {},\n            'a:p': {\n                'a:pPr': {\n                    '_a': {\n                        'rtl': '0'\n                    },\n                    'a:defRPr': {\n                        '_a': {\n                            'sz': '900',\n                            'b': '0',\n                            'i': '0',\n                            'u': 'none',\n                            'strike': 'noStrike',\n                            'kern': '1200',\n                            'baseline': '0'\n                        },\n                        'a:solidFill': {\n                            'a:schemeClr': {\n                                '_a': {\n                                    'val': 'tx1'\n                                },\n                                'a:lumMod': {\n                                    '_a': {\n                                        'val': '65000'\n                                    }\n                                },\n                                'a:lumOff': {\n                                    '_a': {\n                                        'val': '35000'\n                                    }\n                                }\n                            }\n                        },\n                        'a:latin': {\n                            '_a': {\n                                'typeface': '+mn-lt'\n                            }\n                        },\n                        'a:ea': {\n                            '_a': {\n                                'typeface': '+mn-ea'\n                            }\n                        },\n                        'a:cs': {\n                            '_a': {\n                                'typeface': '+mn-cs'\n                            }\n                        }\n                    }\n                },\n                'a:endParaRPr': {\n                    '_a': {\n                        'lang': 'en-US'\n                    }\n                }\n            }\n        }\n    },\n    'c:plotVisOnly': {\n        '_a': {\n            'val': '1'\n        }\n    },\n    'c:dispBlanksAs': {\n        '_a': {\n            'val': 'gap'\n        }\n    },\n    'c:extLst': {\n        'c:ext': {\n            '_a': {\n                'uri': '{56B9EC1D-385E-4148-901F-78D8002777C0}',\n                'xmlns:c16r3': 'http://schemas.microsoft.com/office/drawing/2017/03/chart'\n            },\n            'c16r3:dataDisplayOptions16': {\n                'c16r3:dispNaAsBlank': {\n                    '_a': {\n                        'val': '1'\n                    }\n                }\n            }\n        }\n    },\n    'c:showDLblsOverMax': {\n        '_a': {\n            'val': '0'\n        }\n    }\n};\n\n\n//# sourceURL=webpack://treb/./treb-export/src/drawing/donut-chart-template.ts?");

/***/ }),

/***/ "./treb-export/src/drawing/drawing.ts":
/*!********************************************!*\
  !*** ./treb-export/src/drawing/drawing.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Drawing\": () => (/* binding */ Drawing)\n/* harmony export */ });\n/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chart */ \"./treb-export/src/drawing/chart.ts\");\n/*\nimport * as ElementTree from 'elementtree';\nimport { Element, ElementTree as Tree } from 'elementtree';\nimport { UnitAddress, UnitRange, UnitLiteral } from 'treb-parser/src';\n\nimport { donut_json } from './donut-chart';\nimport { static_title, ref_title, chart_template } from './chart-common';\nimport { column_json } from './column-chart';\n\nimport { Localization } from 'treb-base-types/src';\n*/\n\nconst pixel_offset = 9525;\nclass Drawing {\n    constructor(index = Drawing.next_drawing_index++) {\n        this.index = index;\n        /**\n         * because we control this file, we kmow that there are no drawings\n         * in there now, nor are there 'colors' or 'styles'. we can ensure\n         * that the indexes are aligned, and start at 1.\n         *\n         * however you can adjust if necessary (not implemented).\n         * /\n        public static next_index: Indexes = {\n          drawing: 1,\n          chart: 1,\n          colors: 1,\n          style: 1,\n        };\n      \n        public static ResetIndexes() {\n          this.next_index = {\n            drawing: 1,\n            chart: 1,\n            colors: 1,\n            style: 1,\n          };\n        }\n        */\n        /*\n        public static AssignIndexes(colors = true, style = true): Indexes {\n          const indexes = {...this.next_index};\n          this.next_index.drawing++;\n          this.next_index.chart++;\n      \n          if (colors) {\n            this.next_index.colors++;\n          }\n          else {\n            indexes.colors = 0;\n          }\n      \n          if (style) {\n            this.next_index.style++;\n          }\n          else {\n            indexes.style = 0;\n          }\n          \n          return indexes;\n        }\n        */\n        /* * indexes for file names * /\n        public indexes: Indexes;\n        */\n        /** relationship id sheet -> drawing */\n        this.sheet_drawing_relationship = 0;\n        this.charts = [];\n    }\n    AddChart(options, anchor) {\n        const chart = new _chart__WEBPACK_IMPORTED_MODULE_0__.Chart(options);\n        this.charts.push({ chart, anchor });\n    }\n    GetDrawingXML() {\n        const components = [`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<xdr:wsDr xmlns:xdr=\"http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing\" xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\">`];\n        for (let i = 0; i < this.charts.length; i++) {\n            const index = i + 1;\n            const anchor = this.charts[i].anchor;\n            components.push(`<xdr:twoCellAnchor><xdr:from><xdr:col>${anchor.from.column}</xdr:col><xdr:colOff>${(anchor.from.column_offset || 0) * pixel_offset}</xdr:colOff>`\n                + `<xdr:row>${anchor.from.row}</xdr:row><xdr:rowOff>${(anchor.from.row_offset || 0) * pixel_offset}</xdr:rowOff></xdr:from>`\n                + `<xdr:to><xdr:col>${anchor.to.column}</xdr:col><xdr:colOff>${(anchor.to.column_offset || 0) * pixel_offset}</xdr:colOff>`\n                + `<xdr:row>${anchor.to.row}</xdr:row><xdr:rowOff>${(anchor.to.row_offset || 0) * pixel_offset}</xdr:rowOff></xdr:to>`\n                + `<xdr:graphicFrame macro=\"\"><xdr:nvGraphicFramePr><xdr:cNvPr id=\"${index + 1}\" name=\"Chart ${index}\"><a:extLst><a:ext uri=\"{FF2B5EF4-FFF2-40B4-BE49-F238E27FC236}\"><a16:creationId xmlns:a16=\"http://schemas.microsoft.com/office/drawing/2014/main\" id=\"{9948BDEE-44B2-4E72-83C8-2C9C56F04EAA}\"/></a:ext></a:extLst></xdr:cNvPr><xdr:cNvGraphicFramePr/></xdr:nvGraphicFramePr><xdr:xfrm><a:off x=\"0\" y=\"0\"/><a:ext cx=\"0\" cy=\"0\"/></xdr:xfrm><a:graphic><a:graphicData uri=\"http://schemas.openxmlformats.org/drawingml/2006/chart\"><c:chart xmlns:c=\"http://schemas.openxmlformats.org/drawingml/2006/chart\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" r:id=\"rId${index}\"/></a:graphicData></a:graphic></xdr:graphicFrame><xdr:clientData/></xdr:twoCellAnchor>`);\n        }\n        components.push(`</xdr:wsDr>`);\n        return components.join('');\n    }\n    GetDrawingRels() {\n        const components = [`<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">`];\n        for (let i = 0; i < this.charts.length; i++) {\n            const index = i + 1;\n            const chart = this.charts[i].chart;\n            components.push(`<Relationship Id=\"rId${index}\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart\" Target=\"../charts/chart${chart.index}.xml\"/>`);\n        }\n        components.push(`</Relationships>`);\n        return components.join('');\n    }\n}\nDrawing.next_drawing_index = 1;\n\n\n//# sourceURL=webpack://treb/./treb-export/src/drawing/drawing.ts?");

/***/ }),

/***/ "./treb-export/src/drawing/scatter-chart-template.ts":
/*!***********************************************************!*\
  !*** ./treb-export/src/drawing/scatter-chart-template.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"scatter_series\": () => (/* binding */ scatter_series),\n/* harmony export */   \"scatter_json\": () => (/* binding */ scatter_json)\n/* harmony export */ });\nconst scatter_series = {\n    /*\n    'c:idx': {\n      '_a': {\n        'val': '0'\n      }\n    },\n    'c:order': {\n      '_a': {\n        'val': '0'\n      }\n    },\n    */\n    'c:spPr': {\n        'a:ln': {\n            '_a': {\n                'w': '19050',\n                'cap': 'rnd'\n            },\n            'a:solidFill': {\n                'a:schemeClr': {\n                    '_a': {\n                        'val': 'accent1'\n                    }\n                }\n            },\n            'a:round': {}\n        },\n        'a:effectLst': {}\n    },\n    'c:marker': {\n        'c:symbol': {\n            '_a': {\n                'val': 'none'\n            }\n        }\n    },\n    'c:yVal': {\n        'c:numRef': {\n            'c:f': {\n                '_t': '', // 'Sheet1!$E$2:$E$14'\n            },\n            /*\n            'c:numCache': {\n              'c:formatCode': {\n                '_t': '0.00'\n              },\n              'c:ptCount': {\n                '_a': {\n                  'val': '13'\n                }\n              },\n              'c:pt': [\n                {\n                  '_a': {\n                    'idx': '0'\n                  },\n                  'c:v': {\n                    '_t': '1E-3'\n                  }\n                },\n                {\n                  '_a': {\n                    'idx': '1'\n                  },\n                  'c:v': {\n                    '_t': '6.0000000000000001E-3'\n                  }\n                },\n                {\n                  '_a': {\n                    'idx': '2'\n                  },\n                  'c:v': {\n                    '_t': '2.3E-2'\n                  }\n                },\n                {\n                  '_a': {\n                    'idx': '3'\n                  },\n                  'c:v': {\n                    '_t': '6.7000000000000004E-2'\n                  }\n                },\n                {\n                  '_a': {\n                    'idx': '4'\n                  },\n                  'c:v': {\n                    '_t': '0.158'\n                  }\n                },\n                {\n                  '_a': {\n                    'idx': '5'\n                  },\n                  'c:v': {\n                    '_t': '0.309'\n                  }\n                },\n                {\n                  '_a': {\n                    'idx': '6'\n                  },\n                  'c:v': {\n                    '_t': '0.5'\n                  }\n                },\n                {\n                  '_a': {\n                    'idx': '7'\n                  },\n                  'c:v': {\n                    '_t': '0.69199999999999995'\n                  }\n                },\n                {\n                  '_a': {\n                    'idx': '8'\n                  },\n                  'c:v': {\n                    '_t': '0.84099999999999997'\n                  }\n                },\n                {\n                  '_a': {\n                    'idx': '9'\n                  },\n                  'c:v': {\n                    '_t': '0.93300000000000005'\n                  }\n                },\n                {\n                  '_a': {\n                    'idx': '10'\n                  },\n                  'c:v': {\n                    '_t': '0.97699999999999998'\n                  }\n                },\n                {\n                  '_a': {\n                    'idx': '11'\n                  },\n                  'c:v': {\n                    '_t': '0.99399999999999999'\n                  }\n                },\n                {\n                  '_a': {\n                    'idx': '12'\n                  },\n                  'c:v': {\n                    '_t': '0.999'\n                  }\n                }\n              ]\n            }\n            */\n        }\n    },\n    'c:smooth': {\n        '_a': {\n            'val': '0'\n        }\n    },\n    'c:extLst': {\n        'c:ext': {\n            '_a': {\n                'uri': '{C3380CC4-5D6E-409C-BE32-E72D297353CC}',\n                'xmlns:c16': 'http://schemas.microsoft.com/office/drawing/2014/chart'\n            },\n            'c16:uniqueId': {\n                '_a': {\n                    'val': '{00000000-1F6C-44A9-AA4F-6706F20CC72E}'\n                }\n            }\n        }\n    }\n};\n/*\n,\n{\n  'c:idx': {\n    '_a': {\n      'val': '1'\n    }\n  },\n  'c:order': {\n    '_a': {\n      'val': '1'\n    }\n  },\n  'c:spPr': {\n    'a:ln': {\n      '_a': {\n        'w': '19050',\n        'cap': 'rnd'\n      },\n      'a:solidFill': {\n        'a:schemeClr': {\n          '_a': {\n            'val': 'accent2'\n          }\n        }\n      },\n      'a:round': {}\n    },\n    'a:effectLst': {}\n  },\n  'c:marker': {\n    'c:symbol': {\n      '_a': {\n        'val': 'none'\n      }\n    }\n  },\n  'c:yVal': {\n    'c:numRef': {\n      'c:f': {\n        '_t': 'Sheet1!$F$2:$F$14'\n      },\n      'c:numCache': {\n        'c:formatCode': {\n          '_t': '0.00'\n        },\n        'c:ptCount': {\n          '_a': {\n            'val': '13'\n          }\n        },\n        'c:pt': [\n          {\n            '_a': {\n              'idx': '0'\n            },\n            'c:v': {\n              '_t': '0'\n            }\n          },\n          {\n            '_a': {\n              'idx': '1'\n            },\n            'c:v': {\n              '_t': '0.02'\n            }\n          },\n          {\n            '_a': {\n              'idx': '2'\n            },\n            'c:v': {\n              '_t': '6.8000000000000005E-2'\n            }\n          },\n          {\n            '_a': {\n              'idx': '3'\n            },\n            'c:v': {\n              '_t': '0.17600000000000002'\n            }\n          },\n          {\n            '_a': {\n              'idx': '4'\n            },\n            'c:v': {\n              '_t': '0.36399999999999999'\n            }\n          },\n          {\n            '_a': {\n              'idx': '5'\n            },\n            'c:v': {\n              '_t': '0.60399999999999998'\n            }\n          },\n          {\n            '_a': {\n              'idx': '6'\n            },\n            'c:v': {\n              '_t': '0.76400000000000001'\n            }\n          },\n          {\n            '_a': {\n              'idx': '7'\n            },\n            'c:v': {\n              '_t': '0.76799999999999979'\n            }\n          },\n          {\n            '_a': {\n              'idx': '8'\n            },\n            'c:v': {\n              '_t': '0.59600000000000009'\n            }\n          },\n          {\n            '_a': {\n              'idx': '9'\n            },\n            'c:v': {\n              '_t': '0.36800000000000033'\n            }\n          },\n          {\n            '_a': {\n              'idx': '10'\n            },\n            'c:v': {\n              '_t': '0.17599999999999971'\n            }\n          },\n          {\n            '_a': {\n              'idx': '11'\n            },\n            'c:v': {\n              '_t': '6.800000000000006E-2'\n            }\n          },\n          {\n            '_a': {\n              'idx': '12'\n            },\n            'c:v': {\n              '_t': '2.0000000000000018E-2'\n            }\n          }\n        ]\n      }\n    }\n  },\n  'c:smooth': {\n    '_a': {\n      'val': '0'\n    }\n  },\n  'c:extLst': {\n    'c:ext': {\n      '_a': {\n        'uri': '{C3380CC4-5D6E-409C-BE32-E72D297353CC}',\n        'xmlns:c16': 'http://schemas.microsoft.com/office/drawing/2014/chart'\n      },\n      'c16:uniqueId': {\n        '_a': {\n          'val': '{00000001-1F6C-44A9-AA4F-6706F20CC72E}'\n        }\n      }\n    }\n  }\n};\n*/\nconst scatter_json = {\n    'c:title': {},\n    'c:autoTitleDeleted': {\n        '_a': {\n            'val': '0'\n        }\n    },\n    'c:plotArea': {\n        'c:layout': {},\n        'c:scatterChart': {\n            'c:scatterStyle': {\n                '_a': {\n                    'val': 'lineMarker'\n                }\n            },\n            'c:varyColors': {\n                '_a': {\n                    'val': '0'\n                }\n            },\n            'c:ser': [],\n            'c:dLbls': {\n                'c:showLegendKey': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showVal': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showCatName': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showSerName': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showPercent': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:showBubbleSize': {\n                    '_a': {\n                        'val': '0'\n                    }\n                }\n            },\n            'c:axId': [\n                {\n                    '_a': {\n                        'val': '2028657983'\n                    }\n                },\n                {\n                    '_a': {\n                        'val': '2023395087'\n                    }\n                }\n            ]\n        },\n        'c:valAx': [\n            {\n                'c:axId': {\n                    '_a': {\n                        'val': '2028657983'\n                    }\n                },\n                'c:scaling': {\n                    'c:orientation': {\n                        '_a': {\n                            'val': 'minMax'\n                        }\n                    }\n                },\n                'c:delete': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:axPos': {\n                    '_a': {\n                        'val': 'b'\n                    }\n                },\n                'c:majorGridlines': {\n                    'c:spPr': {\n                        'a:ln': {\n                            '_a': {\n                                'w': '9525',\n                                'cap': 'flat',\n                                'cmpd': 'sng',\n                                'algn': 'ctr'\n                            },\n                            'a:solidFill': {\n                                'a:schemeClr': {\n                                    '_a': {\n                                        'val': 'tx1'\n                                    },\n                                    'a:lumMod': {\n                                        '_a': {\n                                            'val': '15000'\n                                        }\n                                    },\n                                    'a:lumOff': {\n                                        '_a': {\n                                            'val': '85000'\n                                        }\n                                    }\n                                }\n                            },\n                            'a:round': {}\n                        },\n                        'a:effectLst': {}\n                    }\n                },\n                'c:majorTickMark': {\n                    '_a': {\n                        'val': 'none'\n                    }\n                },\n                'c:minorTickMark': {\n                    '_a': {\n                        'val': 'none'\n                    }\n                },\n                'c:tickLblPos': {\n                    '_a': {\n                        'val': 'nextTo'\n                    }\n                },\n                'c:spPr': {\n                    'a:noFill': {},\n                    'a:ln': {\n                        '_a': {\n                            'w': '9525',\n                            'cap': 'flat',\n                            'cmpd': 'sng',\n                            'algn': 'ctr'\n                        },\n                        'a:solidFill': {\n                            'a:schemeClr': {\n                                '_a': {\n                                    'val': 'tx1'\n                                },\n                                'a:lumMod': {\n                                    '_a': {\n                                        'val': '25000'\n                                    }\n                                },\n                                'a:lumOff': {\n                                    '_a': {\n                                        'val': '75000'\n                                    }\n                                }\n                            }\n                        },\n                        'a:round': {}\n                    },\n                    'a:effectLst': {}\n                },\n                'c:txPr': {\n                    'a:bodyPr': {\n                        '_a': {\n                            'rot': '-60000000',\n                            'spcFirstLastPara': '1',\n                            'vertOverflow': 'ellipsis',\n                            'vert': 'horz',\n                            'wrap': 'square',\n                            'anchor': 'ctr',\n                            'anchorCtr': '1'\n                        }\n                    },\n                    'a:lstStyle': {},\n                    'a:p': {\n                        'a:pPr': {\n                            'a:defRPr': {\n                                '_a': {\n                                    'sz': '900',\n                                    'b': '0',\n                                    'i': '0',\n                                    'u': 'none',\n                                    'strike': 'noStrike',\n                                    'kern': '1200',\n                                    'baseline': '0'\n                                },\n                                'a:solidFill': {\n                                    'a:schemeClr': {\n                                        '_a': {\n                                            'val': 'tx1'\n                                        },\n                                        'a:lumMod': {\n                                            '_a': {\n                                                'val': '65000'\n                                            }\n                                        },\n                                        'a:lumOff': {\n                                            '_a': {\n                                                'val': '35000'\n                                            }\n                                        }\n                                    }\n                                },\n                                'a:latin': {\n                                    '_a': {\n                                        'typeface': '+mn-lt'\n                                    }\n                                },\n                                'a:ea': {\n                                    '_a': {\n                                        'typeface': '+mn-ea'\n                                    }\n                                },\n                                'a:cs': {\n                                    '_a': {\n                                        'typeface': '+mn-cs'\n                                    }\n                                }\n                            }\n                        },\n                        'a:endParaRPr': {\n                            '_a': {\n                                'lang': 'en-US'\n                            }\n                        }\n                    }\n                },\n                'c:crossAx': {\n                    '_a': {\n                        'val': '2023395087'\n                    }\n                },\n                'c:crosses': {\n                    '_a': {\n                        'val': 'autoZero'\n                    }\n                },\n                'c:crossBetween': {\n                    '_a': {\n                        'val': 'midCat'\n                    }\n                }\n            },\n            {\n                'c:axId': {\n                    '_a': {\n                        'val': '2023395087'\n                    }\n                },\n                'c:scaling': {\n                    'c:orientation': {\n                        '_a': {\n                            'val': 'minMax'\n                        }\n                    }\n                },\n                'c:delete': {\n                    '_a': {\n                        'val': '0'\n                    }\n                },\n                'c:axPos': {\n                    '_a': {\n                        'val': 'l'\n                    }\n                },\n                'c:majorGridlines': {\n                    'c:spPr': {\n                        'a:ln': {\n                            '_a': {\n                                'w': '9525',\n                                'cap': 'flat',\n                                'cmpd': 'sng',\n                                'algn': 'ctr'\n                            },\n                            'a:solidFill': {\n                                'a:schemeClr': {\n                                    '_a': {\n                                        'val': 'tx1'\n                                    },\n                                    'a:lumMod': {\n                                        '_a': {\n                                            'val': '15000'\n                                        }\n                                    },\n                                    'a:lumOff': {\n                                        '_a': {\n                                            'val': '85000'\n                                        }\n                                    }\n                                }\n                            },\n                            'a:round': {}\n                        },\n                        'a:effectLst': {}\n                    }\n                },\n                'c:numFmt': {\n                    '_a': {\n                        'formatCode': '0.00',\n                        'sourceLinked': '1'\n                    }\n                },\n                'c:majorTickMark': {\n                    '_a': {\n                        'val': 'none'\n                    }\n                },\n                'c:minorTickMark': {\n                    '_a': {\n                        'val': 'none'\n                    }\n                },\n                'c:tickLblPos': {\n                    '_a': {\n                        'val': 'nextTo'\n                    }\n                },\n                'c:spPr': {\n                    'a:noFill': {},\n                    'a:ln': {\n                        '_a': {\n                            'w': '9525',\n                            'cap': 'flat',\n                            'cmpd': 'sng',\n                            'algn': 'ctr'\n                        },\n                        'a:solidFill': {\n                            'a:schemeClr': {\n                                '_a': {\n                                    'val': 'tx1'\n                                },\n                                'a:lumMod': {\n                                    '_a': {\n                                        'val': '25000'\n                                    }\n                                },\n                                'a:lumOff': {\n                                    '_a': {\n                                        'val': '75000'\n                                    }\n                                }\n                            }\n                        },\n                        'a:round': {}\n                    },\n                    'a:effectLst': {}\n                },\n                'c:txPr': {\n                    'a:bodyPr': {\n                        '_a': {\n                            'rot': '-60000000',\n                            'spcFirstLastPara': '1',\n                            'vertOverflow': 'ellipsis',\n                            'vert': 'horz',\n                            'wrap': 'square',\n                            'anchor': 'ctr',\n                            'anchorCtr': '1'\n                        }\n                    },\n                    'a:lstStyle': {},\n                    'a:p': {\n                        'a:pPr': {\n                            'a:defRPr': {\n                                '_a': {\n                                    'sz': '900',\n                                    'b': '0',\n                                    'i': '0',\n                                    'u': 'none',\n                                    'strike': 'noStrike',\n                                    'kern': '1200',\n                                    'baseline': '0'\n                                },\n                                'a:solidFill': {\n                                    'a:schemeClr': {\n                                        '_a': {\n                                            'val': 'tx1'\n                                        },\n                                        'a:lumMod': {\n                                            '_a': {\n                                                'val': '65000'\n                                            }\n                                        },\n                                        'a:lumOff': {\n                                            '_a': {\n                                                'val': '35000'\n                                            }\n                                        }\n                                    }\n                                },\n                                'a:latin': {\n                                    '_a': {\n                                        'typeface': '+mn-lt'\n                                    }\n                                },\n                                'a:ea': {\n                                    '_a': {\n                                        'typeface': '+mn-ea'\n                                    }\n                                },\n                                'a:cs': {\n                                    '_a': {\n                                        'typeface': '+mn-cs'\n                                    }\n                                }\n                            }\n                        },\n                        'a:endParaRPr': {\n                            '_a': {\n                                'lang': 'en-US'\n                            }\n                        }\n                    }\n                },\n                'c:crossAx': {\n                    '_a': {\n                        'val': '2028657983'\n                    }\n                },\n                'c:crosses': {\n                    '_a': {\n                        'val': 'autoZero'\n                    }\n                },\n                'c:crossBetween': {\n                    '_a': {\n                        'val': 'midCat'\n                    }\n                }\n            }\n        ],\n        'c:spPr': {\n            'a:noFill': {},\n            'a:ln': {\n                'a:noFill': {}\n            },\n            'a:effectLst': {}\n        }\n    },\n    'c:plotVisOnly': {\n        '_a': {\n            'val': '1'\n        }\n    },\n    'c:dispBlanksAs': {\n        '_a': {\n            'val': 'gap'\n        }\n    },\n    'c:extLst': {\n        'c:ext': {\n            '_a': {\n                'uri': '{56B9EC1D-385E-4148-901F-78D8002777C0}',\n                'xmlns:c16r3': 'http://schemas.microsoft.com/office/drawing/2017/03/chart'\n            },\n            'c16r3:dataDisplayOptions16': {\n                'c16r3:dispNaAsBlank': {\n                    '_a': {\n                        'val': '1'\n                    }\n                }\n            }\n        }\n    },\n    'c:showDLblsOverMax': {\n        '_a': {\n            'val': '0'\n        }\n    }\n};\n\n\n//# sourceURL=webpack://treb/./treb-export/src/drawing/scatter-chart-template.ts?");

/***/ }),

/***/ "./treb-export/src/drawing/scatter2-chart-template.ts":
/*!************************************************************!*\
  !*** ./treb-export/src/drawing/scatter2-chart-template.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"scatter_series\": () => (/* binding */ scatter_series)\n/* harmony export */ });\nconst scatter_series = {\n    'c:spPr': {\n        'a:ln': {\n            '_a': {\n                'w': '19050',\n                'cap': 'rnd'\n            },\n            'a:solidFill': {\n                'a:schemeClr': {\n                    '_a': {\n                        'val': 'accent1'\n                    }\n                }\n            },\n            'a:round': {}\n        },\n        'a:effectLst': {}\n    },\n    'c:marker': {\n        'c:symbol': {\n            '_a': {\n                'val': 'none'\n            }\n        }\n    },\n    // <- 'c:tx': {},\n    'c:xVal': {\n        'c:numRef': {\n            'c:f': {\n                '_t': '',\n            },\n        }\n    },\n    'c:yVal': {\n        'c:numRef': {\n            'c:f': {\n                '_t': '',\n            },\n        }\n    },\n    'c:smooth': {\n        '_a': {\n            'val': '0'\n        }\n    },\n    'c:extLst': {\n        'c:ext': {\n            '_a': {\n                'uri': '{C3380CC4-5D6E-409C-BE32-E72D297353CC}',\n                'xmlns:c16': 'http://schemas.microsoft.com/office/drawing/2014/chart'\n            },\n            'c16:uniqueId': {\n                '_a': {\n                    'val': '{00000000-1F6C-44A9-AA4F-6706F20CC72E}'\n                }\n            }\n        }\n    }\n};\n\n\n//# sourceURL=webpack://treb/./treb-export/src/drawing/scatter2-chart-template.ts?");

/***/ }),

/***/ "./treb-export/src/export-worker/export-worker.ts":
/*!********************************************************!*\
  !*** ./treb-export/src/export-worker/export-worker.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _import__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../import */ \"./treb-export/src/import.ts\");\n/* harmony import */ var _export__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../export */ \"./treb-export/src/export.ts\");\n\n// import { Importer, Exporter } from '../';\n\n\nconst ctx = self;\nconst exporter = new _export__WEBPACK_IMPORTED_MODULE_1__.Exporter();\nconst ExportSheets = (data) => (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function* () {\n    if (data.sheet) {\n        yield exporter.Init();\n        yield exporter.ExportSheets(data.sheet);\n        const blob = yield exporter.AsBlob(1);\n        // correct the mime type for firefox\n        const corrected = blob.slice(0, blob.size, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n        ctx.postMessage({ status: 'complete', blob: corrected });\n    }\n});\nconst ImportSheet = (data) => (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function* () {\n    const importer = new _import__WEBPACK_IMPORTED_MODULE_0__.Importer();\n    try {\n        yield importer.Init(data.data);\n        const count = importer.SheetCount();\n        const results = {\n            sheets: [],\n            names: importer.workbook.GetNamedRanges(),\n            active_tab: importer.workbook.active_tab,\n        };\n        for (let i = 0; i < count; i++) {\n            const result = yield importer.GetSheet(i);\n            results.sheets.push(result);\n        }\n        ctx.postMessage({ status: 'complete', results });\n    }\n    catch (err) {\n        console.warn('error importing xlsx file');\n        console.info(err);\n        ctx.postMessage({ status: 'error', data: err });\n    }\n});\n// initialize message handler\nctx.addEventListener('message', (event) => {\n    if (event.data && event.data.command === 'export') {\n        ExportSheets(event.data);\n    }\n    else if (event.data && event.data.command === 'import') {\n        ImportSheet(event.data);\n    }\n});\n\n\n//# sourceURL=webpack://treb/./treb-export/src/export-worker/export-worker.ts?");

/***/ }),

/***/ "./treb-export/src/export-worker/index-modern.ts":
/*!*******************************************************!*\
  !*** ./treb-export/src/export-worker/index-modern.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _export_worker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./export-worker */ \"./treb-export/src/export-worker/export-worker.ts\");\n\n\n\n//# sourceURL=webpack://treb/./treb-export/src/export-worker/index-modern.ts?");

/***/ }),

/***/ "./treb-export/src/export.ts":
/*!***********************************!*\
  !*** ./treb-export/src/export.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Exporter\": () => (/* binding */ Exporter)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jszip */ \"./node_modules/jszip/dist/jszip.min.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _template_2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./template-2 */ \"./treb-export/src/template-2.ts\");\n/* harmony import */ var _workbook__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./workbook */ \"./treb-export/src/workbook.ts\");\n/* harmony import */ var treb_base_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! treb-base-types */ \"./treb-base-types/src/index.ts\");\n/* harmony import */ var treb_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! treb-parser */ \"./treb-parser/src/index.ts\");\n\n\n// import { template } from './base-template';\n\n\n\n\n/** excel units */\nconst one_hundred_pixels = 14.28515625;\n/**\n * export treb sheets as xlsx files. we're starting simple.\n */\nclass Exporter {\n    constructor() {\n        /** we may need to rewrite functions */\n        this.parser = new treb_parser__WEBPACK_IMPORTED_MODULE_4__.Parser();\n    }\n    set zip(archive) {\n        this.archive_ = archive;\n    }\n    get zip() {\n        return this.archive_;\n    }\n    Init(zip) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {\n            if (!zip) {\n                zip = yield new jszip__WEBPACK_IMPORTED_MODULE_0__().loadAsync(_template_2__WEBPACK_IMPORTED_MODULE_1__.template, { base64: true });\n            }\n            this.archive_ = zip;\n            this.workbook = new _workbook__WEBPACK_IMPORTED_MODULE_2__.Workbook();\n            yield this.workbook.Init(zip);\n        });\n    }\n    /**\n     * we're not including our sheet type because that's too deep in grid.\n     * (FIXME: fix that).\n     *\n     * for the time being we are using the exported json, and we'll assume\n     * a contract.\n     * (FXIME: use an intermediate type)\n     *\n     * @param source\n     */\n    ExportSheets(source) {\n        var _a;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {\n            this.workbook.InsertSheets(source.sheet_data.length);\n            // we may need to rewrite functions\n            // let parser: Parser | undefined;\n            let change_number_format = false;\n            if (source.decimal_mark === ',') {\n                // parser = new Parser();\n                this.parser.decimal_mark = treb_parser__WEBPACK_IMPORTED_MODULE_4__.DecimalMarkType.Comma;\n                this.parser.argument_separator = treb_parser__WEBPACK_IMPORTED_MODULE_4__.ArgumentSeparatorType.Semicolon;\n                change_number_format = true;\n            }\n            const name_map = [];\n            for (let index = 0; index < source.sheet_data.length; index++) {\n                const sheet = this.workbook.GetSheet(index);\n                const validations = [];\n                const hyperlinks = [];\n                const sparklines = [];\n                if (!sheet) {\n                    console.info('sheet not found @ index', index);\n                    continue;\n                }\n                const sheet_source = source.sheet_data[index];\n                sheet.Parse();\n                name_map[sheet_source.id || 0] = sheet_source.name || `Sheet${index + 1}`;\n                if (sheet_source.name) {\n                    this.workbook.RenameSheet(index, sheet_source.name);\n                }\n                if (source.active_sheet && sheet_source.id === source.active_sheet) {\n                    sheet.tab_selected = true;\n                }\n                // reset all merges, we will add as necessary\n                sheet.ResetMerges();\n                const style_map = [];\n                if (sheet_source.cell_styles) {\n                    for (const cs of sheet_source.cell_styles) {\n                        const ref = sheet_source.cell_style_refs[cs.ref];\n                        if (!style_map[cs.column])\n                            style_map[cs.column] = [];\n                        style_map[cs.column][cs.row] = ref;\n                    }\n                }\n                let last_column = -1;\n                let last_row = -1;\n                // console.info(JSON.stringify(sheet_source, undefined, 2));\n                if (sheet_source.data) {\n                    const StyleFromCell = (cell) => {\n                        last_column = Math.max(last_column, cell.column);\n                        last_row = Math.max(last_row, cell.row);\n                        const list = [sheet_source.sheet_style];\n                        if (sheet_source.row_pattern && sheet_source.row_pattern.length) {\n                            list.push(sheet_source.row_pattern[cell.row % sheet_source.row_pattern.length]);\n                        }\n                        // is this backwards, vis a vis our rendering? I think it might be...\n                        // YES: should be row pattern -> row -> column -> cell [corrected]\n                        if (sheet_source.row_style && sheet_source.row_style[cell.row]) {\n                            list.push(sheet_source.row_style[cell.row]);\n                        }\n                        if (sheet_source.column_style && sheet_source.column_style[cell.column]) {\n                            list.push(sheet_source.column_style[cell.column]);\n                        }\n                        if (cell.ref) {\n                            list.push(sheet_source.cell_style_refs[cell.ref]);\n                        }\n                        else if (cell.style_ref) {\n                            list.push(sheet_source.cell_style_refs[cell.style_ref]);\n                        }\n                        else if (style_map[cell.column] && style_map[cell.column][cell.row]) {\n                            list.push(style_map[cell.column][cell.row]);\n                        }\n                        const composite = treb_base_types__WEBPACK_IMPORTED_MODULE_3__.Style.Composite(list);\n                        const options = this.workbook.style_cache.StyleOptionsFromProperties(composite);\n                        const style = this.workbook.style_cache.EnsureStyle(options);\n                        return style;\n                    };\n                    const HandleCell = (cell) => {\n                        if (typeof cell.row === 'number' && typeof cell.column === 'number') {\n                            last_column = Math.max(last_column, cell.column);\n                            last_row = Math.max(last_row, cell.row);\n                            // const style = StyleFromCell(cell);\n                            const range_options = {\n                                style: StyleFromCell(cell),\n                                precalc: cell.calculated,\n                            };\n                            /*\n                            // const range_options: { [index: string]: any } = { style };\n                            const range_options: RangeOptions = { style };\n                \n                            if (cell.calculated !== undefined) {\n                              range_options.precalc = cell.calculated; // .toString();\n                            }\n                            */\n                            if (cell.area && cell.area.start.row === cell.row && cell.area.start.column === cell.column) {\n                                range_options.array = treb_base_types__WEBPACK_IMPORTED_MODULE_3__.Area.CellAddressToLabel(cell.area.start) +\n                                    ':' + treb_base_types__WEBPACK_IMPORTED_MODULE_3__.Area.CellAddressToLabel(cell.area.end);\n                            }\n                            else if (cell.merge_area && cell.merge_area.start.row === cell.row &&\n                                cell.merge_area.start.column === cell.column) {\n                                sheet.AddMerge(treb_base_types__WEBPACK_IMPORTED_MODULE_3__.Area.CellAddressToLabel(cell.merge_area.start) +\n                                    ':' + treb_base_types__WEBPACK_IMPORTED_MODULE_3__.Area.CellAddressToLabel(cell.merge_area.end));\n                                // you don't need the empty merge cells. the actual error was\n                                // the order of the mergeCells item.\n                                /*\n                                // add empty cells\n                                for (let column = cell.merge_area.start.column; column <= cell.merge_area.end.column; column++ ){\n                                  for (let row = cell.merge_area.start.row; row <= cell.merge_area.end.row; row++ ){\n                                    console.info('setting merge', row, column);\n                                    sheet.SetRange({row: row + 1, col: column + 1}, undefined, {merge: true});\n                                  }\n                                }\n                                */\n                            }\n                            if (cell.hyperlink) {\n                                hyperlinks.push({\n                                    row: cell.row + 1,\n                                    column: cell.column + 1,\n                                    text: '',\n                                    reference: cell.hyperlink,\n                                });\n                            }\n                            if (cell.validation) {\n                                const validation = cell.validation;\n                                let formula = '';\n                                if (validation.type === treb_base_types__WEBPACK_IMPORTED_MODULE_3__.ValidationType.Range) {\n                                    // FIXME: sheet name\n                                    const area = new treb_base_types__WEBPACK_IMPORTED_MODULE_3__.Area(Object.assign(Object.assign({}, validation.area.start), { absolute_column: true, absolute_row: true }), Object.assign(Object.assign({}, validation.area.end), { absolute_column: true, absolute_row: true }));\n                                    // formula.text = '$D$3:$D$10';\n                                    formula = area.spreadsheet_label;\n                                    if (validation.area.start.sheet_id\n                                        && validation.area.start.sheet_id !== sheet_source.id\n                                        && name_map[validation.area.start.sheet_id]) {\n                                        let sheet_name = name_map[validation.area.start.sheet_id];\n                                        if (treb_parser__WEBPACK_IMPORTED_MODULE_4__.QuotedSheetNameRegex.test(sheet_name)) {\n                                            sheet_name = `'${sheet_name}'`;\n                                        }\n                                        formula = sheet_name + '!' + formula;\n                                    }\n                                    // console.info('f', formula);\n                                }\n                                else if (validation.type === treb_base_types__WEBPACK_IMPORTED_MODULE_3__.ValidationType.List) {\n                                    const list = validation.list.filter(value => !!value).map((value) => {\n                                        return ((value === null || value === void 0 ? void 0 : value.toString()) || '').replace(/\"/g, '\"\"');\n                                    }).join(', ');\n                                    formula = '\"' + list + '\"';\n                                }\n                                if (formula) {\n                                    validations.push({\n                                        row: cell.row + 1,\n                                        column: cell.column + 1,\n                                        // validation: cell.validation\n                                        formula,\n                                    });\n                                }\n                            }\n                            if (this.parser && cell.value && typeof cell.value === 'string' && cell.value[0] === '=') {\n                                const result = this.parser.Parse(cell.value);\n                                if (result.expression && result.expression.type === 'call') {\n                                    switch (result.expression.name.toLowerCase()) {\n                                        case 'checkbox':\n                                            result.expression = result.expression.args[0];\n                                            cell.value = this.parser.Render(result.expression);\n                                            break;\n                                        /*\n                                        case 'hyperlink':\n                                          if (cell.calculated && Array.isArray(cell.calculated)) {\n                                            hyperlinks.push({\n                                              row: cell.row + 1,\n                                              column: cell.column + 1,\n                                              text: cell.calculated[0] || '',\n                                              reference: cell.calculated[1] || '',\n                                            });\n                      \n                                            // change to string\n                                            cell.value = cell.calculated[0] || '';\n                                            range_options.precalc = undefined;\n                                            \n                                          }\n                                          else {\n                                            console.warn('hyperlink has no calculated value')\n                                          }\n                                          break;\n                                        */\n                                        case 'sparkline.column':\n                                        case 'sparkline.line':\n                                            cell.value = '';\n                                            sparklines.push({\n                                                expression: result.expression,\n                                                row: cell.row + 1,\n                                                column: cell.column + 1,\n                                                reference: result.expression.args[0] ? this.parser.Render(result.expression.args[0]) : '',\n                                            });\n                                            break;\n                                    }\n                                }\n                                // will this put the sparkline value back? (...)\n                                if (change_number_format) {\n                                    if (result.expression) {\n                                        const rewrite = this.parser.Render(result.expression, undefined, undefined, treb_parser__WEBPACK_IMPORTED_MODULE_4__.DecimalMarkType.Period, treb_parser__WEBPACK_IMPORTED_MODULE_4__.ArgumentSeparatorType.Comma);\n                                        cell.value = '=' + rewrite;\n                                    }\n                                }\n                            }\n                            // check\n                            if (cell.value !== undefined || range_options.style || range_options.array || range_options.merge) {\n                                sheet.SetRange({ row: cell.row + 1, col: cell.column + 1 }, cell.value, range_options);\n                            }\n                        }\n                        else {\n                            // console.info(\"NO\", cell);\n                        }\n                    };\n                    // this is used for cells that have styling but no other data\n                    // (this changes? ... it changes when a cell is rendered and the style\n                    // is cached. that's bad.)\n                    // for the time being, set empty. if we hit the same cell later it\n                    // will overwrite. make sure we're padding columns here if necessary.\n                    for (const cell of sheet_source.cell_styles) {\n                        const style = StyleFromCell(cell);\n                        sheet.SetRange({ row: cell.row + 1, col: cell.column + 1 }, undefined, { style });\n                    }\n                    if ((0,treb_base_types__WEBPACK_IMPORTED_MODULE_3__.IsFlatDataArray)(sheet_source.data)) {\n                        for (const cell of sheet_source.data) {\n                            HandleCell(cell);\n                        }\n                    }\n                    else if ((0,treb_base_types__WEBPACK_IMPORTED_MODULE_3__.IsNestedRowArray)(sheet_source.data)) {\n                        for (const block of sheet_source.data) {\n                            for (const cell of block.cells) {\n                                HandleCell(Object.assign(Object.assign({}, cell), { row: block.row }));\n                            }\n                        }\n                    }\n                    else {\n                        for (const block of sheet_source.data) {\n                            for (const cell of block.cells) {\n                                HandleCell(Object.assign(Object.assign({}, cell), { column: block.column }));\n                            }\n                        }\n                    }\n                    /*\n                    for (const block of sheet_source.data) {\n            \n            \n                      if (block.cells) {\n                        const row = block.row;\n                        const column = block.column;\n                        for (const cell of block.cells) {\n                          if (typeof cell.row === 'number') {\n                            cell.column = column;\n                          }\n                          else if (typeof cell.column === 'number') {\n                            cell.row = row;\n                          }\n                          HandleCell(cell);\n                        }\n                      }\n                      else {\n                        HandleCell(block);\n                      }\n                    }\n                    */\n                }\n                if (last_column >= 0 && sheet_source.default_column_width) {\n                    //console.info(sheet_source.default_column_width);\n                    const units = sheet_source.default_column_width / 100 * one_hundred_pixels;\n                    for (let i = 0; i <= last_column; i++) {\n                        sheet.SetColumnWidth(i + 1, units);\n                    }\n                }\n                if (sheet_source.default_column_width) {\n                    sheet.default_width = sheet_source.default_column_width / 100 * one_hundred_pixels;\n                }\n                // style: row styles\n                if (last_row >= 0) {\n                    const pattern_length = ((_a = sheet_source.row_pattern) === null || _a === void 0 ? void 0 : _a.length) || 0;\n                    for (let i = 0; i <= last_row; i++) {\n                        const list = [];\n                        if (pattern_length && sheet_source.row_pattern) {\n                            list.push(sheet_source.row_pattern[i % pattern_length]);\n                        }\n                        if (sheet_source.row_style && sheet_source.row_style[i]) {\n                            list.push(sheet_source.row_style[i]);\n                        }\n                        if (list.length) {\n                            const options = this.workbook.style_cache.StyleOptionsFromProperties(treb_base_types__WEBPACK_IMPORTED_MODULE_3__.Style.Composite(list));\n                            const style = this.workbook.style_cache.EnsureStyle(options);\n                            sheet.SetRowStyleIndex(i + 1, style);\n                        }\n                    }\n                }\n                // style... page style and column style goes in columns\n                {\n                    const base = sheet_source.sheet_style;\n                    let options = this.workbook.style_cache.StyleOptionsFromProperties(base);\n                    let style = this.workbook.style_cache.EnsureStyle(options);\n                    sheet.SetDefaultColumnStyle(style);\n                    if (last_column >= 0) {\n                        for (let i = 0; i <= last_column; i++) {\n                            const list = [base];\n                            if (sheet_source.column_style[i]) {\n                                list.push(sheet_source.column_style[i]);\n                            }\n                            // NOTE: cell to the bottom or right may override this cell's \n                            // borders. not sure how excel deals with that though. we should\n                            // probably skip in that case, need some neighbor lookups (make\n                            // sure that neighbor has both width and color).\n                            options = this.workbook.style_cache.StyleOptionsFromProperties(treb_base_types__WEBPACK_IMPORTED_MODULE_3__.Style.Composite(list));\n                            /*\n                            const composite = Style.Composite(list);\n                            { // if (composite.border_bottom||composite.border_left||composite.border_right||composite.border_bottom) {\n                              console.info('options')\n                              console.dir(Style.Composite(list));\n                              console.dir(options);\n                            }\n                            */\n                            style = this.workbook.style_cache.EnsureStyle(options);\n                            if (style) {\n                                // console.info(\"COLUMN\", i, \"STYLE\", style);\n                                sheet.SetColumnStyleIndex(i + 1, style);\n                            }\n                        }\n                    }\n                }\n                if (sheet_source.column_width) {\n                    // console.info(sheet_source.column_width);\n                    for (const key of Object.keys(sheet_source.column_width)) {\n                        const column_index = Number(key || 0);\n                        // our widths are in pixels\n                        const units = sheet_source.column_width[column_index] / 100 * one_hundred_pixels;\n                        sheet.SetColumnWidth(column_index + 1, units);\n                    }\n                }\n                const default_row_height = (sheet_source.default_row_height || 0);\n                if (sheet_source.row_height) {\n                    for (const key of Object.keys(sheet_source.row_height)) {\n                        if (!isNaN(Number(key)) && sheet_source.row_height[Number(key)] !== default_row_height) {\n                            sheet.SetRowHeight(Number(key) + 1, sheet_source.row_height[Number(key)] * 3 / 4);\n                        }\n                    }\n                }\n                const parse_series = (arg, options) => {\n                    if (arg.type === 'range') {\n                        options.data.push(this.NormalizeAddress(arg, sheet_source));\n                    }\n                    else if (arg.type === 'call') {\n                        if (/group/i.test(arg.name)) {\n                            // recurse\n                            for (const value of (arg.args || [])) {\n                                parse_series(value, options);\n                            }\n                        }\n                        else if (/series/i.test(arg.name)) {\n                            const [label, x, y] = arg.args; // y is required\n                            if (y && y.type === 'range') {\n                                options.data.push(this.NormalizeAddress(y, sheet_source));\n                                if (label) {\n                                    if (!options.names) {\n                                        options.names = [];\n                                    }\n                                    if (label.type === 'address') {\n                                        this.NormalizeAddress(label, sheet_source);\n                                    }\n                                    if (label.type === 'range') {\n                                        this.NormalizeAddress(label.start, sheet_source);\n                                        options.names[options.data.length - 1] = label.start;\n                                    }\n                                    else {\n                                        options.names[options.data.length - 1] = label;\n                                    }\n                                }\n                                if (!options.labels2) {\n                                    options.labels2 = [];\n                                }\n                                if (x && x.type === 'range') {\n                                    options.labels2[options.data.length - 1] = this.NormalizeAddress(x, sheet_source);\n                                }\n                            }\n                            else {\n                                console.info('invalid series missing Y');\n                            }\n                        }\n                    }\n                };\n                for (const annotation of sheet_source.annotations || []) {\n                    const parse_result = this.parser.Parse(annotation.formula || '');\n                    if (parse_result.expression && parse_result.expression.type === 'call') {\n                        let type = '';\n                        switch (parse_result.expression.name.toLowerCase()) {\n                            case 'line.chart':\n                                type = 'scatter';\n                                break;\n                            case 'scatter.line':\n                                type = 'scatter2';\n                                break;\n                            case 'donut.chart':\n                                type = 'donut';\n                                break;\n                            case 'bar.chart':\n                                type = 'bar';\n                                break;\n                            case 'column.chart':\n                                type = 'column';\n                                break;\n                        }\n                        if (type === 'column' || type === 'donut' || type === 'bar' || type === 'scatter' || type === 'scatter2') {\n                            const options = { type, data: [] };\n                            const title_index = (type === 'scatter2') ? 1 : 2;\n                            const title_arg = parse_result.expression.args[title_index];\n                            if (title_arg && title_arg.type === 'literal') {\n                                options.title = title_arg;\n                            }\n                            else if (title_arg && title_arg.type === 'address') {\n                                options.title = this.NormalizeAddress(title_arg, sheet_source);\n                            }\n                            else {\n                                // FIXME: formula here will not work. we need to bring\n                                // a calculator into this class? (!) or somehow cache the value...\n                                // console.info('chart title arg', title_arg)\n                            }\n                            // we changed our Series() to Group(), and then added a new Series()\n                            // function which adds data labels and per-series X values... will\n                            // need to incorporate somehow. for now, just s/series/group to get\n                            // the data in the chart\n                            // oh we already did that... duh\n                            if (parse_result.expression.args[0]) {\n                                const arg0 = parse_result.expression.args[0];\n                                if (type === 'scatter2' || type === 'bar' || type === 'column' || type === 'scatter') {\n                                    parse_series(arg0, options);\n                                }\n                                else if (arg0.type === 'range') {\n                                    options.data.push(this.NormalizeAddress(arg0, sheet_source));\n                                }\n                                // so the next cases cannot happen? (...) donut? (...)\n                                else if (arg0.type === 'call' && /group/i.test(arg0.name)) {\n                                    for (const series of arg0.args) {\n                                        // in group, could be a range or a Series()\n                                        if (series.type === 'range') {\n                                            options.data.push(this.NormalizeAddress(series, sheet_source));\n                                        }\n                                        else if (series.type === 'call' && /series/i.test(series.name)) {\n                                            // in Series(), args are (name, X, range of data)\n                                            if (series.args[2] && series.args[2].type === 'range') {\n                                                options.data.push(this.NormalizeAddress(series.args[2], sheet_source));\n                                            }\n                                        }\n                                    }\n                                }\n                                else if (arg0.type === 'call' && /series/i.test(arg0.name)) {\n                                    // another case, single Series()\n                                    if (arg0.args[2] && arg0.args[2].type === 'range') {\n                                        options.data.push(this.NormalizeAddress(arg0.args[2], sheet_source));\n                                    }\n                                }\n                                /*\n                                else if (arg0.type === 'call' && /series/i.test(arg0.name)) {\n                                  for (const series of arg0.args) {\n                                    if (series.type === 'range') {\n                                      options.data.push(this.NormalizeAddress(series, sheet_source));\n                                    }\n                                  }\n                                }\n                                */\n                            }\n                            if (type !== 'scatter2') {\n                                if (parse_result.expression.args[1] && parse_result.expression.args[1].type === 'range') {\n                                    options.labels = this.NormalizeAddress(parse_result.expression.args[1], sheet_source);\n                                }\n                            }\n                            if (type === 'scatter'\n                                && parse_result.expression.args[4]\n                                && parse_result.expression.args[4].type === 'literal'\n                                && parse_result.expression.args[4].value.toString().toLowerCase() === 'smooth') {\n                                options.smooth = true;\n                            }\n                            if (annotation.rect) {\n                                sheet.AddChart(this.AnnotationRectToAnchor(annotation.rect, sheet_source), options);\n                            }\n                            else if (annotation.layout) {\n                                sheet.AddChart(this.AnnotationLayoutToAnchor(annotation.layout, sheet_source), options);\n                            }\n                            else {\n                                console.warn('annotation missing layout');\n                            }\n                        }\n                    }\n                }\n                // const drawing_id = this.workbook.AddChart();\n                // sheet.AddChartReference(drawing_id);\n                if (validations.length) {\n                    sheet.AddValidations(validations);\n                }\n                if (sparklines.length) {\n                    sheet.AddSparklines(sparklines);\n                }\n                if (hyperlinks.length) {\n                    sheet.AddHyperlinks(hyperlinks);\n                }\n            }\n            if (source.named_ranges) {\n                this.workbook.AddNamedRanges(source.named_ranges, name_map);\n            }\n            yield this.workbook.Finalize();\n        });\n    }\n    /**\n     * new-style annotation layout (kind of a two-cell anchor) to two-cell anchor\n     */\n    AnnotationLayoutToAnchor(layout, sheet) {\n        // our offsets are % of cell. their offsets are in excel units, \n        // but when the chart is added our method will convert from pixels.\n        const address_to_anchor = (corner) => {\n            const width = (sheet.column_width && sheet.column_width[corner.address.column]) ?\n                sheet.column_width[corner.address.column] : (sheet.default_column_width || 100);\n            const height = (sheet.row_height && sheet.row_height[corner.address.row]) ?\n                sheet.row_height[corner.address.row] : (sheet.default_row_height || 20);\n            return Object.assign(Object.assign({}, corner.address), { row_offset: Math.round(corner.offset.y * height), column_offset: Math.round(corner.offset.x * width) });\n        };\n        return {\n            from: address_to_anchor(layout.tl),\n            to: address_to_anchor(layout.br),\n        };\n    }\n    /**\n     * convert a rectangle (pixels) to a two-cell anchor. note that\n     * our offsets are in pixels, they'll need to be changed to whatever\n     * the target units are.\n     */\n    AnnotationRectToAnchor(annotation_rect, sheet) {\n        const anchor = {\n            from: { row: -1, column: -1 },\n            to: { row: -1, column: -1 },\n        };\n        const rect = Object.assign(Object.assign({}, annotation_rect), { right: annotation_rect.left + annotation_rect.width, bottom: annotation_rect.top + annotation_rect.height });\n        for (let x = 0, column = 0; column < 1000; column++) {\n            const width = (sheet.column_width && sheet.column_width[column]) ? sheet.column_width[column] : (sheet.default_column_width || 100);\n            if (anchor.from.column < 0 && rect.left <= x + width) {\n                anchor.from.column = column;\n                anchor.from.column_offset = (rect.left - x);\n            }\n            if (anchor.to.column < 0 && rect.right <= x + width) {\n                anchor.to.column = column;\n                anchor.to.column_offset = (rect.right - x);\n                break;\n            }\n            x += width;\n        }\n        for (let y = 0, row = 0; row < 1000; row++) {\n            const height = (sheet.row_height && sheet.row_height[row]) ? sheet.row_height[row] : (sheet.default_row_height || 20);\n            if (anchor.from.row < 0 && rect.top <= y + height) {\n                anchor.from.row = row;\n                anchor.from.row_offset = (rect.top - y);\n            }\n            if (anchor.to.row < 0 && rect.bottom <= y + height) {\n                anchor.to.row = row;\n                anchor.to.row_offset = (rect.bottom - y);\n                break;\n            }\n            y += height;\n        }\n        return anchor;\n    }\n    /**\n     * for charts we need addresses to be absolute ($)  and ensure there's\n     * a sheet name -- use the active sheet if it's not explicitly referenced\n     */\n    NormalizeAddress(unit, sheet) {\n        const addresses = (unit.type === 'address') ? [unit] : [unit.start, unit.end];\n        for (const address of addresses) {\n            address.absolute_row = true;\n            address.absolute_column = true;\n            if (!address.sheet) {\n                address.sheet = sheet.name;\n            }\n        }\n        if (unit.type === 'range') {\n            unit.end.sheet = undefined;\n        }\n        unit.label = this.parser.Render(unit);\n        return unit; // fluent\n    }\n    AsBinaryString(compression_level) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {\n            const opts = { type: 'binarystring' };\n            if (typeof compression_level !== 'undefined') {\n                opts.compression = 'DEFLATE';\n                opts.compressionOptions = { level: compression_level };\n            }\n            const output = yield this.archive_.generateAsync(opts);\n            return output;\n        });\n    }\n    AsBlob(compression_level) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {\n            const opts = { type: 'blob' };\n            if (typeof compression_level !== 'undefined') {\n                opts.compression = 'DEFLATE';\n                opts.compressionOptions = { level: compression_level };\n            }\n            const output = yield this.archive_.generateAsync(opts);\n            return output;\n        });\n    }\n}\n\n\n//# sourceURL=webpack://treb/./treb-export/src/export.ts?");

/***/ }),

/***/ "./treb-export/src/import.ts":
/*!***********************************!*\
  !*** ./treb-export/src/import.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Importer\": () => (/* binding */ Importer)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jszip */ \"./node_modules/jszip/dist/jszip.min.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _workbook__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./workbook */ \"./treb-export/src/workbook.ts\");\n/* harmony import */ var treb_base_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! treb-base-types */ \"./treb-base-types/src/index.ts\");\n/* harmony import */ var _sheet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sheet */ \"./treb-export/src/sheet.ts\");\n/* harmony import */ var _address_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./address-type */ \"./treb-export/src/address-type.ts\");\n/* harmony import */ var treb_parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! treb-parser */ \"./treb-parser/src/index.ts\");\n\n\n\n\n\n\n\n/** excel HORIZONTAL units (vertical is different? seems to be 4/3) */\nconst one_hundred_pixels = 14.28515625;\nclass Importer {\n    constructor() {\n        // instance\n        this.parser = new treb_parser__WEBPACK_IMPORTED_MODULE_5__.Parser();\n    }\n    set zip(archive) {\n        this.archive_ = archive;\n    }\n    get zip() {\n        return this.archive_;\n    }\n    Init(data) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {\n            if (typeof data === 'string') {\n                this.archive_ = yield jszip__WEBPACK_IMPORTED_MODULE_0__().loadAsync(data);\n            }\n            else {\n                this.archive_ = data;\n            }\n            this.workbook = new _workbook__WEBPACK_IMPORTED_MODULE_1__.Workbook();\n            yield this.workbook.Init(this.archive_, undefined, true);\n        });\n    }\n    ParseCell(sheet, element, shared_formulae, arrays, merges, links) {\n        // must have, at minimum, an address (must be a single cell? FIXME)\n        const address_attr = element.attrib.r;\n        if (!address_attr) {\n            console.warn('cell missing address');\n            return undefined;\n        }\n        const address = sheet.TranslateAddress(address_attr);\n        if ((0,_address_type__WEBPACK_IMPORTED_MODULE_4__.is_range)(address)) {\n            console.warn('cell has range address');\n            return undefined;\n        }\n        // console.info(element);\n        let value;\n        let type = treb_base_types__WEBPACK_IMPORTED_MODULE_2__.ValueType.undefined;\n        let calculated_value;\n        let calculated_type = treb_base_types__WEBPACK_IMPORTED_MODULE_2__.ValueType.undefined;\n        // assuming we have single element per tag...\n        const mapped = {};\n        for (const child of element.getchildren()) {\n            if (child.tag)\n                mapped[child.tag.toString()] = child;\n        }\n        // console.info(address, 'e', element, 'm', mapped);\n        if (element.attrib.t && element.attrib.t === 's') {\n            type = treb_base_types__WEBPACK_IMPORTED_MODULE_2__.ValueType.string;\n            if (mapped.v && mapped.v.text) {\n                const index = Number(mapped.v.text);\n                if (!isNaN(index) && sheet.shared_strings) {\n                    value = sheet.shared_strings.GetSharedString(index) || '';\n                    if (value[0] === '=') {\n                        value = '\\'' + value;\n                    }\n                }\n            }\n        }\n        else {\n            if (mapped.f) {\n                type = treb_base_types__WEBPACK_IMPORTED_MODULE_2__.ValueType.formula;\n                if (mapped.f.text) {\n                    // doing it like this is sloppy (also does not work properly).\n                    value = '=' + mapped.f.text.toString().replace(/^_xll\\./g, '');\n                    const parse_result = this.parser.Parse(mapped.f.text.toString()); // l10n?\n                    if (parse_result.expression) {\n                        this.parser.Walk(parse_result.expression, (unit) => {\n                            if (unit.type === 'call' && /^_xll\\./.test(unit.name)) {\n                                unit.name = unit.name.substr(5);\n                            }\n                            return true;\n                        });\n                        value = '=' + this.parser.Render(parse_result.expression, undefined, '');\n                    }\n                    if (mapped.f.attrib.t === 'shared' && mapped.f.attrib.si) {\n                        shared_formulae[mapped.f.attrib.si] = {\n                            row: address.row - 1,\n                            column: address.col - 1,\n                            formula: value,\n                            parse_result: this.parser.Parse(value),\n                        };\n                    }\n                }\n                else if (mapped.f.attrib.t === 'shared' && mapped.f.attrib.si) {\n                    const f = shared_formulae[mapped.f.attrib.si];\n                    if (f) {\n                        if (f.parse_result.expression) {\n                            value = '=' + this.parser.Render(f.parse_result.expression, {\n                                rows: address.row - 1 - f.row,\n                                columns: address.col - 1 - f.column,\n                            }, '');\n                        }\n                        else\n                            value = f.formula;\n                    }\n                    else {\n                        // console.info(\"MISSING SHARED\", mapped.f.attrib.si);\n                    }\n                }\n                if (mapped.f.attrib.t === 'array') {\n                    const translated = sheet.TranslateAddress(mapped.f.attrib.ref || '');\n                    if ((0,_address_type__WEBPACK_IMPORTED_MODULE_4__.is_range)(translated)) {\n                        arrays.push((0,_address_type__WEBPACK_IMPORTED_MODULE_4__.ShiftRange)(translated, -1, -1));\n                    }\n                }\n                if (mapped.v && mapped.v.text) {\n                    const num = Number(mapped.v.text.toString());\n                    if (!isNaN(num)) {\n                        calculated_type = treb_base_types__WEBPACK_IMPORTED_MODULE_2__.ValueType.number;\n                        calculated_value = num;\n                    }\n                    else {\n                        calculated_type = treb_base_types__WEBPACK_IMPORTED_MODULE_2__.ValueType.string;\n                        calculated_value = mapped.v.text.toString();\n                    }\n                }\n            }\n            else if (mapped.v && mapped.v.text) {\n                const num = Number(mapped.v.text.toString());\n                if (!isNaN(num)) {\n                    type = treb_base_types__WEBPACK_IMPORTED_MODULE_2__.ValueType.number;\n                    value = num;\n                }\n                else {\n                    type = treb_base_types__WEBPACK_IMPORTED_MODULE_2__.ValueType.string;\n                    value = mapped.v.text.toString();\n                }\n            }\n        }\n        const shifted = { row: address.row - 1, col: address.col - 1 };\n        // check if we are in an array. we're relying on the fact that \n        // the array head is the top-left, which I _think_ is universal,\n        // but perhaps we should check that... although at this point we have \n        // already added the array so we need to check for root\n        for (const array of arrays) {\n            if ((0,_address_type__WEBPACK_IMPORTED_MODULE_4__.InRange)(array, shifted) && (shifted.row !== array.from.row || shifted.col !== array.from.col)) {\n                calculated_type = type;\n                calculated_value = value;\n                value = undefined;\n                type = treb_base_types__WEBPACK_IMPORTED_MODULE_2__.ValueType.undefined;\n            }\n        }\n        const result = {\n            row: shifted.row, column: shifted.col, value, type,\n        };\n        if (typeof calculated_value !== 'undefined') {\n            result.calculated_type = calculated_type;\n            result.calculated = calculated_value;\n        }\n        if (element.attrib.s) {\n            result.style_ref = Number(element.attrib.s);\n        }\n        for (const link of links) {\n            if (link.address.row === address.row && link.address.col === address.col) {\n                result.hyperlink = link.reference;\n                // FIXME: pop?\n            }\n        }\n        for (const range of merges) {\n            if ((0,_address_type__WEBPACK_IMPORTED_MODULE_4__.InRange)(range, shifted)) {\n                result.merge_area = {\n                    start: {\n                        row: range.from.row,\n                        column: range.from.col,\n                    }, end: {\n                        row: range.to.row,\n                        column: range.to.col,\n                    },\n                };\n            }\n        }\n        for (const range of arrays) {\n            if ((0,_address_type__WEBPACK_IMPORTED_MODULE_4__.InRange)(range, shifted)) {\n                result.area = {\n                    start: {\n                        row: range.from.row,\n                        column: range.from.col,\n                    }, end: {\n                        row: range.to.row,\n                        column: range.to.col,\n                    },\n                };\n                /*\n                if (shifted.col !== range.from.col || shifted.row !== range.from.row) {\n                  result.value = undefined;\n                  result.type = ValueType.undefined;\n                }\n                */\n            }\n        }\n        return result;\n    }\n    SheetCount() {\n        return this.workbook.Count();\n    }\n    GetSheet(index = 0) {\n        var _a, _b, _c;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {\n            const sheet = this.workbook.GetSheet(index);\n            sheet.Parse();\n            if (!sheet.dom)\n                throw new Error('missing DOM');\n            // console.info(sheet.options.name);\n            // we want a sparse array\n            const data = [];\n            const shared_formulae = {};\n            const arrays = [];\n            const merges = [];\n            const links = [];\n            const annotations = [];\n            const merge_cells = sheet.dom.find('./mergeCells');\n            if (merge_cells) {\n                for (const child of merge_cells.getchildren()) {\n                    if (child.tag === 'mergeCell' && child.attrib.ref) {\n                        const merge = sheet.TranslateAddress(child.attrib.ref);\n                        if ((0,_address_type__WEBPACK_IMPORTED_MODULE_4__.is_range)(merge)) {\n                            merges.push((0,_address_type__WEBPACK_IMPORTED_MODULE_4__.ShiftRange)(merge, -1, -1));\n                        }\n                    }\n                }\n            }\n            const hyperlinks = sheet.dom.find('./hyperlinks');\n            if (hyperlinks) {\n                for (const child of hyperlinks.getchildren()) {\n                    let address = sheet.TranslateAddress(child.attrib.ref || '');\n                    if ((0,_address_type__WEBPACK_IMPORTED_MODULE_4__.is_range)(address)) {\n                        address = address.from;\n                    }\n                    let text = '';\n                    let reference = '';\n                    if (child.attrib['r:id']) {\n                        text = 'remote link';\n                        reference = '';\n                        if (!sheet.rels_dom) {\n                            sheet.ReadRels();\n                        }\n                        if (sheet.rels_dom) {\n                            const relationship = sheet.rels_dom.find(`./Relationship[@Id='${child.attrib['r:id']}']`);\n                            if (relationship) {\n                                reference = relationship.attrib.Target || '';\n                            }\n                        }\n                        else {\n                            console.warn('missing rels dom!');\n                        }\n                    }\n                    else {\n                        reference = child.attrib.location || '';\n                        text = child.attrib.display || '';\n                    }\n                    links.push({ address, reference, text });\n                }\n            }\n            // let max_column = 0;\n            const row_heights = [];\n            if (sheet.extent) {\n                for (let r = sheet.extent.from.row; r <= sheet.extent.to.row; r++) {\n                    const row = sheet.dom.find(`./sheetData/row/[@r=\"${r}\"]`);\n                    if (row) {\n                        if (row.attrib.ht && row.attrib.customHeight) {\n                            const num = Number(row.attrib.ht);\n                            if (!isNaN(num)) {\n                                row_heights[r - 1] = Math.round(num * 4 / 3); // seems to be the excel unit -> pixel ratio\n                            }\n                        }\n                        for (const child of row.getchildren()) {\n                            const cell = this.ParseCell(sheet, child, shared_formulae, arrays, merges, links);\n                            if (cell) {\n                                data.push(cell);\n                                // max_column = Math.max(max_column, cell.column); // use extent\n                            }\n                        }\n                    }\n                }\n            }\n            let default_row_height = 21;\n            let default_column_width = 100;\n            const sheet_format = sheet.dom.find('./sheetFormatPr');\n            if (sheet_format) {\n                if (sheet_format.attrib.defaultColWidth) {\n                    // defaultColWidth=\"14.28515625\" defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>\n                    const width = Number(sheet_format.attrib.defaultColWidth);\n                    if (!isNaN(width)) {\n                        default_column_width = Math.round(width / one_hundred_pixels * 100);\n                    }\n                }\n                if (sheet_format.attrib.defaultRowHeight) {\n                    const height = Number(sheet_format.attrib.defaultRowHeight);\n                    if (!isNaN(height)) {\n                        default_row_height = Math.round(height * 4 / 3); // ??\n                    }\n                }\n            }\n            const column_styles = [];\n            let default_column_style = -1;\n            const column_widths = [];\n            const columns = sheet.dom.find(`./cols`);\n            if (columns) {\n                for (const child of columns.getchildren()) {\n                    if (child.tag === 'col') {\n                        if (child.attrib.style) {\n                            // console.info(\"COLUMN STYLE\", child);\n                            const style = Number(child.attrib.style);\n                            const min = Number(child.attrib.min);\n                            const max = Number(child.attrib.max);\n                            if (!isNaN(min) && !isNaN(max) && !isNaN(style)) {\n                                // this is not the way to do this? for the time being\n                                // it's OK because style doesn't need to extend past\n                                // extent (but width does)\n                                if (sheet.extent && max >= sheet.extent.to.col || max - min > 100) { // just spitballing on that last one\n                                    default_column_style = style;\n                                }\n                                else {\n                                    for (let i = min; i <= max; i++) {\n                                        column_styles[i] = style;\n                                    }\n                                }\n                            }\n                        }\n                        if (child.attrib.customWidth) {\n                            const min = Number(child.attrib.min);\n                            const max = Number(child.attrib.max);\n                            let width = Number(child.attrib.width);\n                            if (!isNaN(min) && !isNaN(max) && !isNaN(width)) {\n                                if (max === 16384) {\n                                    // ...\n                                }\n                                else {\n                                    // otherwise it will set -> 16384\n                                    // if (sheet.extent) {\n                                    // max = Math.min(max, sheet.extent.to.col + 1);\n                                    // }\n                                    width = Math.round(width / one_hundred_pixels * 100);\n                                    for (let i = min; i <= max; i++)\n                                        column_widths[i - 1] = width;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // annotations (charts)\n            // wip...\n            const drawings = sheet.dom.findall('./drawing');\n            const chart_descriptors = [];\n            if (drawings && drawings.length) {\n                for (const child of drawings) {\n                    if (child.attrib['r:id']) {\n                        let reference = '';\n                        if (!sheet.rels_dom) {\n                            sheet.ReadRels();\n                        }\n                        if (sheet.rels_dom) {\n                            const relationship = sheet.rels_dom.find(`./Relationship[@Id='${child.attrib['r:id']}']`);\n                            if (relationship) {\n                                reference = relationship.attrib.Target || '';\n                            }\n                        }\n                        else {\n                            console.warn('missing rels dom!');\n                        }\n                        if (reference) {\n                            const drawing = yield this.workbook.ReadDrawing(reference);\n                            if (drawing && drawing.length) {\n                                chart_descriptors.push(...drawing);\n                            }\n                        }\n                    }\n                }\n            }\n            const AnchorToCorner = (anchor) => {\n                const result = {\n                    address: {\n                        row: anchor.row,\n                        column: anchor.column,\n                    },\n                    offset: {\n                        x: 0,\n                        y: 0, // anchor.row_offset || 0,    // FIXME: scale\n                    },\n                };\n                if (anchor.row_offset) {\n                    let row_height = row_heights[anchor.row];\n                    if (row_height === undefined) {\n                        row_height = default_row_height; // FIXME\n                    }\n                    result.offset.y = (anchor.row_offset / 9525) / row_height;\n                }\n                if (anchor.column_offset) {\n                    let column_width = column_widths[anchor.column];\n                    if (column_width === undefined) {\n                        column_width = default_column_width;\n                    }\n                    result.offset.x = (anchor.column_offset / 9525) / column_width;\n                }\n                return result;\n            };\n            for (const descriptor of chart_descriptors) {\n                if (descriptor && descriptor.chart) {\n                    // convert the anchor to the annotation type\n                    const layout = {\n                        tl: AnchorToCorner(descriptor.anchor.from),\n                        br: AnchorToCorner(descriptor.anchor.to),\n                    };\n                    let type;\n                    const args = [];\n                    let func = '';\n                    const series = (_a = descriptor.chart) === null || _a === void 0 ? void 0 : _a.series;\n                    switch (descriptor.chart.type) {\n                        case _workbook__WEBPACK_IMPORTED_MODULE_1__.ChartType.Scatter:\n                            type = 'treb-chart';\n                            func = 'Scatter.Line';\n                            if (series && series.length) {\n                                args[0] = `Group(${series.map(s => `Series(${s.title || ''},${s.categories || ''},${s.values || ''})` || '').join(', ')})`;\n                            }\n                            args[1] = descriptor.chart.title;\n                            break;\n                        case _workbook__WEBPACK_IMPORTED_MODULE_1__.ChartType.Donut:\n                        case _workbook__WEBPACK_IMPORTED_MODULE_1__.ChartType.Pie:\n                            func = descriptor.chart.type === _workbook__WEBPACK_IMPORTED_MODULE_1__.ChartType.Donut ? 'Donut.Chart' : 'Pie.Chart';\n                            type = 'treb-chart';\n                            if (series && series[0]) {\n                                args[0] = series[0].values;\n                                args[1] = ((_b = series[0]) === null || _b === void 0 ? void 0 : _b.categories) || '';\n                            }\n                            args[2] = descriptor.chart.title;\n                            break;\n                        case _workbook__WEBPACK_IMPORTED_MODULE_1__.ChartType.Bar:\n                        case _workbook__WEBPACK_IMPORTED_MODULE_1__.ChartType.Column:\n                        case _workbook__WEBPACK_IMPORTED_MODULE_1__.ChartType.Line:\n                            args[2] = descriptor.chart.title;\n                            type = 'treb-chart';\n                            switch (descriptor.chart.type) {\n                                case _workbook__WEBPACK_IMPORTED_MODULE_1__.ChartType.Bar:\n                                    func = 'Bar.Chart';\n                                    break;\n                                case _workbook__WEBPACK_IMPORTED_MODULE_1__.ChartType.Column:\n                                    func = 'Column.Chart';\n                                    break;\n                                default:\n                                    func = 'Line.Chart';\n                            }\n                            if (series) {\n                                if (series.length > 1) {\n                                    args[0] = `Group(${series.map(s => `Series(${s.title || ''},,${s.values || ''})` || '').join(', ')})`;\n                                }\n                                else if (series.length === 1) {\n                                    if (series[0].title) {\n                                        args[0] = `Series(${series[0].title || ''},,${series[0].values || ''})`;\n                                    }\n                                    else {\n                                        args[0] = series[0].values;\n                                    }\n                                }\n                                args[1] = ((_c = series[0]) === null || _c === void 0 ? void 0 : _c.categories) || '';\n                            }\n                            break;\n                    }\n                    const formula = `=${func}(${args.join(', ')})`;\n                    console.info('f', formula);\n                    if (type && formula) {\n                        annotations.push({\n                            layout,\n                            type,\n                            formula,\n                        });\n                    }\n                }\n            }\n            // /wip\n            // we can't look these up directly because of namespacing, which\n            // isn't properly supported... (...)\n            const ext = sheet.dom.find('./extLst/ext');\n            if (ext) {\n                for (const child1 of ext.getchildren()) {\n                    for (const child2 of child1.getchildren()) {\n                        if (/sparklineGroup$/.test(child2.tag.toString())) {\n                            let func = 'Sparkline.line';\n                            let reference = '';\n                            let source = '';\n                            switch (child2.get('type')) {\n                                case 'column':\n                                    func = 'Sparkline.column';\n                                    break;\n                            }\n                            // TODO: gap optional\n                            // TODO: colors\n                            for (const child3 of child2.getchildren()) {\n                                /*\n                                if (/colorSeries$/.test(child3.tag.toString())) {\n                                  const rgb = child3.get('rgb');\n                                  console.info('series', rgb);\n                                }\n                                else if (/colorNegative$/.test(child3.tag.toString())) {\n                                  const rgb = child3.get('rgb');\n                                  console.info('negative', rgb);\n                                }\n                                */\n                                if (/sparklines$/.test(child3.tag.toString())) {\n                                    for (const child4 of child3.getchildren()) {\n                                        if (/sparkline$/.test(child4.tag.toString())) {\n                                            for (const child5 of child4.getchildren()) {\n                                                if (/(?:^|:)f$/.test(child5.tag.toString())) {\n                                                    source = child5.text ? child5.text.toString() : '';\n                                                }\n                                                else if (/sqref$/.test(child5.tag.toString())) {\n                                                    reference = child5.text ? child5.text.toString() : '';\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            if (source && reference) {\n                                const constructed_function = `=${func}(${source})`;\n                                // 1: merges\n                                // 2: maybe already in the list? need to filter\n                                const translated = sheet.TranslateAddress(reference);\n                                if ((0,_address_type__WEBPACK_IMPORTED_MODULE_4__.is_address)(translated)) {\n                                    const result = {\n                                        row: translated.row - 1,\n                                        column: translated.col - 1,\n                                        value: constructed_function,\n                                        type: treb_base_types__WEBPACK_IMPORTED_MODULE_2__.ValueType.formula,\n                                    };\n                                    let matched = false;\n                                    for (const element of data) {\n                                        if (element.row === result.row && element.column === result.column) {\n                                            matched = true;\n                                            element.type = treb_base_types__WEBPACK_IMPORTED_MODULE_2__.ValueType.formula;\n                                            element.value = constructed_function;\n                                            break;\n                                        }\n                                    }\n                                    if (!matched) {\n                                        data.push(result);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            /*\n            const cells = new Cells();\n            cells.FromJSON(data);\n            return cells;\n            */\n            // console.info(\"SS\", sheet.shared_strings);\n            // console.info(\"S\", this.workbook.style_cache, this.workbook.style_cache.CellXfToStyles());\n            const result = {\n                name: sheet.options.name,\n                cells: data,\n                default_column_width,\n                column_widths,\n                row_heights,\n                annotations,\n                styles: this.workbook.style_cache.CellXfToStyles(),\n            };\n            if (sheet.visible_state === _sheet__WEBPACK_IMPORTED_MODULE_3__.VisibleState.hidden || sheet.visible_state === _sheet__WEBPACK_IMPORTED_MODULE_3__.VisibleState.very_hidden) {\n                result.hidden = true;\n            }\n            if (default_column_style >= 0) {\n                result.sheet_style = default_column_style;\n            }\n            if (column_styles.length) {\n                result.column_styles = column_styles;\n            }\n            return result;\n        });\n    }\n}\n\n\n//# sourceURL=webpack://treb/./treb-export/src/import.ts?");

/***/ }),

/***/ "./treb-export/src/shared-strings.ts":
/*!*******************************************!*\
  !*** ./treb-export/src/shared-strings.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SharedStrings\": () => (/* binding */ SharedStrings)\n/* harmony export */ });\n/* harmony import */ var elementtree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! elementtree */ \"./node_modules/elementtree/lib/elementtree.js\");\n\nclass SharedStrings {\n    constructor() {\n        this.map = {};\n        this.len = 0;\n        // reverse map is undefined by default, so it won't be used when\n        // constructing. it should only be used when reading.\n        this.reverse_map = undefined;\n    }\n    /**\n     * get string by index (mapped in reverse)\n     */\n    GetSharedString(index) {\n        if (this.reverse_map) {\n            const check = this.reverse_map[index];\n            if (typeof check !== undefined) {\n                return check;\n            }\n        }\n        for (const key of Object.keys(this.map)) {\n            if (this.map[key] === index)\n                return key;\n        }\n        return undefined;\n    }\n    /**\n     * either add this string to the table or find an existing match.\n     * return the index.\n     */\n    Ensure(s) {\n        let index = this.map[s];\n        if (typeof (index) !== 'undefined') {\n            return index;\n        }\n        index = this.len++;\n        this.map[s] = index;\n        /*\n        if( /<(b|u|i|div|p|br)>/i.test(s)){\n          let nodes = this.tokenizeString(s);\n    \n          let si = et.SubElement( this.strings.dom._root, \"si\" );\n          nodes.forEach(function(node){\n    \n            let r = et.SubElement( si, \"r\" );\n            if( node.state.b || node.state.u || node.state.i || format){\n              let rpr = et.SubElement( r, \"rPr\" );\n              if( node.state.b ) et.SubElement( rpr, \"b\" );\n              if( node.state.i ) et.SubElement( rpr, \"i\" );\n              if( node.state.u ) et.SubElement( rpr, \"u\" );\n    \n              if( format ){\n                let clone = cloneElement(format);\n                clone._children.forEach(child => {\n                  rpr.append(child);\n                });\n              }\n    \n            }\n            let t = et.SubElement( r, \"t\" );\n            if( /^\\s/.test(node.text) || /\\s$/.test(node.text) || /\\n/.test(node.text))\n              t.set(\"{http://www.w3.org/XML/1998/namespace}space\", \"preserve\");\n            t.text = node.text;\n      \n          }, this);\n    \n        }\n        else\n        */\n        {\n            const si = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(this.dom._root, 'si');\n            const t = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(si, 't');\n            t.text = s;\n        }\n        this.dom._root.attrib.count =\n            this.dom._root.attrib.uniqueCount = index + 1;\n        return index;\n    }\n}\n\n\n//# sourceURL=webpack://treb/./treb-export/src/shared-strings.ts?");

/***/ }),

/***/ "./treb-export/src/sheet.ts":
/*!**********************************!*\
  !*** ./treb-export/src/sheet.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"VisibleState\": () => (/* binding */ VisibleState),\n/* harmony export */   \"Sheet\": () => (/* binding */ Sheet)\n/* harmony export */ });\n/* harmony import */ var elementtree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! elementtree */ \"./node_modules/elementtree/lib/elementtree.js\");\n/* harmony import */ var _address_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./address-type */ \"./treb-export/src/address-type.ts\");\n/* harmony import */ var _drawing_drawing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drawing/drawing */ \"./treb-export/src/drawing/drawing.ts\");\n\n\n\n// import { Sparkline } from 'treb-sparkline/src';\n\nvar VisibleState;\n(function (VisibleState) {\n    VisibleState[VisibleState[\"visible\"] = 0] = \"visible\";\n    VisibleState[VisibleState[\"hidden\"] = 1] = \"hidden\";\n    VisibleState[VisibleState[\"very_hidden\"] = 2] = \"very_hidden\";\n})(VisibleState || (VisibleState = {}));\nclass Sheet {\n    constructor(options = {}) {\n        this.options = options;\n        this.tab_selected = false;\n        this.default_width = 0;\n        this.default_column_style = -1;\n        this.tail_width = 0;\n        // private column_style?: any;\n        this.drawings = [];\n        this.next_relationship = 1;\n    }\n    /**\n     * deep copy (via element -> xml -> element)\n     */\n    CloneElement(elt) {\n        return elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(new elementtree__WEBPACK_IMPORTED_MODULE_0__.ElementTree(elt).write({ xml_declaration: false })).getroot();\n    }\n    /**\n     * A1 -> {row: 1, col: 1} etc.\n     * in the event of a range, { from: {}, to: {} }\n     */\n    TranslateAddress(s) {\n        s = s.toUpperCase();\n        let m = s.match(/([A-Z]+\\d+):([A-Z]+\\d+)/);\n        if (m) {\n            return {\n                from: this.TranslateAddress(m[1]),\n                to: this.TranslateAddress(m[2]),\n            };\n        }\n        let row = 0;\n        let col = 0;\n        m = s.match(/^([A-Z]+)(\\d+)$/);\n        if (m) {\n            row = Number(m[2]);\n            col = 0;\n            const len = m[1].length;\n            for (let i = 0; i < len; i++) {\n                const c = (m[1].charCodeAt(i) - 64);\n                col = col * 26 + c;\n            }\n        }\n        return { row, col };\n    }\n    /**\n     * { row: 1, col: 1 } -> A1.\n     * for ranges, {from: {}, to: {}} -> A1:B2\n     */\n    Address(r, absolute = false) {\n        if ((0,_address_type__WEBPACK_IMPORTED_MODULE_1__.is_range)(r)) {\n            return this.Address(r.from, absolute) + ':' + this.Address(r.to, absolute);\n        }\n        let c = '';\n        let col = r.col;\n        while (col > 0) {\n            const x = ((col - 1) % 26) + 1;\n            c = String.fromCharCode(64 + x) + c;\n            col = (col - x) / 26;\n        }\n        const s = r.sheet ? `'${r.sheet}'!` : '';\n        if (absolute) {\n            return `${s}$${c}$${r.row}`;\n        }\n        return s + c + r.row;\n    }\n    /**\n     * convert an address (either style) to BOTH A1 and R1C1\n     */\n    NormalizeAddress(rng) {\n        let a;\n        let rc;\n        if (typeof rng === 'string') {\n            a = rng.toUpperCase();\n            rc = this.TranslateAddress(a);\n        }\n        else {\n            rc = rng;\n            a = this.Address(rc);\n        }\n        return { a, rc };\n    }\n    ReadRels() {\n        if (this.rels_dom) {\n            return;\n        }\n        if (!this.rels_xml) {\n            console.warn('missing rels xml');\n            return;\n        }\n        this.rels_dom = elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(this.rels_xml);\n        if (!this.rels_dom) {\n            throw new Error('parsing rels dom failed');\n        }\n    }\n    /**\n     * xml string -> dom, get dimension ref\n     */\n    Parse() {\n        if (this.dom)\n            return;\n        if (!this.xml)\n            throw new Error('sheet missing xml');\n        this.dom = elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(this.xml);\n        if (!this.dom)\n            throw new Error('parsing dom failed');\n        const dim = this.dom.find('./dimension');\n        if (!dim)\n            throw new Error('missing dimension');\n        const extent = this.TranslateAddress(dim.attrib.ref || '');\n        // ensure this is from, to; we can clean up later if ===\n        if ((0,_address_type__WEBPACK_IMPORTED_MODULE_1__.is_range)(extent)) {\n            this.extent = JSON.parse(JSON.stringify(extent));\n        }\n        else {\n            this.extent = {\n                from: JSON.parse(JSON.stringify(extent)),\n                to: JSON.parse(JSON.stringify(extent)),\n            };\n        }\n    }\n    Finalize() {\n        if (!this.dom)\n            throw new Error('can\\'t call finalize without parse');\n        // tab selected\n        const sheet_view = this.dom.find('./sheetViews/sheetView');\n        if (sheet_view) {\n            sheet_view.attrib.tabSelected = this.tab_selected ? '1' : '0';\n        }\n        // columns\n        this.UnmapColumnWidths();\n        // fix extent.  don't use a range for 1 cell.\n        const dim = this.dom.find('./dimension');\n        if (dim && this.extent) {\n            if (this.extent.from.row === this.extent.to.row &&\n                this.extent.from.col === this.extent.to.col) {\n                dim.attrib.ref = this.Address(this.extent.from);\n            }\n            else {\n                dim.attrib.ref = this.Address(this.extent);\n            }\n        }\n    }\n    /** remove all merges */\n    ResetMerges() {\n        if (!this.dom)\n            throw new Error('missing dom');\n        const mc = this.dom.find(`./mergeCells`);\n        if (!mc) {\n            return;\n        }\n        const root = this.dom.getroot();\n        root._children = root._children.filter((test) => test !== mc);\n    }\n    /**\n     * this adds the mergeCells/mergeCell entry. you still (apparently) need\n     * empty cell references for every cell in the merge area, so add those\n     * (separately).\n     *\n     * NOTE order matters. must be after sheetData and before pageMargins.\n     * FIXME: what about hyperlinks? (...)\n     *\n     * @param range\n     */\n    AddMerge(range) {\n        if (!this.dom)\n            throw new Error('missing dom');\n        let mc = this.dom.find(`./mergeCells`);\n        if (!mc) {\n            // console.info('no mc found (adding)');\n            mc = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('mergeCells');\n            const root = this.dom.getroot();\n            const children = [];\n            for (const child of root._children) {\n                children.push(child);\n                if (child.tag === 'sheetData') {\n                    children.push(mc);\n                }\n            }\n            root._children = children;\n        }\n        const count = Number(mc.attrib.count || 0) + 1;\n        mc.attrib.count = count.toString();\n        const merge = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(mc, 'mergeCell');\n        merge.attrib.ref = range;\n    }\n    CreateRelationships() {\n        const rels = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"/>`;\n        return elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(rels);\n    }\n    /**\n     * this is part (3) from docs/charts.md -- add a chart node to sheet.\n     * NOTE: we're basing the _rels number here on drawings only. should\n     * switch to an internal counter... (done; we need it for hyperlinks too)\n     */\n    AddChart(anchor, options) {\n        if (!this.dom)\n            throw new Error('missing dom');\n        let drawing = this.drawings[0];\n        if (!drawing) {\n            drawing = new _drawing_drawing__WEBPACK_IMPORTED_MODULE_2__.Drawing(); // anchor, false, false, options);\n            const relationship = this.next_relationship++;\n            drawing.sheet_drawing_relationship = relationship;\n            this.drawings.push(drawing);\n            const drawing_node = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('drawing');\n            drawing_node.attrib['r:id'] = `rId${relationship}`;\n            const root = this.dom.getroot();\n            root.append(drawing_node);\n            // create new rels if necessary\n            if (!this.rels_dom) {\n                this.rels_dom = this.CreateRelationships();\n            }\n            elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(this.rels_dom.getroot(), 'Relationship', {\n                Id: `rId${drawing.sheet_drawing_relationship}`,\n                Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',\n                Target: `../drawings/drawing${drawing.index}.xml`,\n            });\n        }\n        drawing.AddChart(options, anchor);\n    }\n    /**\n     * set range.  if the range is more than one cell, val can be either\n     * a single value (repeated) or an array (2d).\n     *\n     * FIXME: support 1d array if the range is one-wide or one-deep.\n     * just for convenience.\n     *\n     * opts: {\n     *  ?style: val,\n     *  ?preserveStyle: bool\n     * }\n     *\n     */\n    SetRange(rng, val, options = {}) {\n        if (!this.dom)\n            throw new Error('missing dom');\n        const { a, rc } = this.NormalizeAddress(rng);\n        if ((0,_address_type__WEBPACK_IMPORTED_MODULE_1__.is_range)(rc)) {\n            rc.from = this.NormalizeAddress(rc.from).rc;\n            rc.to = this.NormalizeAddress(rc.to).rc;\n            // split just so we don't have to repeat the test\n            if (null != val && Array.isArray(val)) { // IE11? [A: yes]\n                let sr = 0;\n                for (let r = rc.from.row; r <= rc.to.row; r++, sr++) {\n                    let sc = 0;\n                    for (let c = rc.from.col; c <= rc.to.col; c++, sc++) {\n                        this.SetRange({ row: r, col: c }, val[sr][sc], options);\n                    }\n                }\n            }\n            else {\n                for (let r = rc.from.row; r <= rc.to.row; r++) {\n                    for (let c = rc.from.col; c <= rc.to.col; c++) {\n                        this.SetRange({ row: r, col: c }, val, options);\n                    }\n                }\n            }\n            return;\n        }\n        if (typeof val === 'undefined' && !options.merge && (options.precalc === undefined) && typeof options.style !== 'undefined') {\n            // console.info('decorated, setting empty string', rng);\n            val = '';\n        }\n        const remove = (val == null && // note == null matches undefined as well\n            (typeof options.merge === 'undefined') &&\n            (typeof options.style === 'undefined') &&\n            (typeof options.precalc === 'undefined'));\n        if (!remove)\n            this.EnsureExtent(rc);\n        let row = this.dom.find(`./sheetData/row/[@r=\"${rc.row}\"]`);\n        if (!row) {\n            if (remove) {\n                return; // ok\n            }\n            // add row. FIXME: spans\n            const sheet_data = this.dom.find('./sheetData');\n            if (sheet_data) {\n                row = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(sheet_data, 'row');\n                row.set('r', String(rc.row));\n                // sort rows\n                sheet_data._children.sort((a, b) => {\n                    return Number(a.attrib.r) - Number(b.attrib.r);\n                });\n            }\n        }\n        if (!row)\n            throw new Error('adding row failed');\n        // removing?\n        if (remove) {\n            row._children = row._children.filter((child) => {\n                return !(child.tag === 'c' && child.attrib.r === a);\n            });\n            return;\n        }\n        let cell = row.find(`c/[@r=\"${a}\"]`);\n        if (!cell) {\n            // add cell\n            cell = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(row, 'c');\n            cell.set('r', a);\n            // sort cols.  can we cache these values somewhere?\n            row._children.sort((a, b) => {\n                const arc = this.TranslateAddress(a.attrib.r || '');\n                const brc = this.TranslateAddress(b.attrib.r || '');\n                return arc.col - brc.col;\n            });\n        }\n        if (options.merge && !val) {\n            console.info('exiting on merge and !value');\n            return;\n        }\n        cell._children = [];\n        cell.tail = null;\n        // FIXME: I don't think this is necessary for s=\"0\"\n        if (typeof options.style !== 'undefined') {\n            cell.attrib.s = options.style.toString();\n        }\n        else if (options.preserveStyle || (typeof options.preserveStyle === 'undefined')) {\n            // do nothing\n        }\n        else {\n            delete cell.attrib.s;\n        }\n        if (cell.attrib.t)\n            delete (cell.attrib.t);\n        if (typeof val === 'undefined' && options.precalc !== undefined) {\n            val = options.precalc;\n        }\n        if (options.type === 'string' || isNaN(val)) { // test for string (vs. number)\n            if (val[0] === '=') {\n                const f = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(cell, 'f');\n                f.text = val.substr(1);\n                if (options.array) {\n                    f.attrib.t = 'array';\n                    f.attrib.ref = options.array;\n                }\n                if (typeof options.precalc !== 'undefined') {\n                    val = options.precalc;\n                    if (typeof val === 'string') {\n                        cell.attrib.t = 'str';\n                    }\n                    else if (typeof val === 'boolean') {\n                        cell.attrib.t = 'b';\n                        val = val ? 1 : 0;\n                    }\n                }\n                else {\n                    return;\n                }\n            }\n            else if (typeof options.precalc !== 'undefined') {\n                if (typeof val === 'string') {\n                    cell.attrib.t = 'str';\n                }\n            }\n            else if (this.shared_strings) {\n                if (val[0] === '\\'') {\n                    val = val.slice(1);\n                }\n                val = this.shared_strings.Ensure(val); // , opts.rPr);\n                cell.attrib.t = 's';\n            }\n        }\n        else if (typeof val === 'boolean') {\n            cell.attrib.t = 'b';\n            val = val ? 1 : 0;\n        }\n        const v = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(cell, 'v');\n        // set string 0 on value 0, otherwise xml lib will drop\n        // FIXME: this might be genericized into always using strings.\n        v.text = (val === 0 ? '0' : val);\n    }\n    /**\n     * pad out the \"dimension\" to ensure excel reads all the data.\n     * this will get written on finalize().\n     */\n    EnsureExtent(rc) {\n        if (!this.extent) {\n            throw new Error('missing extent');\n        }\n        this.extent.from.row = Math.min(this.extent.from.row, rc.row);\n        this.extent.from.col = Math.min(this.extent.from.col, rc.col);\n        this.extent.to.row = Math.max(this.extent.to.row, rc.row);\n        this.extent.to.col = Math.max(this.extent.to.col, rc.col);\n    }\n    /**\n     * remove cache.  will force update.\n     */\n    RemoveCache(rng) {\n        if (!this.dom)\n            throw new Error('missing dom');\n        const { a, rc } = this.NormalizeAddress(rng);\n        if ((0,_address_type__WEBPACK_IMPORTED_MODULE_1__.is_range)(rc)) {\n            for (let r = rc.from.row; r <= rc.to.row; r++) {\n                for (let c = rc.from.col; c <= rc.to.col; c++) {\n                    this.RemoveCache({ row: r, col: c });\n                }\n            }\n            return;\n        }\n        const row = this.dom.find(`./sheetData/row/[@r=\"${rc.row}\"]`);\n        if (!row) {\n            return;\n        }\n        const cell = row.find(`c/[@r=\"${a}\"]`);\n        if (!cell) {\n            return;\n        }\n        cell._children = cell._children.filter((child) => {\n            return (child.tag !== 'v');\n        });\n    }\n    /**\n     * updated to use the table\n     *\n     * FIXME: why undefined? should return default. also, what's up with\n     * both tail and default?\n     */\n    GetColumnWidth(col) {\n        this.MapColumnWidths();\n        if (this.column_widths) {\n            if (col >= this.column_widths.length)\n                return this.tail_width;\n            return this.column_widths[col];\n        }\n    }\n    /**\n     * set row height. does not do anything if the row does not exist,\n     * so call this after creating data.\n     *\n     * FIXME: make it work for empty rows\n     */\n    SetRowHeight(row, height) {\n        if (this.dom) {\n            const element = this.dom.find(`./sheetData/row/[@r=\"${row}\"]`);\n            if (element) {\n                element.attrib.ht = height.toString();\n                element.attrib.customHeight = '1';\n            }\n        }\n    }\n    AddValidations(validations) {\n        if (!this.dom) {\n            return;\n        }\n        let container = this.dom.find('./dataValidations');\n        if (!container) {\n            // this has to be BEFORE pageMargins.\n            container = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('dataValidations');\n            const root = this.dom.getroot();\n            const children = [];\n            for (const child of root._children) {\n                children.push(child);\n                if (child.tag === 'sheetData') {\n                    children.push(container);\n                }\n            }\n            root._children = children;\n        }\n        for (const validation of validations) {\n            const element = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(container, 'dataValidation', {\n                type: 'list',\n                allowBlank: '1',\n                showInputMessage: '1',\n                showErrorMessage: '1',\n                sqref: this.Address({ row: validation.row, col: validation.column }),\n                // 'xr:uid': '{A8CDB049-08EC-4F94-ABD3-DDB8FE664C33}',\n            });\n            const formula = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(element, 'formula1');\n            formula.text = validation.formula;\n        }\n        container.set('count', container.getchildren().length.toString());\n    }\n    AddHyperlinks(links) {\n        if (!this.dom) {\n            return;\n        }\n        let hyperlinks_node = this.dom.find('./hyperlinks');\n        if (!hyperlinks_node) {\n            // have to ensure that it gets put after \"sheetData\" and before \"pageMargins\"\n            // or it will _not_ work. \n            //\n            // FIXME: what about mergeCells, which has the same issue?\n            hyperlinks_node = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('hyperlinks');\n            const root = this.dom.getroot();\n            const children = [];\n            for (const child of root._children) {\n                children.push(child);\n                if (child.tag === 'sheetData') {\n                    children.push(hyperlinks_node);\n                }\n            }\n            root._children = children;\n        }\n        for (const link of links) {\n            const ref = this.Address({ row: link.row, col: link.column });\n            if (/^https{0,1}:\\/\\//i.test(link.reference)) {\n                // external URL\n                // create element\n                const relationship = this.next_relationship++;\n                elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(hyperlinks_node, 'hyperlink', {\n                    ref,\n                    'r:id': `rId${relationship}`,\n                });\n                // create new rels if necessary\n                if (!this.rels_dom) {\n                    this.rels_dom = this.CreateRelationships();\n                }\n                // add relationship\n                elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(this.rels_dom.getroot(), 'Relationship', {\n                    Id: `rId${relationship}`,\n                    Type: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink',\n                    Target: link.reference,\n                    TargetMode: 'External',\n                });\n            }\n            else {\n                // document reference\n                // create element\n                elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(hyperlinks_node, 'hyperlink', {\n                    ref,\n                    location: link.reference,\n                    display: link.text,\n                });\n            }\n        }\n    }\n    AddSparklines(expressions) {\n        if (!this.dom) {\n            return;\n        }\n        //console.info(expressions);\n        let extLst = this.dom.find('./extLst');\n        if (!extLst) {\n            extLst = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(this.dom.getroot(), 'extLst');\n        }\n        const ext = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(extLst, 'ext', {\n            uri: '{05C60535-1F16-4fd2-B633-F4F36F0B64E0}',\n            'xmlns:x14': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/main',\n        });\n        const groups = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(ext, 'x14:sparklineGroups', {\n            'xmlns:xm': 'http://schemas.microsoft.com/office/excel/2006/main',\n        });\n        for (const element of expressions) {\n            const group = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(groups, 'x14:sparklineGroup', {\n                displayEmptyCellsAs: 'gap',\n                'xr2:uid': '{A7934558-D60A-4B70-ABDB-3FEABAFEBB5B}',\n            });\n            if (element.expression.name.toLowerCase() === 'sparkline.column') {\n                group.set('type', 'column');\n            }\n            /*\n            let color = Sparkline.SingleColor[0];\n            if (element.expression.args.length > 1 &&\n                element.expression.args[1].type === 'literal' &&\n                typeof element.expression.args[1].value === 'string') {\n              color = element.expression.args[1].value;\n            }\n            */\n            elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(group, 'x14:colorSeries', { rgb: 'FF376092' });\n            elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(group, 'x14:colorNegative', { rgb: 'FFD00000' });\n            elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(group, 'x14:colorAxis', { rgb: 'FF000000' });\n            elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(group, 'x14:colorMarkers', { rgb: 'FFD00000' });\n            elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(group, 'x14:colorFirst', { rgb: 'FFD00000' });\n            elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(group, 'x14:colorLast', { rgb: 'FFD00000' });\n            elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(group, 'x14:colorHigh', { rgb: 'FFD00000' });\n            elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(group, 'x14:colorLow', { rgb: 'FFD00000' });\n            const sparklines = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(group, 'x14:sparklines');\n            const sparkline = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(sparklines, 'x14:sparkline');\n            const f = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(sparkline, 'xm:f');\n            if (/!/.test(element.reference)) {\n                f.text = element.reference;\n            }\n            else {\n                let name = this.options.name || '';\n                if (/[\\s]/.test(name)) {\n                    name = '\"' + name + '\"';\n                }\n                f.text = name + '!' + element.reference;\n            }\n            const sqref = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(sparkline, 'xm:sqref');\n            sqref.text = this.Address({ row: element.row, col: element.column });\n        }\n    }\n    SetDefaultColumnStyle(style) {\n        this.default_column_style = style;\n    }\n    SetRowStyleIndex(rows, style) {\n        if (!this.dom) {\n            throw new Error('missing dom');\n        }\n        if (!Array.isArray(rows)) {\n            rows = [rows];\n        }\n        const sheet_data = this.dom.find('./sheetData');\n        let sort = false;\n        for (const index of rows) {\n            let row = this.dom.find(`./sheetData/row/[@r=\"${index}\"]`);\n            if (!row) {\n                if (sheet_data) {\n                    row = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(sheet_data, 'row');\n                    row.set('r', index.toString());\n                    sort = true;\n                }\n            }\n            row === null || row === void 0 ? void 0 : row.set('customFormat', '1');\n            row === null || row === void 0 ? void 0 : row.set('s', style.toString());\n        }\n        if (sort) {\n            // sort rows\n            sheet_data._children.sort((a, b) => {\n                return Number(a.attrib.r) - Number(b.attrib.r);\n            });\n        }\n    }\n    SetColumnStyleIndex(columns, style) {\n        if (!this.column_styles) {\n            this.column_styles = [];\n        }\n        if (!Array.isArray(columns)) {\n            columns = [columns];\n        }\n        for (const column of columns) {\n            this.column_styles[column] = style;\n        }\n    }\n    /**\n     * updated to use the table\n     */\n    SetColumnWidth(col, width) {\n        this.MapColumnWidths();\n        if (this.column_widths) {\n            if (Array.isArray(col)) {\n                for (const c of col)\n                    this.column_widths[c] = width;\n            }\n            else\n                this.column_widths[col] = width;\n        }\n    }\n    /**\n     * unmap column widths from the table\n     * UPDATE: use style, too\n     */\n    UnmapColumnWidths() {\n        if (!this.column_widths || !this.column_widths.length) {\n            return; // not necessary\n        }\n        if (!this.dom) {\n            throw new Error('missing dom');\n        }\n        let cols = this.dom.find('./cols');\n        if (!cols) {\n            cols = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('cols');\n            const root = this.dom.getroot();\n            const children = [];\n            for (const child of root._children) {\n                if (child.tag === 'sheetData') {\n                    children.push(cols);\n                }\n                children.push(child);\n            }\n            root._children = children;\n        }\n        cols._children = [];\n        let col;\n        let start = 1;\n        let width = typeof this.column_widths[1] === 'undefined' ?\n            this.default_width : this.column_widths[1];\n        // so this is written as blocks of columns of the same width,\n        // finishing with a block that ends in column 16384.\n        // columns are 1-based.\n        const blocks = [];\n        let max = this.column_widths.length;\n        if (this.extent)\n            max = Math.max(this.extent.to.col, max);\n        for (col = 1; col < max; col++) {\n            let cmp = this.column_widths[col];\n            if (null == cmp)\n                cmp = this.default_width;\n            if (cmp !== width) {\n                blocks.push({ min: start, max: col - 1, width });\n                width = cmp;\n                start = col;\n            }\n        }\n        if (width !== this.default_width) {\n            blocks.push({ min: start, max: start, width });\n            blocks.push({ min: max, max: 16384, width: this.default_width });\n        }\n        else {\n            blocks.push({ min: start, max: 16384, width });\n        }\n        for (const block of blocks) {\n            const node = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('col', {\n                min: block.min.toString(),\n                max: block.max.toString(),\n                width: block.width.toString(), // style: this.column_style,\n            });\n            // if (typeof this.column_style !== 'undefined') node.attrib.style = this.column_style;\n            if (this.default_column_style >= 0) {\n                node.attrib.style = this.default_column_style.toString();\n            }\n            if (width !== this.default_width) {\n                node.attrib.customWidth = '1';\n                if (width === 0)\n                    node.attrib.hidden = '1';\n            }\n            cols._children.push(node);\n        }\n    }\n    /**\n     * cache these to simplify processing.  we'll need to rebuild in finalize().\n     */\n    MapColumnWidths() {\n        if (this.column_widths)\n            return;\n        if (!this.dom)\n            throw new Error('missing dom');\n        // create an empty slot for zero, so indexes match columns\n        this.column_widths = [0];\n        // set default tail width: may not be set otherwise\n        this.tail_width = 9.140625;\n        const cols = this.dom.find('./cols');\n        let default_width_set = false;\n        if (!cols) {\n            this.column_widths = [];\n            this.default_width = 10; // 9.140625;\n            this.tail_width = this.default_width;\n            return;\n        }\n        for (const col of cols._children) {\n            if (null != col.attrib.style) {\n                //if (this.column_style && this.column_style !== col.attrib.style) {\n                //  console.warn(' ** multiple column styles');\n                //}\n                this.default_column_style = Number(col.attrib.style);\n            }\n            const min = Number(col.attrib.min || 0);\n            const max = Number(col.attrib.max || 0);\n            const width = Number(col.attrib.width || 0);\n            if (null == col.attrib.customWidth) { // allow 0\n                if (this.default_width && this.default_width !== width) {\n                    console.warn('Multiple default widths?', this.default_width, width);\n                }\n                this.default_width = width;\n                default_width_set = true;\n            }\n            if (max === 16384) {\n                this.tail_width = width;\n            }\n            else {\n                for (let i = min; i <= max; i++)\n                    this.column_widths[i] = width;\n            }\n        }\n        if (!default_width_set)\n            this.default_width = 9.140625;\n    }\n}\n\n\n//# sourceURL=webpack://treb/./treb-export/src/sheet.ts?");

/***/ }),

/***/ "./treb-export/src/style.ts":
/*!**********************************!*\
  !*** ./treb-export/src/style.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StyleCache\": () => (/* binding */ StyleCache)\n/* harmony export */ });\n/* harmony import */ var elementtree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! elementtree */ \"./node_modules/elementtree/lib/elementtree.js\");\n/* harmony import */ var treb_base_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! treb-base-types */ \"./treb-base-types/src/index.ts\");\n/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./theme */ \"./treb-export/src/theme.ts\");\n/* harmony import */ var treb_format__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! treb-format */ \"./treb-format/src/index.ts\");\n\n\n\n\n\nclass StyleCache {\n    constructor() {\n        this.theme = new _theme__WEBPACK_IMPORTED_MODULE_2__.Theme();\n        this.cell_xfs = [];\n        this.fonts = [];\n        this.borders = [];\n        this.fills = [];\n        this.number_formats = [];\n        this.base_number_format_id = 200; // ?\n        this.modified = false;\n    }\n    Clamp(value, min, max) {\n        return Math.max(min, Math.min(value, max));\n    }\n    TintColor(base, tint) {\n        let r = parseInt(base.substr(0, 2), 16);\n        let g = parseInt(base.substr(2, 2), 16);\n        let b = parseInt(base.substr(4, 2), 16);\n        if (tint < 0) {\n            r = Math.round(r * tint + r);\n            g = Math.round(g * tint + g);\n            b = Math.round(b * tint + b);\n        }\n        else {\n            r = Math.round((255 - r) * tint + r);\n            g = Math.round((255 - g) * tint + g);\n            b = Math.round((255 - b) * tint + b);\n        }\n        return [r, g, b].map((x) => {\n            const s = this.Clamp(x, 0, 255).toString(16);\n            return s.length < 2 ? ('0' + s) : s;\n        }).join('');\n    }\n    /// \n    StyleOptionsFromProperties(source) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const composite = JSON.parse(JSON.stringify(source));\n        for (const key of Object.keys(composite)) {\n            if (composite[key] === 'none') {\n                delete composite[key];\n            }\n        }\n        const font = {};\n        const fill = { pattern_type: 'none' };\n        const border = {};\n        const options = {\n            font, border,\n        };\n        if (composite.number_format) {\n            // we have some symbolic number formats that we'll need to\n            // translate. these are defined by the cache.\n            options.number_format = {\n                format: treb_format__WEBPACK_IMPORTED_MODULE_3__.NumberFormatCache.Translate(composite.number_format),\n                symbolic_name: composite.number_format, // for reference later\n            };\n        }\n        if (composite.font_size_unit && composite.font_size_value) {\n            if (composite.font_size_unit !== 'pt') {\n                console.warn(`can't handle non-point font (FIXME)`);\n            }\n            else {\n                font.size = composite.font_size_value;\n            }\n        }\n        if (composite.font_bold)\n            font.bold = true;\n        if (composite.font_italic)\n            font.italic = true;\n        if (composite.font_underline)\n            font.underline = true;\n        //if (composite.text_color && composite.text_color !== Style.DefaultProperties.text_color) {\n        //  font.color_argb = composite.text_color;\n        //}\n        if (composite.text) {\n            if (composite.text.text) {\n                font.color_argb = composite.text.text;\n            }\n            else if (typeof composite.text.theme === 'number') {\n                font.color_theme = composite.text.theme;\n                if (composite.text.tint) {\n                    font.color_tint = composite.text.tint;\n                }\n            }\n        }\n        if (composite.border_top && composite.border_top_fill) {\n            border.top_style = 'thin';\n            if ((_a = composite.border_top_fill) === null || _a === void 0 ? void 0 : _a.text) {\n                border.top_color_rgba = composite.border_top_fill.text;\n            }\n            else if (typeof ((_b = composite.border_top_fill) === null || _b === void 0 ? void 0 : _b.theme) === 'number') {\n                border.top_color_theme = composite.border_top_fill.theme;\n                if (composite.border_top_fill.tint) {\n                    border.top_color_tint = composite.border_top_fill.tint;\n                }\n            }\n            else {\n                border.top_color = 64;\n            }\n        }\n        if (composite.border_bottom && composite.border_bottom_fill) {\n            if (composite.border_bottom > 1) {\n                border.bottom_style = 'double';\n            }\n            else {\n                border.bottom_style = 'thin';\n            }\n            if ((_c = composite.border_bottom_fill) === null || _c === void 0 ? void 0 : _c.text) {\n                border.bottom_color_rgba = composite.border_bottom_fill.text;\n            }\n            else if (typeof ((_d = composite.border_bottom_fill) === null || _d === void 0 ? void 0 : _d.theme) === 'number') {\n                border.bottom_color_theme = composite.border_bottom_fill.theme;\n                if (composite.border_bottom_fill.tint) {\n                    border.bottom_color_tint = composite.border_bottom_fill.tint;\n                }\n            }\n            else {\n                border.bottom_color = 64;\n            }\n        }\n        if (composite.border_left && composite.border_left_fill) {\n            border.left_style = 'thin';\n            if ((_e = composite.border_left_fill) === null || _e === void 0 ? void 0 : _e.text) {\n                border.left_color_rgba = composite.border_left_fill.text;\n            }\n            else if (typeof ((_f = composite.border_left_fill) === null || _f === void 0 ? void 0 : _f.theme) === 'number') {\n                border.left_color_theme = composite.border_left_fill.theme;\n                if (composite.border_left_fill.tint) {\n                    border.left_color_tint = composite.border_left_fill.tint;\n                }\n            }\n            else {\n                border.left_color = 64;\n            }\n        }\n        if (composite.border_right && composite.border_right_fill) {\n            border.right_style = 'thin';\n            if ((_g = composite.border_right_fill) === null || _g === void 0 ? void 0 : _g.text) {\n                border.right_color_rgba = composite.border_right_fill.text;\n            }\n            else if (typeof ((_h = composite.border_right_fill) === null || _h === void 0 ? void 0 : _h.theme) === 'number') {\n                border.right_color_theme = composite.border_right_fill.theme;\n                if (composite.border_right_fill.tint) {\n                    border.right_color_tint = composite.border_right_fill.tint;\n                }\n            }\n            else {\n                border.right_color = 64;\n            }\n        }\n        // leave blank for bottom, default\n        switch (composite.vertical_align) {\n            case treb_base_types__WEBPACK_IMPORTED_MODULE_1__.Style.VerticalAlign.Top:\n                options.vertical_alignment = 'top';\n                break;\n            case treb_base_types__WEBPACK_IMPORTED_MODULE_1__.Style.VerticalAlign.Middle:\n                options.vertical_alignment = 'center';\n                break;\n        }\n        switch (composite.horizontal_align) {\n            case treb_base_types__WEBPACK_IMPORTED_MODULE_1__.Style.HorizontalAlign.Center:\n                options.horizontal_alignment = 'center';\n                break;\n            case treb_base_types__WEBPACK_IMPORTED_MODULE_1__.Style.HorizontalAlign.Left:\n                options.horizontal_alignment = 'left';\n                break;\n            case treb_base_types__WEBPACK_IMPORTED_MODULE_1__.Style.HorizontalAlign.Right:\n                options.horizontal_alignment = 'right';\n                break;\n        }\n        if (composite.fill) {\n            fill.pattern_type = 'solid';\n            if (composite.fill.text) {\n                fill.fg_color = { argb: composite.fill.text };\n            }\n            else if (typeof composite.fill.theme === 'number') {\n                fill.fg_color = { theme: composite.fill.theme };\n                if (composite.fill.tint) {\n                    fill.fg_color.tint = composite.fill.tint;\n                }\n            }\n            else {\n                fill.fg_color = { theme: 1 };\n            }\n            options.fill = fill;\n        }\n        if (composite.wrap) {\n            options.wrap = true;\n        }\n        return options;\n    }\n    ///\n    CellXfToStyle(xf) {\n        const props = {};\n        // number format\n        let format_string = StyleCache.default_styles[xf.number_format];\n        if (!format_string) {\n            for (const candidate of this.number_formats) {\n                if (candidate.id === xf.number_format) {\n                    if (candidate.format) {\n                        format_string = candidate.format;\n                        break;\n                    }\n                }\n            }\n        }\n        if (format_string) {\n            // Excel uses number formats like \n            // #,##0.00\\ [$€-40C];[Red]\\-#,##0.00\\ [$€-40C]\n            // [$¥-411]#,##0;[Red]\\-[$¥-411]#,##0\n            // _(\"$\"* #,##0_);_(\"$\"* \\(#,##0\\);_(\"$\"* \"-\"??_);_(@_)\n            // where [$¥-411] encodes a yen symbol, [$€-40C] is the euro, &c.\n            // I have no idea what that encoding is, or where it comes from\n            // (can't find it in Excel documentation; should probably check OOo).\n            // for the time being we will just drop, and assume the symbol\n            // (in position 2) is correct. are we sure there are always 3 hex\n            // characters? and always negative? (...)\n            // OK, got it, these are Microsoft LCIDs in hex. so the format seems to be:\n            // \n            // square bracket, dollar sign, symbol, hyphen, hex LCID, square bracket\n            //\n            // we can safely drop this for now, AFAIAC. LCID seems to be (in hex) \n            // usually 3-4 digits, but I suppose lower is conceivable.\n            const encoding_regex = /\\[\\$(.)-[0-9A-Za-z]{1,4}\\]/g;\n            format_string = format_string.replace(encoding_regex, '$1');\n            // there are also locale indicators with no symbol -- we can remove these\n            // for now, but we need to consider how to deal with them. (...)\n            // also this could be merged with the above.\n            const locale_regex = /\\[\\$-[0-9A-Za-z]{1,4}\\]/g;\n            format_string = format_string.replace(locale_regex, '');\n            props.number_format = format_string;\n        }\n        // font attributes (atm we are ignoring size, face)\n        const font = this.fonts[xf.font || 0];\n        if (font) {\n            if (font.bold)\n                props.font_bold = true;\n            if (font.italic)\n                props.font_italic = true;\n            if (font.underline)\n                props.font_underline = true;\n            if (font.strike)\n                props.font_strike = true;\n            if (font.color_argb) {\n                props.text = {\n                    text: '#' + (font.color_argb.length > 6 ?\n                        font.color_argb.substr(font.color_argb.length - 6) :\n                        font.color_argb)\n                };\n            }\n            else if (typeof font.color_theme === 'number') {\n                // const index = Theme.color_map[];\n                // skipping 0, it's implicit\n                if (font.color_theme) {\n                    props.text = { theme: font.color_theme };\n                }\n                /*\n                // FIXME: update to theme\n                console.warn('update to theme colors');\n        \n                const index = Theme.color_map[font.color_theme];\n                const color = this.theme.colors[index];\n        \n                // why was I _not_ accepting system here? (...) there's an argument\n                // against system 1 -> default...\n                \n                if (color && color.type !== 'system' && color.value) {\n                  if (typeof font.color_tint === 'number') {\n                    props.text = '#' + this.TintColor(color.value, font.color_tint);\n                  }\n                  else {\n                    props.text = '#' + color.value;\n                  }\n                }\n        \n                else if (color && color.type === 'system' && color.value) {\n        \n                  // let's drop color index 1, as that should be default? (...)\n                  // should do this higher up\n        \n                  if (font.color_theme !== 1) {\n                    props.text = '#' + color.value;\n                  }\n                }\n                */\n            }\n        }\n        const fill = this.fills[xf.fill || 0];\n        if (fill && fill.pattern_type !== 'none') {\n            if (fill.pattern_type === 'gray') {\n                const value = Math.round((fill.pattern_gray || 0) / 1000 * 255);\n                // props.background = `rgb(${value}, ${value}, ${value})`;\n                props.fill = { text: `rgb(${value}, ${value}, ${value})` };\n            }\n            if (fill.pattern_type === 'solid') {\n                if (fill.fg_color) {\n                    if (fill.fg_color.argb) {\n                        props.fill = { text: '#' + (fill.fg_color.argb.length > 6 ?\n                                fill.fg_color.argb.substr(fill.fg_color.argb.length - 6) :\n                                fill.fg_color.argb)\n                        };\n                    }\n                    else if (typeof fill.fg_color.theme === 'number') {\n                        props.fill = {\n                            theme: fill.fg_color.theme,\n                            // tint: fill.fg_color.tint,\n                        };\n                        if (fill.fg_color.tint) {\n                            props.fill.tint = Math.round(fill.fg_color.tint * 1000) / 1000;\n                        }\n                        /*\n                        const index = Theme.color_map[fill.fg_color.theme];\n                        const color = this.theme.colors[index];\n                        // if (color && color.type !== 'system' && color.value) {\n                        if (color && color.value) {\n                          if (typeof fill.fg_color.tint === 'number') {\n                            props.background = '#' + this.TintColor(color.value, fill.fg_color.tint);\n                          }\n                          else {\n                            props.background = '#' + color.value;\n                          }\n                        }\n                        */\n                    }\n                }\n            }\n        }\n        // alignments (TODO: valign)\n        switch (xf.horizontal_alignment) {\n            case 'center':\n                props.horizontal_align = treb_base_types__WEBPACK_IMPORTED_MODULE_1__.Style.HorizontalAlign.Center;\n                break;\n            case 'right':\n                props.horizontal_align = treb_base_types__WEBPACK_IMPORTED_MODULE_1__.Style.HorizontalAlign.Right;\n                break;\n            case 'left':\n                props.horizontal_align = treb_base_types__WEBPACK_IMPORTED_MODULE_1__.Style.HorizontalAlign.Left;\n                break;\n        }\n        switch (xf.vertical_alignment) {\n            case 'center':\n                props.vertical_align = treb_base_types__WEBPACK_IMPORTED_MODULE_1__.Style.VerticalAlign.Middle;\n                break;\n            case 'top':\n                props.vertical_align = treb_base_types__WEBPACK_IMPORTED_MODULE_1__.Style.VerticalAlign.Top;\n                break;\n            case 'bottom':\n                props.vertical_align = treb_base_types__WEBPACK_IMPORTED_MODULE_1__.Style.VerticalAlign.Bottom;\n                break;\n        }\n        // wrap\n        if (xf.wrap_text) {\n            props.wrap = true;\n        }\n        // borders\n        const border = this.borders[xf.border || 0];\n        if (border) {\n            if (border.bottom_style) {\n                if (border.bottom_style === 'double') {\n                    props.border_bottom = 2;\n                }\n                else {\n                    props.border_bottom = 1;\n                }\n            }\n            if (border.left_style)\n                props.border_left = 1;\n            if (border.top_style)\n                props.border_top = 1;\n            if (border.right_style)\n                props.border_right = 1;\n        }\n        return props;\n    }\n    /** map all cell xfs to styles; retain order */\n    CellXfToStyles() {\n        return this.cell_xfs.map((xf) => this.CellXfToStyle(xf));\n    }\n    EnsureNumberFormat(number_format) {\n        // there are a lot of default, implicit number formats.\n        // we should probably find out what they are. for the time\n        // being, just use 0 for no properties.\n        if (typeof number_format.format === 'undefined')\n            return 0;\n        // we changed the casing on this at some point, so let's be\n        // broad here. general is important because it has the magic\n        // decimal point, we don't want to revert to an explicit style\n        // because there's no description syntax for that\n        if (number_format.symbolic_name) {\n            if (/^general$/i.test(number_format.symbolic_name)) {\n                return 0;\n            }\n        }\n        // check the rest of the built-in types... note this is not an array?\n        // (why not?) also, is the length guaranteed?\n        for (let i = 0; i < 100; i++) {\n            const check = StyleCache.default_styles[i];\n            if (!check) {\n                break;\n            }\n            if (check === number_format.format) {\n                return i;\n            }\n        }\n        for (const candidate of this.number_formats) {\n            if (candidate.format === number_format.format)\n                return candidate.id || 0;\n        }\n        this.modified = true;\n        const new_format = {\n            id: this.base_number_format_id++,\n            format: number_format.format,\n        };\n        this.number_formats.push(new_format);\n        if (!this.dom)\n            throw new Error('missing dom');\n        let number_formats = this.dom.find('./numFmts');\n        if (!number_formats) {\n            number_formats = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('numFmts', { count: '1' });\n            const root = this.dom.getroot();\n            root._children = [number_formats].concat(root._children);\n            // this.dom.getroot().append(number_formats);\n        }\n        else {\n            number_formats.attrib.count = (Number(number_formats.attrib.count || 0) + 1).toString();\n        }\n        number_formats.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('numFmt', {\n            numFmtId: new_format.id.toString(),\n            formatCode: new_format.format,\n        }));\n        return new_format.id;\n    }\n    EnsureBorder(border) {\n        for (let i = 0; i < this.borders.length; i++) {\n            const candidate = this.borders[i];\n            if (candidate.diagonal_color === border.diagonal_color\n                && candidate.diagonal_color_rgba === border.diagonal_color_rgba\n                && candidate.diagonal_color_theme === border.diagonal_color_theme\n                && candidate.diagonal_color_tint === border.diagonal_color_tint\n                && candidate.diagonal_style === border.diagonal_style\n                && candidate.left_color === border.left_color\n                && candidate.left_color_rgba === border.left_color_rgba\n                && candidate.left_color_theme === border.left_color_theme\n                && candidate.left_color_tint === border.left_color_tint\n                && candidate.left_style === border.left_style\n                && candidate.right_color === border.right_color\n                && candidate.right_color_rgba === border.right_color_rgba\n                && candidate.right_color_theme === border.right_color_theme\n                && candidate.right_color_tint === border.right_color_tint\n                && candidate.right_style === border.right_style\n                && candidate.top_color === border.top_color\n                && candidate.top_color_rgba === border.top_color_rgba\n                && candidate.top_color_theme === border.top_color_theme\n                && candidate.top_color_tint === border.top_color_tint\n                && candidate.top_style === border.top_style\n                && candidate.bottom_color === border.bottom_color\n                && candidate.bottom_color_rgba === border.bottom_color_rgba\n                && candidate.bottom_color_theme === border.bottom_color_theme\n                && candidate.bottom_color_tint === border.bottom_color_tint\n                && candidate.bottom_style === border.bottom_style) {\n                return i;\n            }\n        }\n        /*\n    \n        const props = Object.keys(border).filter((key) => typeof (border as any)[key] !== 'undefined');\n        const prop_count = Object.keys(props).length;\n    \n        for (let i = 0; i < this.borders.length; i++ ){\n          const candidate = this.borders[i];\n    \n          // this matches the existing props but ignores _other_ props, which is bad.\n          // need to add another check. length should do it.\n          //\n          // FIXME: is any other routine doing it the same way?\n          // TODO: check\n    \n          if (Object.keys(candidate).length === prop_count) {\n    \n            let match = true;\n            for (const prop of props) {\n              match = match && (border as any)[prop] === (candidate as any)[prop];\n            }\n            if (match) {\n              return i;\n            }\n          }\n    \n        }\n    \n        */\n        this.modified = true;\n        const new_border = Object.assign({}, border);\n        this.borders.push(new_border);\n        if (!this.dom)\n            throw new Error('missing dom');\n        const borders = this.dom.find('./borders');\n        if (!borders)\n            throw new Error('borders not found');\n        borders.attrib.count = (Number(borders.attrib.count || 0) + 1).toString();\n        const new_element = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('border');\n        const left = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('left');\n        if (border.left_style) {\n            left.attrib.style = border.left_style;\n            // left.append(Element('color', {indexed: (border.left_color || 0).toString() }));\n            const attrs = {};\n            if (border.left_color_rgba) {\n                attrs.rgb = border.left_color_rgba;\n            }\n            else if (typeof border.left_color_theme === 'number') {\n                attrs.theme = border.left_color_theme.toString();\n                if (border.left_color_tint) {\n                    attrs.tint = border.left_color_tint.toString();\n                }\n            }\n            else {\n                attrs.indexed = (border.left_color || 0).toString();\n            }\n            left.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('color', attrs));\n        }\n        new_element.append(left);\n        const right = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('right');\n        if (border.right_style) {\n            right.attrib.style = border.right_style;\n            // right.append(Element('color', {indexed: (border.right_color || 0).toString() }));\n            const attrs = {};\n            if (border.right_color_rgba) {\n                attrs.rgb = border.right_color_rgba;\n            }\n            else if (typeof border.right_color_theme === 'number') {\n                attrs.theme = border.right_color_theme.toString();\n                if (border.right_color_tint) {\n                    attrs.tint = border.right_color_tint.toString();\n                }\n            }\n            else {\n                attrs.indexed = (border.right_color || 0).toString();\n            }\n            right.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('color', attrs));\n        }\n        new_element.append(right);\n        const top = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('top');\n        if (border.top_style) {\n            top.attrib.style = border.top_style;\n            const attrs = {};\n            if (border.top_color_rgba) {\n                attrs.rgb = border.top_color_rgba;\n            }\n            else if (typeof border.top_color_theme === 'number') {\n                attrs.theme = border.top_color_theme.toString();\n                if (border.top_color_tint) {\n                    attrs.tint = border.top_color_tint.toString();\n                }\n            }\n            else {\n                attrs.indexed = (border.top_color || 0).toString();\n            }\n            top.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('color', attrs));\n        }\n        new_element.append(top);\n        const bottom = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('bottom');\n        if (border.bottom_style) {\n            // console.info(\"BOTTOM STYLE\", border);\n            bottom.attrib.style = border.bottom_style;\n            // bottom.append(Element('color', {indexed: (border.bottom_color || 0).toString() }));\n            const attrs = {};\n            if (border.bottom_color_rgba) {\n                attrs.rgb = border.bottom_color_rgba;\n            }\n            else if (typeof border.bottom_color_theme === 'number') {\n                attrs.theme = border.bottom_color_theme.toString();\n                if (border.bottom_color_tint) {\n                    attrs.tint = border.bottom_color_tint.toString();\n                }\n            }\n            else {\n                attrs.indexed = (border.bottom_color || 0).toString();\n            }\n            bottom.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('color', attrs));\n        }\n        new_element.append(bottom);\n        const diagonal = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('diagonal');\n        if (border.diagonal_style) {\n            diagonal.attrib.style = border.diagonal_style;\n            diagonal.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('color', { indexed: (border.diagonal_color || 0).toString() }));\n        }\n        new_element.append(diagonal);\n        borders.append(new_element);\n        return this.borders.length - 1;\n    }\n    MatchColor(a, b) {\n        if (!a && !b) {\n            return true;\n        }\n        if (!a || !b) {\n            return false;\n        }\n        return (a.argb === b.argb\n            && a.indexed === b.indexed\n            && a.theme === b.theme\n            && a.tint === b.tint);\n    }\n    EnsureFill(fill) {\n        /*\n        const props = Object.keys(fill).filter((key) => typeof (fill as any)[key] !== 'undefined');\n        for (let i = 0; i < this.fills.length; i++ ){\n          const candidate = this.fills[i];\n    \n          let match = true;\n          for (const prop of props) {\n            match = match && (fill as any)[prop] === (candidate as any)[prop];\n          }\n          if (match) {\n            return i;\n          }\n        }\n        */\n        for (let i = 0; i < this.fills.length; i++) {\n            const candidate = this.fills[i];\n            if (this.MatchColor(fill.bg_color, candidate.bg_color)\n                && this.MatchColor(fill.fg_color, candidate.fg_color)\n                && fill.pattern_gray === candidate.pattern_gray\n                && fill.pattern_type === candidate.pattern_type) {\n                return i;\n            }\n        }\n        this.modified = true;\n        const new_fill = Object.assign({}, fill);\n        this.fills.push(new_fill);\n        // add the node structure\n        if (!this.dom)\n            throw new Error('missing dom');\n        const fills = this.dom.find('./fills');\n        if (!fills)\n            throw new Error('fills not found');\n        fills.attrib.count = (Number(fills.attrib.count || 0) + 1).toString();\n        const new_element = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('fill');\n        const pattern_fill = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('patternFill', { patternType: fill.pattern_type });\n        switch (fill.pattern_type) {\n            case 'none':\n                break;\n            case 'solid':\n                if (fill.fg_color) {\n                    const attrs = {};\n                    if (fill.fg_color.argb) {\n                        attrs.rgb = fill.fg_color.argb;\n                    }\n                    if (fill.fg_color.indexed) {\n                        attrs.indexed = fill.fg_color.indexed.toString();\n                    }\n                    if (fill.fg_color.tint) {\n                        attrs.tint = fill.fg_color.tint.toString();\n                    }\n                    if (typeof fill.fg_color.theme !== 'undefined') {\n                        attrs.theme = fill.fg_color.theme.toString();\n                    }\n                    pattern_fill.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('fgColor', attrs));\n                }\n                break;\n            case 'gray':\n                // ...\n                break;\n        }\n        new_element.append(pattern_fill);\n        /*\n        const pattern_fill = Element('patternFill', { patternType: 'solid' });\n        new_element.append(pattern_fill);\n    \n        pattern_fill.append(Element('fgColor', { rgb: fill.color_argb }));\n        // pattern_fill.append(Element('bgColor', { indexed: '64' }));\n        */\n        fills.append(new_element);\n        return this.fills.length - 1;\n    }\n    /**\n     * for the time being we are ignoring font face, family, size, color and\n     * scheme (whatever that is). every font is based on font 0, the default.\n     * we add bold/italic/underline as necessary.\n     */\n    EnsureFont(font) {\n        // this is what we create, so we need to test against it\n        const composite_font = Object.assign(Object.assign({}, this.fonts[0]), font);\n        // const props = Object.keys(font).filter((key) => typeof (font as any)[key] !== 'undefined');\n        for (let i = 0; i < this.fonts.length; i++) {\n            const candidate = this.fonts[i];\n            //let match = true;\n            //for (const prop of props) {\n            //  match = match && (font as any)[prop] === (candidate as any)[prop];\n            //}\n            const match = (candidate.bold === composite_font.bold)\n                && (candidate.italic === composite_font.italic)\n                && (candidate.underline === composite_font.underline)\n                && (candidate.size === composite_font.size)\n                && (candidate.strike === composite_font.strike)\n                && (candidate.color_argb === composite_font.color_argb)\n                && (candidate.color_theme === composite_font.color_theme)\n                && (candidate.color_tint === composite_font.color_tint)\n                && (candidate.family === composite_font.family);\n            if (match) {\n                return i;\n            }\n        }\n        this.modified = true;\n        // const composite_font = test; // {...this.fonts[0], ...font};\n        this.fonts.push(composite_font);\n        // add the node structure\n        if (!this.dom)\n            throw new Error('missing dom');\n        const fonts = this.dom.find('./fonts');\n        if (!fonts)\n            throw new Error('fonts not found');\n        fonts.attrib.count = (Number(fonts.attrib.count || 0) + 1).toString();\n        const new_element = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('font');\n        new_element.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('sz', { val: (composite_font.size || 0).toString() }));\n        // new_element.append(Element('color', { theme: (new_font.color_theme || 0).toString() }));\n        // new_element.append(Element('color', { theme: (new_font.color_theme || 0).toString() }));\n        if (typeof composite_font.color_argb !== 'undefined') {\n            new_element.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('color', { rgb: composite_font.color_argb }));\n        }\n        else {\n            new_element.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('color', { theme: (composite_font.color_theme || 0).toString() }));\n        }\n        new_element.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('name', { val: composite_font.name }));\n        new_element.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('family', { val: (composite_font.family || 0).toString() }));\n        new_element.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('scheme', { val: composite_font.scheme }));\n        if (composite_font.bold)\n            new_element.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('b'));\n        if (composite_font.underline)\n            new_element.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('u'));\n        if (composite_font.italic)\n            new_element.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('i'));\n        if (composite_font.strike)\n            new_element.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('strike'));\n        fonts.append(new_element);\n        return this.fonts.length - 1;\n    }\n    EnsureStyle(options) {\n        // find indexes for props\n        const font_index = this.EnsureFont(options.font || {});\n        const border_index = this.EnsureBorder(options.border || {});\n        const number_format_index = this.EnsureNumberFormat(options.number_format || {});\n        const fill_index = this.EnsureFill(options.fill || { pattern_type: 'none' });\n        // now find an XF that matches\n        for (let i = 0; i < this.cell_xfs.length; i++) {\n            const xf = this.cell_xfs[i];\n            if (xf.font === font_index &&\n                xf.fill === fill_index &&\n                xf.border === border_index &&\n                xf.number_format === number_format_index &&\n                !!xf.wrap_text === !!options.wrap &&\n                (!options.horizontal_alignment || options.horizontal_alignment === xf.horizontal_alignment) &&\n                (!options.vertical_alignment || options.vertical_alignment === xf.vertical_alignment)) {\n                return i;\n            }\n        }\n        this.modified = true;\n        // need a new XF -- defaults?\n        const new_xf = {\n            font: font_index,\n            fill: fill_index,\n            border: border_index,\n            number_format: number_format_index,\n        };\n        if (options.horizontal_alignment) {\n            new_xf.horizontal_alignment = options.horizontal_alignment;\n        }\n        if (options.vertical_alignment) {\n            new_xf.vertical_alignment = options.vertical_alignment;\n        }\n        if (options.wrap) {\n            new_xf.wrap_text = true;\n        }\n        this.cell_xfs.push(new_xf);\n        // add the node structure\n        if (!this.dom)\n            throw new Error('missing dom');\n        const xfs = this.dom.find('./cellXfs');\n        if (!xfs)\n            throw new Error('xfs not found');\n        xfs.attrib.count = (Number(xfs.attrib.count || 0) + 1).toString();\n        const new_element = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('xf', {\n            borderId: new_xf.border.toString(),\n            fillId: new_xf.fill.toString(),\n            fontId: new_xf.font.toString(),\n            numFmtId: new_xf.number_format.toString(),\n        });\n        if (new_xf.horizontal_alignment || new_xf.vertical_alignment) {\n            const attrs = {};\n            if (new_xf.horizontal_alignment) {\n                attrs.horizontal = new_xf.horizontal_alignment;\n            }\n            if (new_xf.vertical_alignment) {\n                attrs.vertical = new_xf.vertical_alignment;\n            }\n            if (new_xf.wrap_text) {\n                attrs.wrapText = '1';\n            }\n            new_element.append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('alignment', attrs));\n        }\n        if (typeof new_xf.xfid !== 'undefined') {\n            new_element.attrib.xfId = new_xf.xfid.toString();\n        }\n        xfs.append(new_element);\n        return this.cell_xfs.length - 1;\n    }\n    Init(data, theme) {\n        this.theme = theme;\n        this.dom = elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(data);\n        this.number_formats = this.dom.findall('./numFmts/numFmt').map((element) => {\n            const number_format = {\n                id: Number(element.attrib.numFmtId),\n                format: element.attrib.formatCode,\n            };\n            return number_format;\n        });\n        this.borders = this.dom.findall('./borders/border').map((element) => {\n            const border = {};\n            for (const child of element.getchildren()) {\n                const style = child.attrib.style;\n                const child_color = child.getchildren()[0];\n                let color_index;\n                if (child_color && child_color.tag === 'color') {\n                    if (child_color.attrib.indexed) {\n                        color_index = Number(child_color.attrib.indexed);\n                    }\n                }\n                if (style && typeof color_index !== 'undefined') {\n                    switch (child.tag) {\n                        case 'left':\n                            border.left_style = style;\n                            border.left_color = color_index;\n                            break;\n                        case 'right':\n                            border.right_style = style;\n                            border.right_color = color_index;\n                            break;\n                        case 'top':\n                            border.top_style = style;\n                            border.top_color = color_index;\n                            break;\n                        case 'bottom':\n                            border.bottom_style = style;\n                            border.bottom_color = color_index;\n                            break;\n                        case 'diagonal':\n                            border.diagonal_style = style;\n                            border.diagonal_color = color_index;\n                            break;\n                    }\n                }\n            }\n            return border;\n        });\n        this.cell_xfs = this.dom.findall('./cellXfs/xf').map((element, index) => {\n            const xf = {\n                number_format: Number(element.attrib.numFmtId),\n                font: Number(element.attrib.fontId),\n                fill: Number(element.attrib.fillId),\n                border: Number(element.attrib.borderId),\n                xfid: Number(element.attrib.xfId),\n            };\n            for (const child of element.getchildren()) {\n                if (child.tag === 'alignment') {\n                    if (child.attrib.horizontal) {\n                        xf.horizontal_alignment = child.attrib.horizontal;\n                    }\n                    if (child.attrib.vertical) {\n                        xf.vertical_alignment = child.attrib.vertical;\n                    }\n                    if (child.attrib.wrapText) {\n                        xf.wrap_text = true;\n                    }\n                }\n            }\n            // console.info(index, xf, element);\n            return xf;\n        });\n        this.fills = this.dom.findall('./fills/fill').map((element) => {\n            const fill = { pattern_type: 'none' };\n            const pattern_fill = element.find('./patternFill');\n            if (pattern_fill) {\n                const type = pattern_fill.attrib.patternType;\n                switch (type) {\n                    case 'none':\n                        break;\n                    case 'solid':\n                        fill.pattern_type = 'solid';\n                        {\n                            const fg = pattern_fill.find('./fgColor');\n                            if (fg) {\n                                fill.fg_color = {\n                                    theme: fg.attrib.theme ? Number(fg.attrib.theme) : undefined,\n                                    indexed: fg.attrib.indexed ? Number(fg.attrib.indexed) : undefined,\n                                    tint: fg.attrib.tint ? Number(fg.attrib.tint) : undefined,\n                                    argb: fg.attrib.rgb,\n                                };\n                            }\n                        }\n                        break;\n                    default:\n                        {\n                            const match = type === null || type === void 0 ? void 0 : type.match(/^gray(\\d+)$/);\n                            if (match) {\n                                fill.pattern_type = 'gray';\n                                fill.pattern_gray = Number(match[1]);\n                                break;\n                            }\n                        }\n                        console.info('unhandled pattern type', type);\n                }\n            }\n            /*\n            for (const child of element.getchildren()){\n              switch (child.tag) {\n                case 'fgColor':\n                  {\n                    const argb = child.attrib.rgb;\n                    const indexed = child.attrib.indexed;\n                    if (typeof argb !== 'undefined') fill.color_argb = argb;\n                  }\n                  break;\n              }\n            }\n            */\n            return fill;\n        });\n        this.fonts = this.dom.findall('./fonts/font').map((element) => {\n            const font = {};\n            for (const child of element.getchildren()) {\n                switch (child.tag) {\n                    case 'sz':\n                        font.size = Number(child.attrib.val);\n                        break;\n                    case 'color':\n                        if (child.attrib.theme)\n                            font.color_theme = Number(child.attrib.theme);\n                        if (child.attrib.tint)\n                            font.color_tint = Number(child.attrib.tint);\n                        if (child.attrib.rgb)\n                            font.color_argb = child.attrib.rgb;\n                        break;\n                    case 'strike':\n                        font.strike = true;\n                        break;\n                    case 'name':\n                        font.name = child.attrib.val;\n                        break;\n                    case 'family':\n                        font.family = Number(child.attrib.val);\n                        break;\n                    case 'scheme':\n                        font.scheme = child.attrib.val;\n                        break;\n                    case 'b':\n                        font.bold = true;\n                        break;\n                    case 'i':\n                        font.italic = true;\n                        break;\n                    case 'u':\n                        font.underline = true;\n                        break;\n                }\n            }\n            return font;\n        });\n    }\n}\n/**\n * thanks to\n * http://polymathprogrammer.com/2011/02/15/built-in-styles-for-excel-open-xml/\n */\nStyleCache.default_styles = {\n    0: 'General',\n    1: '0',\n    2: '0.00',\n    3: '#,##0',\n    4: '#,##0.00',\n    9: '0%',\n    10: '0.00%',\n    11: '0.00E+00',\n    12: '# ?/?',\n    13: '# ??/??',\n    14: 'mm-dd-yy',\n    15: 'd-mmm-yy',\n    16: 'd-mmm',\n    17: 'mmm-yy',\n    18: 'h:mm AM/PM',\n    19: 'h:mm:ss AM/PM',\n    20: 'h:mm',\n    21: 'h:mm:ss',\n    22: 'm/d/yy h:mm',\n    37: '#,##0 ;(#,##0)',\n    38: '#,##0 ;[Red](#,##0)',\n    39: '#,##0.00;(#,##0.00)',\n    40: '#,##0.00;[Red](#,##0.00)',\n    45: 'mm:ss',\n    46: '[h]:mm:ss',\n    47: 'mmss.0',\n    48: '##0.0E+0',\n    49: '@',\n};\n\n\n//# sourceURL=webpack://treb/./treb-export/src/style.ts?");

/***/ }),

/***/ "./treb-export/src/template-2.ts":
/*!***************************************!*\
  !*** ./treb-export/src/template-2.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"template\": () => (/* binding */ template)\n/* harmony export */ });\nconst template = '';\n\n\n//# sourceURL=webpack://treb/./treb-export/src/template-2.ts?");

/***/ }),

/***/ "./treb-export/src/theme.ts":
/*!**********************************!*\
  !*** ./treb-export/src/theme.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Theme\": () => (/* binding */ Theme)\n/* harmony export */ });\n/* harmony import */ var elementtree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! elementtree */ \"./node_modules/elementtree/lib/elementtree.js\");\n\nclass Theme {\n    constructor() {\n        this.colors = {};\n    }\n    Init(data) {\n        this.dom = elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(data);\n        const tag = this.dom.getroot().tag;\n        let namespace = '';\n        const match = tag.toString().match(/^(.*?):/);\n        if (match)\n            namespace = match[1] + ':';\n        const color_scheme = this.dom.find(`./${namespace}themeElements/${namespace}clrScheme`);\n        if (color_scheme) {\n            for (const color of color_scheme.getchildren()) {\n                if (color.tag) {\n                    const name = color.tag.toString().substr(namespace.length);\n                    let value;\n                    let type = 'rgb';\n                    for (const child of color.getchildren()) {\n                        if (child.tag === `${namespace}srgbClr`) {\n                            value = child.attrib.val;\n                            type = 'rgb';\n                        }\n                        else if (child.tag === `${namespace}sysClr`) {\n                            value = child.attrib.lastClr;\n                            type = 'system';\n                        }\n                    }\n                    if (typeof value === 'string') {\n                        this.colors[name] = { name, value, type };\n                    }\n                }\n            }\n        }\n    }\n}\n// where is this defined?\nTheme.color_map = [\n    'lt1',\n    'dk1',\n    'lt2',\n    'dk2',\n    'accent1',\n    'accent2',\n    'accent3',\n    'accent4',\n    'accent5',\n    'accent6',\n    'hlink',\n    'folHlink',\n];\n\n\n//# sourceURL=webpack://treb/./treb-export/src/theme.ts?");

/***/ }),

/***/ "./treb-export/src/workbook.ts":
/*!*************************************!*\
  !*** ./treb-export/src/workbook.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ChartType\": () => (/* binding */ ChartType),\n/* harmony export */   \"Workbook\": () => (/* binding */ Workbook)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var elementtree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! elementtree */ \"./node_modules/elementtree/lib/elementtree.js\");\n/* harmony import */ var _sheet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sheet */ \"./treb-export/src/sheet.ts\");\n/* harmony import */ var _shared_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared-strings */ \"./treb-export/src/shared-strings.ts\");\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./style */ \"./treb-export/src/style.ts\");\n/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./theme */ \"./treb-export/src/theme.ts\");\n/* harmony import */ var _drawing_drawing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./drawing/drawing */ \"./treb-export/src/drawing/drawing.ts\");\n/* harmony import */ var _drawing_chart__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./drawing/chart */ \"./treb-export/src/drawing/chart.ts\");\n/* harmony import */ var treb_base_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! treb-base-types */ \"./treb-base-types/src/index.ts\");\n\n\n\n\n\n\n\n\n\n\nconst XMLTypeMap = {\n    'sheet': 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',\n    'theme': 'application/vnd.openxmlformats-officedocument.theme+xml',\n    'drawing': 'application/vnd.openxmlformats-officedocument.drawing+xml',\n    'chart': 'application/vnd.openxmlformats-officedocument.drawingml.chart+xml',\n    'themeOverride': 'application/vnd.openxmlformats-officedocument.themeOverride+xml',\n    'ctrlProp': 'application/vnd.ms-excel.controlproperties+xml',\n    'style': 'application/vnd.ms-office.chartstyle+xml',\n    'colors': 'application/vnd.ms-office.chartcolorstyle+xml',\n};\nvar ChartType;\n(function (ChartType) {\n    ChartType[ChartType[\"Unknown\"] = 0] = \"Unknown\";\n    ChartType[ChartType[\"Column\"] = 1] = \"Column\";\n    ChartType[ChartType[\"Bar\"] = 2] = \"Bar\";\n    ChartType[ChartType[\"Line\"] = 3] = \"Line\";\n    ChartType[ChartType[\"Scatter\"] = 4] = \"Scatter\";\n    ChartType[ChartType[\"Donut\"] = 5] = \"Donut\";\n    ChartType[ChartType[\"Pie\"] = 6] = \"Pie\";\n})(ChartType || (ChartType = {}));\nclass Workbook {\n    constructor() {\n        this.style_cache = new _style__WEBPACK_IMPORTED_MODULE_3__.StyleCache(); // public temp\n        this.theme = new _theme__WEBPACK_IMPORTED_MODULE_4__.Theme();\n        this.active_tab = 0;\n        this.shared_strings = new _shared_strings__WEBPACK_IMPORTED_MODULE_2__.SharedStrings();\n        // private sheets: {[index: string]: Sheet} = {};\n        this.sheets = [];\n        this.rels = {};\n    }\n    GetSheet(sheet) {\n        return this.sheets[sheet];\n    }\n    Count() {\n        return this.sheets.length;\n    }\n    RenameSheet(index, name) {\n        if (!this.dom)\n            throw new Error('missing dom');\n        // local: does this matter? might as well keep it consistent\n        this.sheets[index].options.name = name;\n        // rename in workbook\n        const sheet = this.dom.find(`./sheets/sheet/[@sheetId=\"${index + 1}\"]`);\n        if (sheet) {\n            sheet.set('name', name);\n        }\n        else {\n            console.warn('rename: missing sheet', index);\n        }\n    }\n    ReadStyles() {\n        var _a;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {\n            if (!this.zip)\n                throw new Error('missing zip');\n            const data = yield ((_a = this.zip.file('xl/styles.xml')) === null || _a === void 0 ? void 0 : _a.async('text'));\n            this.style_cache.Init(data, this.theme);\n        });\n    }\n    ReadTheme() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {\n            if (!this.zip)\n                throw new Error('missing zip');\n            const file = this.zip.file('xl/theme/theme1.xml');\n            if (file) {\n                const data = yield file.async('text');\n                this.theme.Init(data);\n            }\n        });\n    }\n    ReadChart(reference) {\n        var _a, _b;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {\n            if (!this.zip) {\n                throw new Error('missing zip');\n            }\n            const data = yield ((_a = this.zip.file(reference.replace(/^../, 'xl'))) === null || _a === void 0 ? void 0 : _a.async('text'));\n            if (!data) {\n                return undefined;\n            }\n            const chart_root = elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(data);\n            const title_node = chart_root.find('./c:chart/c:title');\n            const result = {\n                type: ChartType.Unknown\n            };\n            if (title_node) {\n                // FIXME: other types of title? (...)\n                const node = title_node.find('./c:tx/c:strRef/c:f');\n                if (node) {\n                    result.title = (_b = node.text) === null || _b === void 0 ? void 0 : _b.toString();\n                }\n                else {\n                    const nodes = title_node.findall('./c:tx/c:rich/a:p/a:r/a:t');\n                    if (nodes && nodes.length) {\n                        result.title = '\"' + nodes.map(subnode => { var _a; return ((_a = subnode.text) === null || _a === void 0 ? void 0 : _a.toString()) || ''; }).join('') + '\"';\n                    }\n                }\n            }\n            const ParseSeries = (node, scatter = false) => {\n                var _a, _b, _c, _d, _e, _f;\n                const series = [];\n                const series_nodes = node.findall('./c:ser');\n                for (const series_node of series_nodes) {\n                    let index = series.length;\n                    const order_node = series_node.find('c:order');\n                    if (order_node) {\n                        index = Number(order_node.attrib.val || 0) || 0;\n                    }\n                    const series_data = {};\n                    let title_node = series_node.find('c:tx/c:v');\n                    if (title_node) {\n                        const title = (_a = title_node.text) === null || _a === void 0 ? void 0 : _a.toString();\n                        if (title) {\n                            series_data.title = `\"${title}\"`;\n                        }\n                    }\n                    else {\n                        title_node = series_node.find('c:tx/c:strRef/c:f');\n                        if (title_node) {\n                            series_data.title = (_b = title_node.text) === null || _b === void 0 ? void 0 : _b.toString();\n                        }\n                    }\n                    if (scatter) {\n                        const x = series_node.find('c:xVal/c:numRef/c:f');\n                        if (x) {\n                            series_data.categories = (_c = x.text) === null || _c === void 0 ? void 0 : _c.toString();\n                        }\n                        const y = series_node.find('c:yVal/c:numRef/c:f');\n                        if (y) {\n                            series_data.values = (_d = y.text) === null || _d === void 0 ? void 0 : _d.toString();\n                        }\n                    }\n                    else {\n                        const value_node = series_node.find('c:val/c:numRef/c:f');\n                        if (value_node) {\n                            series_data.values = (_e = value_node.text) === null || _e === void 0 ? void 0 : _e.toString();\n                        }\n                        let cat_node = series_node.find('c:cat/c:strRef/c:f');\n                        if (!cat_node) {\n                            cat_node = series_node.find('c:cat/c:numRef/c:f');\n                        }\n                        if (cat_node) {\n                            series_data.categories = (_f = cat_node.text) === null || _f === void 0 ? void 0 : _f.toString();\n                        }\n                    }\n                    series[index] = series_data;\n                }\n                return series;\n            };\n            let node = chart_root.find('./c:chart/c:plotArea/c:barChart');\n            if (node) {\n                result.type = ChartType.Bar;\n                const bar_dir_node = node.find('./c:barDir');\n                if (bar_dir_node) {\n                    if (bar_dir_node.attrib.val === 'col') {\n                        result.type = ChartType.Column;\n                    }\n                }\n                result.series = ParseSeries(node);\n            }\n            if (!node) {\n                node = chart_root.find('./c:chart/c:plotArea/c:lineChart');\n                if (node) {\n                    result.type = ChartType.Line;\n                    result.series = ParseSeries(node);\n                }\n            }\n            if (!node) {\n                node = chart_root.find('./c:chart/c:plotArea/c:doughnutChart');\n                if (node) {\n                    result.type = ChartType.Donut;\n                    result.series = ParseSeries(node);\n                }\n            }\n            if (!node) {\n                node = chart_root.find('./c:chart/c:plotArea/c:pieChart');\n                if (node) {\n                    result.type = ChartType.Pie;\n                    result.series = ParseSeries(node);\n                }\n            }\n            if (!node) {\n                node = chart_root.find('./c:chart/c:plotArea/c:scatterChart');\n                if (node) {\n                    result.type = ChartType.Scatter;\n                    result.series = ParseSeries(node, true);\n                }\n            }\n            return result;\n        });\n    }\n    ReadDrawing(reference) {\n        var _a, _b;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {\n            if (!this.zip) {\n                throw new Error('missing zip');\n            }\n            const data = yield ((_a = this.zip.file(reference.replace(/^../, 'xl'))) === null || _a === void 0 ? void 0 : _a.async('text'));\n            if (!data) {\n                return undefined;\n            }\n            const drawing_root = elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(data);\n            const rels = yield ((_b = this.zip.file(reference.replace(/^..\\/drawings/, 'xl/drawings/_rels') + '.rels')) === null || _b === void 0 ? void 0 : _b.async('text'));\n            if (!rels) {\n                console.info('missing rels', reference.replace(/^..\\/drawings/, 'xl/drawings/_rels') + '.rels');\n                return undefined;\n            }\n            const drawing_rels = elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(rels);\n            const anchor_nodes = drawing_root.findall('./xdr:twoCellAnchor');\n            const results = [];\n            /* FIXME: move to drawing? */\n            const ParseAnchor = (node) => {\n                const anchor = {\n                    column: 0,\n                    column_offset: 0,\n                    row: 0,\n                    row_offset: 0,\n                };\n                if (node) {\n                    for (const child of node._children) {\n                        const value = Number(child.text) || 0;\n                        switch (child.tag) {\n                            case 'xdr:col':\n                                anchor.column = value;\n                                break;\n                            case 'xdr:colOff':\n                                anchor.column_offset = value; // FIXME: scale\n                                break;\n                            case 'xdr:row':\n                                anchor.row = value;\n                                break;\n                            case 'xdr:rowOff':\n                                anchor.row_offset = value; // FIXME: scale\n                                break;\n                        }\n                    }\n                }\n                return anchor;\n            };\n            for (const anchor_node of anchor_nodes || []) {\n                const anchor = {\n                    from: ParseAnchor(anchor_node.find('./xdr:from') || undefined),\n                    to: ParseAnchor(anchor_node.find('./xdr:to') || undefined),\n                };\n                const result = { anchor };\n                const chart_reference = anchor_node.find('./xdr:graphicFrame/a:graphic/a:graphicData/c:chart');\n                if (chart_reference) {\n                    const rid = chart_reference.attrib['r:id'];\n                    if (rid) {\n                        const chart_rel = drawing_rels.find(`./Relationship[@Id=\"${rid}\"]`);\n                        if (chart_rel && chart_rel.attrib.Target) {\n                            result.chart = yield this.ReadChart(chart_rel.attrib.Target);\n                        }\n                    }\n                }\n                results.push(result);\n            }\n            return results;\n        });\n    }\n    /**\n     * break out strings table\n     */\n    ReadStringsTable() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {\n            if (!this.zip)\n                throw new Error('missing zip');\n            // simple unformatted strings have the structure <si><t>...</t></si>.\n            // Formatted strings have the structure <si><r><rPr/><t>...</t></r></si>\n            // with (potentially) multiple <r/> elements and formatting data in\n            // the <rPr/> section inside each <r/>.\n            // NOTE that there's a (relatively slim) possibility there is no\n            // strings table -- you need a spreadsheet that has no strings in\n            // it, and never had strings in it.\n            // not sure what effect this will have on other functions, since\n            // theoretically it should never be needed\n            const shared_strings = this.zip.file('xl/sharedStrings.xml');\n            if (!shared_strings) {\n                return;\n            }\n            const data = yield shared_strings.async('text');\n            // FOR NOW, let's just ignore complex strings.  we'll track\n            // simple strings as before (but now with correct indexes).\n            // FIXME.\n            // NOTE: there are overlaps, which renders this structure slightly broken.\n            // I'll explain: we have two shared strings with the same text. the SS \n            // class is a map of text -> index, for historical reasons. if there's \n            // duplicate data, it's overwritten and the lookups fail.\n            // solution: use a forward table. we should be doing that anyway. make\n            // it optional, so we don't break any backcompat.\n            this.shared_strings.dom = elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(data);\n            this.shared_strings.map = {};\n            this.shared_strings.len = 0;\n            const reverse_map = [];\n            this.shared_strings.dom.findall('./si').forEach((elt, idx) => {\n                var _a;\n                const children = elt.getchildren();\n                if (children && children.length) {\n                    const child = children[0];\n                    // simple string looks like\n                    //\n                    // <si>\n                    //   <t>text here!</t>\n                    // </si>\n                    if (child.tag === 't' && (typeof child.text === 'string')) {\n                        const text = child.text.toString();\n                        this.shared_strings.map[text] = idx;\n                        reverse_map[idx] = text;\n                    }\n                    else if (child.tag === 'r') {\n                        // complex string looks like\n                        //\n                        // <si>\n                        //   <r>\n                        //     <rPr>(...style data...)</rPr>\n                        //     <t>text part</t>\n                        //   </r>\n                        // </si>\n                        //\n                        // where there can be multiple r tags with different styling.\n                        // since we don't support that atm, let's drop style and just\n                        // collect text.\n                        const text_parts = [];\n                        for (const composite of children) {\n                            if (composite.tag === 'r') {\n                                const composite_children = composite.getchildren();\n                                if (composite_children && composite_children[1] && composite_children[1].tag === 't') {\n                                    text_parts.push(((_a = composite_children[1].text) === null || _a === void 0 ? void 0 : _a.toString()) || '');\n                                }\n                            }\n                        }\n                        const text = text_parts.join('') || '';\n                        this.shared_strings.map[text] = idx;\n                        reverse_map[idx] = text;\n                    }\n                    else {\n                        console.info('bad shared string @', idx, elt);\n                    }\n                    // console.info(idx, child);\n                }\n                else {\n                    console.info('no children?', elt);\n                }\n                this.shared_strings.len++;\n            });\n            if (reverse_map.length) {\n                this.shared_strings.reverse_map = reverse_map;\n            }\n        });\n    }\n    /**\n     * read all sheets (async)\n     */\n    GetWorksheets(preparse = false, read_rels = false) {\n        var _a, _b;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {\n            if (!this.zip)\n                throw new Error('missing zip');\n            for (const sheet of this.sheets) {\n                if (sheet) {\n                    const rid = sheet.options.rid;\n                    if (rid) {\n                        sheet.path = `xl/${this.rels[rid].target}`;\n                        sheet.rels_path = sheet.path.replace('worksheets', 'worksheets/_rels') + '.rels';\n                        const data = yield ((_a = this.zip.file(sheet.path)) === null || _a === void 0 ? void 0 : _a.async('text'));\n                        sheet.xml = data;\n                        if (preparse)\n                            sheet.Parse();\n                        if (read_rels) {\n                            sheet.rels_xml = yield ((_b = this.zip.file(sheet.rels_path)) === null || _b === void 0 ? void 0 : _b.async('text'));\n                            if (preparse)\n                                sheet.ReadRels();\n                        }\n                    }\n                }\n            }\n        });\n    }\n    UpdateFileInfo(options) {\n        var _a;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {\n            if (!this.zip) {\n                return;\n            }\n            const core = yield ((_a = this.zip.file('docProps/core.xml')) === null || _a === void 0 ? void 0 : _a.async('text'));\n            const core_dom = elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(core);\n            /*\n              <dc:creator>TREB</dc:creator>\n              <cp:lastModifiedBy>TREB</cp:lastModifiedBy>\n              <dcterms:created xsi:type=\"dcterms:W3CDTF\">2019-01-31T16:48:03Z</dcterms:created>\n              <dcterms:modified xsi:type=\"dcterms:W3CDTF\">2019-01-31T16:48:28Z</dcterms:modified>\n            */\n            let node;\n            if (options.creator) {\n                node = core_dom.getroot().find('./dc:creator');\n                if (node) {\n                    node.text = options.creator;\n                }\n            }\n            if (options.modified_by) {\n                node = core_dom.getroot().find('./cp:lastModifiedBy');\n                if (node) {\n                    node.text = options.modified_by;\n                }\n            }\n            if (options.created) {\n                node = core_dom.getroot().find('./dcterms:created');\n                if (node) {\n                    node.text = options.created.toISOString();\n                }\n            }\n            if (options.modified) {\n                node = core_dom.getroot().find('./dcterms:modified');\n                if (node) {\n                    node.text = options.modified.toISOString();\n                }\n            }\n            yield this.zip.file('docProps/core.xml', core_dom.write({ xml_declaration: true }));\n        });\n    }\n    /**\n     * finalize: rewrite xml, save in zip file.\n     */\n    Finalize(opts = {}) {\n        var _a;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {\n            if (!this.zip)\n                throw new Error('missing zip');\n            if (!this.dom)\n                throw new Error('missing dom');\n            if (!this.rels_dom)\n                throw new Error('missing rels_dom');\n            // it seems like we already have this in overrides, not sure why\n            if (this.shared_strings.dom) {\n                const xml = this.shared_strings.dom.write({ xml_declaration: true });\n                yield this.zip.file('xl/sharedStrings.xml', xml);\n            }\n            if (this.style_cache.modified && this.style_cache.dom) {\n                const xml = this.style_cache.dom.write({ xml_declaration: true });\n                // console.info(xml);\n                yield this.zip.file('xl/styles.xml', xml);\n            }\n            // active tab\n            const workbook_view = this.dom.find('./bookViews/workbookView');\n            if (workbook_view) {\n                let selected_tab = 0;\n                for (let i = 0; i < this.sheets.length; i++) {\n                    if (this.sheets[i].tab_selected) {\n                        selected_tab = i;\n                        break;\n                    }\n                }\n                workbook_view.attrib.activeTab = selected_tab.toString();\n            }\n            yield this.zip.file('xl/_rels/workbook.xml.rels', this.rels_dom.write({ xml_declaration: true }));\n            yield this.zip.file('xl/workbook.xml', this.dom.write({ xml_declaration: true }));\n            if (opts.flushCalcChain || opts.flush) {\n                try {\n                    this.zip.remove('xl/calcChain.xml'); // what if it doesn't exist?\n                }\n                catch (e) {\n                    console.warn(e);\n                }\n            }\n            const time = new Date();\n            yield this.UpdateFileInfo({\n                created: time,\n                modified: time,\n                creator: 'TREB',\n                modified_by: 'TREB',\n            });\n            const content_types_path = '[Content_Types].xml';\n            const content_types_data = yield ((_a = this.zip.file(content_types_path)) === null || _a === void 0 ? void 0 : _a.async('text'));\n            const content_types_dom = elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(content_types_data);\n            // do sheets first, get them in [content_types] in order, then we will add drawing bits\n            let index = 0;\n            for (const sheet of this.sheets) {\n                if (sheet.dom && sheet.path) {\n                    sheet.Finalize();\n                    const xml = sheet.dom.write({ xml_declaration: true });\n                    yield this.zip.file(sheet.path, xml);\n                    if (sheet.rels_dom && sheet.rels_path) {\n                        const rels = sheet.rels_dom.write({ xml_declaration: true });\n                        yield this.zip.file(sheet.rels_path, rels);\n                    }\n                    /*\n                    if (sheet.drawing_rels && sheet.rels_path) {\n                      await this.zip.file(sheet.rels_path, Drawing.SheetRels(sheet.drawing_rels));\n                    }\n                    */\n                    if (index++) {\n                        content_types_dom.getroot().append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('Override', {\n                            PartName: '/' + sheet.path,\n                            ContentType: XMLTypeMap.sheet,\n                        }));\n                    }\n                }\n            }\n            for (const sheet of this.sheets) {\n                for (const drawing of sheet.drawings) {\n                    const drawing_path = `xl/drawings/drawing${drawing.index}.xml`;\n                    const drawing_rels_path = `xl/drawings/_rels/drawing${drawing.index}.xml.rels`;\n                    content_types_dom.getroot().append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('Override', { PartName: '/' + drawing_path, ContentType: XMLTypeMap.drawing }));\n                    yield this.zip.file(drawing_path, drawing.GetDrawingXML());\n                    yield this.zip.file(drawing_rels_path, drawing.GetDrawingRels());\n                    for (const anchored_chart of drawing.charts) {\n                        const chart = anchored_chart.chart;\n                        const chart_path = `xl/charts/chart${chart.index}.xml`;\n                        const chart_rels_path = `xl/charts/_rels/chart${chart.index}.xml.rels`;\n                        content_types_dom.getroot().append((0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('Override', { PartName: '/' + chart_path, ContentType: XMLTypeMap.chart }));\n                        yield this.zip.file(chart_path, chart.GetChartXML());\n                        yield this.zip.file(chart_rels_path, chart.GetChartRels());\n                        /*\n                        if (drawing.indexes.colors) {\n                          const colors_path = `xl/charts/colors${drawing.indexes.colors}.xml`;\n                          content_types_dom.getroot().append(Element('Override', { PartName: '/' + colors_path, ContentType: XMLTypeMap.colors }));\n                          await this.zip.file(colors_path, drawing.GetColorsXML());\n                        }\n              \n                        if (drawing.indexes.style) {\n                          const style_path =  `xl/charts/style${drawing.indexes.style}.xml`;\n                          content_types_dom.getroot().append(Element('Override', { PartName: '/' + style_path, ContentType: XMLTypeMap.style }));\n                          await this.zip.file(style_path, drawing.GetStyleXML());\n                        }\n                        */\n                    }\n                }\n            }\n            yield this.zip.file(content_types_path, content_types_dom.write({ xml_declaration: true }));\n        });\n    }\n    GetNamedRanges() {\n        if (!this.dom)\n            throw new Error('missing dom');\n        const results = {};\n        const names = this.dom.find('./definedNames');\n        if (names) {\n            const children = names.getchildren();\n            for (const child of children) {\n                if (child.tag === 'definedName') {\n                    const name = child.attrib.name;\n                    const reference = child.text;\n                    if (name && reference) {\n                        results[name] = reference.toString();\n                    }\n                }\n            }\n        }\n        return results;\n    }\n    AddNamedRanges(named_ranges = {}, name_map = []) {\n        if (!this.dom)\n            throw new Error('missing dom');\n        // this comes from parser. I'm inlining it because we don't include\n        // parser in this worker (?)\n        const QuotedSheetNameRegex = /[\\s-+=<>!()]/;\n        let names = this.dom.find('./definedNames');\n        if (!names) {\n            let found = false;\n            names = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('definedNames');\n            const elements = this.dom.getroot().getchildren();\n            for (let i = 0; i < elements.length; i++) {\n                if (elements[i].tag === 'sheets') {\n                    this.dom.getroot().insert(i + 1, names);\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                console.warn('insert point for definedNames not found');\n            }\n        }\n        for (const name of Object.keys(named_ranges)) {\n            const base = named_ranges[name];\n            base.start.absolute_column =\n                base.start.absolute_row =\n                    base.end.absolute_column =\n                        base.end.absolute_row = true;\n            const area = new treb_base_types__WEBPACK_IMPORTED_MODULE_7__.Area(base.start, base.end);\n            if (typeof area.start.sheet_id !== 'undefined') {\n                let sheet_name = name_map[area.start.sheet_id];\n                if (QuotedSheetNameRegex.test(sheet_name)) {\n                    sheet_name = '\"' + sheet_name + '\"';\n                }\n                const label = sheet_name + '!' + area.spreadsheet_label;\n                // <definedName name=\"fortran\">Sheet1!$C$3</definedName>\n                const element = (0,elementtree__WEBPACK_IMPORTED_MODULE_0__.Element)('definedName', { name });\n                element.text = label;\n                names.append(element);\n            }\n            else {\n                console.warn('named range missing sheet ID');\n            }\n        }\n    }\n    /**\n     * clone sheet 0 so we have X total sheets\n     */\n    InsertSheets(total_sheet_count) {\n        if (!this.dom)\n            throw new Error('missing dom');\n        if (!this.rels_dom)\n            throw new Error('missing rels_dom');\n        let next_rel_index = 1;\n        const NextRel = () => {\n            for (;;) {\n                const rel = `rId${next_rel_index++}`;\n                if (!this.rels[rel])\n                    return rel;\n            }\n        };\n        // for each sheet we add, we need to insert it in the list of\n        // sheets (in workbook.xml) and insert a relationship (in\n        // workbook.xml.rels).\n        while (this.sheets.length < total_sheet_count) {\n            const index = this.sheets.length;\n            const path = `worksheets/sheet${index + 1}.xml`;\n            const rel = NextRel();\n            const type = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet';\n            // console.info('inserting sheet', index);\n            this.rels[rel] = {\n                target: path,\n                type,\n                id: rel,\n            };\n            const relationship = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(this.rels_dom.getroot(), 'Relationship');\n            relationship.set('Id', rel);\n            relationship.set('Type', type);\n            relationship.set('Target', path);\n            const name = 'Sheet' + (index + 1);\n            const sheets = this.dom.find('./sheets');\n            if (sheets) {\n                const sheet_element = elementtree__WEBPACK_IMPORTED_MODULE_0__.SubElement(sheets, 'sheet');\n                sheet_element.set('name', name);\n                sheet_element.set('sheetId', (index + 1).toString());\n                sheet_element.set('{http://schemas.openxmlformats.org/officeDocument/2006/relationships}id', rel);\n            }\n            // insert sheet\n            const worksheet = new _sheet__WEBPACK_IMPORTED_MODULE_1__.Sheet({\n                name,\n                id: Number(index + 1),\n                rid: rel\n            });\n            worksheet.shared_strings = this.shared_strings;\n            worksheet.xml = this.sheets[0].xml;\n            worksheet.path = 'xl/' + path;\n            worksheet.rels_path = `xl/worksheets/_rels/sheet${index + 1}.xml.rels`;\n            worksheet.Parse();\n            this.sheets.push(worksheet);\n        }\n    }\n    /**\n     *\n     */\n    Init(zip, preparse = false, read_rels = false) {\n        var _a, _b, _c, _d;\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {\n            // let wb = this;\n            if (zip) {\n                this.zip = zip;\n            }\n            if (!this.zip)\n                throw new Error('missing zip');\n            // Drawing.ResetIndexes();\n            _drawing_drawing__WEBPACK_IMPORTED_MODULE_5__.Drawing.next_drawing_index = 1;\n            _drawing_chart__WEBPACK_IMPORTED_MODULE_6__.Chart.next_chart_index = 1;\n            // read rels\n            let data = yield ((_a = this.zip.file('xl/_rels/workbook.xml.rels')) === null || _a === void 0 ? void 0 : _a.async('text'));\n            this.rels_dom = elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(data);\n            this.rels = {};\n            this.rels_dom.findall('./Relationship').forEach((rel) => {\n                const rid = rel.attrib.Id;\n                if (rid) {\n                    this.rels[rid] = {\n                        id: rel.attrib.Id,\n                        type: rel.attrib.Type,\n                        target: rel.attrib.Target\n                    };\n                }\n            });\n            // read workbook\n            data = (yield ((_b = this.zip.file('xl/workbook.xml')) === null || _b === void 0 ? void 0 : _b.async('text')));\n            yield this.ReadStringsTable();\n            yield this.ReadTheme();\n            yield this.ReadStyles();\n            // create initial sheets; use relationship (rid) to map\n            this.dom = elementtree__WEBPACK_IMPORTED_MODULE_0__.parse(data);\n            this.sheets = []; // {};\n            ///\n            const workbook_view = this.dom.find('./bookViews/workbookView');\n            if ((_c = workbook_view === null || workbook_view === void 0 ? void 0 : workbook_view.attrib) === null || _c === void 0 ? void 0 : _c.activeTab) {\n                this.active_tab = Number((_d = workbook_view === null || workbook_view === void 0 ? void 0 : workbook_view.attrib) === null || _d === void 0 ? void 0 : _d.activeTab) || 0;\n            }\n            /*\n            <bookViews>\n              <workbookView xWindow=\"40410\" yWindow=\"4665\" windowWidth=\"24645\" windowHeight=\"15690\" firstSheet=\"1\" activeTab=\"2\"\n            */\n            ///\n            this.dom.findall('./sheets/sheet').forEach((sheet) => {\n                const name = sheet.attrib.name;\n                const state = sheet.attrib.state;\n                if (name) {\n                    const worksheet = new _sheet__WEBPACK_IMPORTED_MODULE_1__.Sheet({\n                        // wb: wb,\n                        name: sheet.attrib.name,\n                        id: Number(sheet.attrib.sheetId),\n                        rid: sheet.attrib['r:id']\n                    });\n                    if (state === 'hidden') {\n                        worksheet.visible_state = _sheet__WEBPACK_IMPORTED_MODULE_1__.VisibleState.hidden;\n                    }\n                    else if (state === 'veryHidden') {\n                        worksheet.visible_state = _sheet__WEBPACK_IMPORTED_MODULE_1__.VisibleState.very_hidden;\n                    }\n                    worksheet.shared_strings = this.shared_strings;\n                    // this.sheets[name] = worksheet;\n                    this.sheets.push(worksheet);\n                }\n            });\n            // await this.GetWorksheets(Object.keys(this.sheets).slice(0), preparse);\n            yield this.GetWorksheets(preparse, read_rels);\n        });\n    }\n}\n\n\n//# sourceURL=webpack://treb/./treb-export/src/workbook.ts?");

/***/ }),

/***/ "./treb-format/src/format.ts":
/*!***********************************!*\
  !*** ./treb-format/src/format.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LotusDate\": () => (/* binding */ LotusDate),\n/* harmony export */   \"UnlotusDate\": () => (/* binding */ UnlotusDate),\n/* harmony export */   \"NumberFormat\": () => (/* binding */ NumberFormat)\n/* harmony export */ });\n/* harmony import */ var _format_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format_parser */ \"./treb-format/src/format_parser.ts\");\n/* harmony import */ var _number_format_section__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./number_format_section */ \"./treb-format/src/number_format_section.ts\");\n/* harmony import */ var treb_base_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! treb-base-types */ \"./treb-base-types/src/index.ts\");\n\n\n\n//\n// excel time is explicitly universal, so we need all dates in and out \n// to be UTC. we can't use local time because of daylight savings (which\n// excel ignores)\n// \n// the actual epoch is \"January 0\" -- I suppose that === Dec 31?\n//\n// const base_date = -2209075200000; // new Date('1899-12-31 00:00:00 Z').getTime();\n//\n// excel time is 1 == 1 day, so relative to js time (millis), we need \n// to scale by 1000 * 60 * 60 * 24\n//\n// const date_scale = 86400000;\n//\n// one last thing -- Excel incorrectly treats 1900 as a leap year. this was\n// for compatibility with Lotus 1-2-3, which handled it incorrectly. we will \n// join the party and treat it incorrectly as well.\n// \n// ref:\n// https://docs.microsoft.com/en-us/office/troubleshoot/excel/wrongly-assumes-1900-is-leap-year\n//\n// what about backwards?\n//\n// OK, I can answer that now: Excel just doesn't handle dates before 1900\n// at all. can't parse them; can't handle negative numbers as dates. \n/** convert cell value -> date, using the rules above */\nconst LotusDate = (value) => {\n    if (value >= 60)\n        value--; // March 1, 1900\n    return new Date(-2209075200000 + 86400000 * value);\n};\n/** convert date (as number, utc millis) -> lotus date value */\nconst UnlotusDate = (value, local = true) => {\n    // if the passed value is local, we need to convert it to UTC\n    if (local) {\n        const local_date = new Date(value);\n        const utc_date = new Date();\n        utc_date.setUTCMilliseconds(local_date.getUTCMilliseconds());\n        utc_date.setUTCSeconds(local_date.getUTCSeconds());\n        utc_date.setUTCMinutes(local_date.getUTCMinutes());\n        utc_date.setUTCHours(local_date.getHours());\n        utc_date.setUTCDate(local_date.getDate());\n        utc_date.setUTCMonth(local_date.getMonth());\n        utc_date.setUTCFullYear(local_date.getFullYear());\n        value = utc_date.getTime();\n    }\n    value = (value + 2209075200000) / 86400000;\n    if (value >= 60) {\n        value++;\n    }\n    return value;\n};\n/**\n * unifying date format and number format (really just bolting dates\n * on the side). dates have only a single section, constant pattern, and\n * are immutable.\n */\nclass NumberFormat {\n    constructor(pattern) {\n        // tslint:disable-next-line:variable-name\n        this._pattern = '';\n        this.decimal_zero_regexp = [];\n        // this is a flag for string representation\n        this.cloned = [];\n        /** for the \"General\" field, a magic decimal point */\n        this.magic_decimal = false;\n        this._pattern = pattern;\n        this.sections = _format_parser__WEBPACK_IMPORTED_MODULE_0__.FormatParser.Parse(pattern);\n        // nothing?\n        if (!this.sections.length)\n            this.sections = [];\n        // check zero. we were previously assuming this stepped, but we\n        // now support gaps in format sections (although not at 0?)\n        if (!this.sections[0]) {\n            this.sections[0] = new _number_format_section__WEBPACK_IMPORTED_MODULE_1__.NumberFormatSection(); // pretty sure this cannot happen atm\n        }\n        // do we have a negative section? if not, use the positive\n        // section and prepend a - sign.\n        if (!this.sections[1]) {\n            this.sections[1] = Object.assign({}, this.sections[0]);\n            this.sections[1].prefix = JSON.parse(JSON.stringify(this.sections[1].prefix));\n            this.sections[1].suffix = JSON.parse(JSON.stringify(this.sections[1].suffix));\n            this.sections[1].prefix.push({ text: '-' }); // at end of prefix, before number\n            this.cloned[1] = true;\n        }\n        // do we have a zero section? if not, clone the positive section.\n        if (!this.sections[2]) {\n            this.sections[2] = Object.assign({}, this.sections[0]);\n            this.cloned[2] = true;\n        }\n        // string section, default just reflects the string. we could perhaps\n        // skip this and just have default behavior if there's no section, which\n        // might simplify rendering\n        // UPDATE, special case: unless a string section is explicitly\n        // provided, we use a default '@' section (it's implicit). however,\n        // if there's a literatal '@' in the first section, we want to\n        // propogate that to all empty sections, including the string section.\n        // note that we should not support literal AND numeric sections in\n        // the same block... it will fail silently here... [FIXME: at least warn]\n        if (!this.sections[3]) {\n            for (const part of this.sections[0].prefix) {\n                if (part.flag === treb_base_types__WEBPACK_IMPORTED_MODULE_2__.TextPartFlag.literal) {\n                    this.sections[3] = Object.assign({}, this.sections[0]);\n                    this.sections[3].string_format = true;\n                    this.cloned[3] = true;\n                    break;\n                }\n            }\n        }\n        /*\n        if (!this.sections[3]) {\n          this.sections[3] = new NumberFormatSection();\n          this.sections[3].string_format = true;\n          this.sections[3].prefix = [{ text: '@', flag: TextPartFlag.literal }];\n    \n          // obviously not cloned, but we want the behavior. FIXME: change flag name\n          this.cloned[3] = true;\n        }\n        */\n        this.decimal_zero_regexp = this.sections.map((section) => {\n            if (section.decimal_max_digits > section.decimal_min_digits) {\n                return new RegExp(`0{1,${section.decimal_max_digits - section.decimal_min_digits}}(?:$|e)`);\n            }\n            return undefined;\n        });\n    }\n    /**\n     * render text parts to string\n     * FIXME: move\n     */\n    static FormatPartsAsText(parts, text_width = 0) {\n        let padded = -1;\n        const formatted = parts.map((part, index) => {\n            switch (part.flag) {\n                case treb_base_types__WEBPACK_IMPORTED_MODULE_2__.TextPartFlag.padded:\n                    padded = index;\n                    return part.text;\n                case treb_base_types__WEBPACK_IMPORTED_MODULE_2__.TextPartFlag.hidden:\n                    return part.text.replace(/./g, ' ');\n                case treb_base_types__WEBPACK_IMPORTED_MODULE_2__.TextPartFlag.formatting:\n                    return '';\n                default:\n                    return part.text;\n            }\n        });\n        if (padded >= 0 && text_width) {\n            const total_length = formatted.reduce((a, str, index) => (index === padded) ? a : a + str.length, 0);\n            let tmp = '';\n            for (let i = 0; i < text_width - total_length; i++) {\n                tmp += formatted[padded];\n            }\n            formatted[padded] = tmp;\n        }\n        return formatted.join('');\n    }\n    //  NumberFormat.decimal_mark = Localization.decimal_separator;\n    //  if (NumberFormat.decimal_mark === ',') NumberFormat.grouping_separator = ' ';\n    //  public static decimal_mark: '.'|',' = Localization.decimal_separator;\n    //  public static grouping_separator = (Localization.decimal_separator === '.') ? ',' : ' ';\n    get pattern() {\n        return this._pattern;\n    }\n    /** flag indicates if this is a date format */\n    get date_format() {\n        return this.sections[0] && this.sections[0].date_format;\n    }\n    /** mutate */\n    IncreaseDecimal() {\n        this.sections.forEach((section) => {\n            section.decimal_min_digits++;\n            section.decimal_max_digits = section.decimal_min_digits;\n        });\n    }\n    /** mutate */\n    DecreaseDecimal() {\n        this.sections.forEach((section) => {\n            section.decimal_min_digits = Math.max(0, section.decimal_min_digits - 1);\n            section.decimal_max_digits = section.decimal_min_digits;\n        });\n    }\n    /** mutate */\n    AddGrouping() {\n        this.sections.forEach((section) => {\n            section.grouping = true;\n        });\n    }\n    /** mutate */\n    RemoveGrouping() {\n        this.sections.forEach((section) => {\n            section.grouping = false;\n        });\n    }\n    /** mutate */\n    ToggleGrouping() {\n        // set all to ! the value of the first one \n        const grouping = !this.sections[0].grouping;\n        this.sections.forEach((section) => {\n            section.grouping = grouping;\n        });\n    }\n    /**\n     * generates a string representation. we use this because we are (now)\n     * allowing mutation of formats; therefore we need to serialize them back\n     * to the basic format.\n     */\n    toString() {\n        if (this.sections[0].date_format) {\n            return this._pattern; // immutable\n        }\n        return this.sections.filter((section, i) => {\n            return !this.cloned[i];\n        }).map((section) => {\n            let nf = '';\n            let i = 0;\n            if (section.fraction_format) {\n                if (section.fraction_integer) {\n                    nf += '? ';\n                }\n                let pattern = '';\n                for (let j = 0; j < section.fraction_denominator_digits; j++) {\n                    pattern += '#';\n                }\n                nf += pattern;\n                nf += '/';\n                if (section.fraction_denominator) {\n                    nf += section.fraction_denominator;\n                }\n                else {\n                    nf += pattern;\n                }\n            }\n            else if (section.has_number_format) {\n                for (i = 0; i < section.integer_min_digits; i++) {\n                    nf += '0';\n                }\n                if (section.grouping) {\n                    if (nf.length < 4)\n                        nf = ('####' + nf).slice(-4);\n                    nf = nf.replace(/[\\d#]{1,3}(?=([\\d#]{3})+(?![\\d#]))/g, '$&' + ','); // Localization.grouping_separator);\n                }\n                if (section.decimal_max_digits || section.decimal_min_digits) {\n                    nf += '.'; // Localization.decimal_separator;\n                    for (i = 0; i < section.decimal_min_digits; i++) {\n                        nf += '0';\n                    }\n                    for (; i < section.decimal_max_digits; i++) {\n                        nf += '#';\n                    }\n                }\n                if (section.scaling) {\n                    const count = Math.log10(section.scaling) / 3;\n                    for (i = 0; i < count; i++) {\n                        nf += ',';\n                    }\n                }\n                if (section.exponential) {\n                    nf += 'e';\n                }\n            }\n            return section.prefix.map((part) => {\n                if (part.flag === treb_base_types__WEBPACK_IMPORTED_MODULE_2__.TextPartFlag.hidden) {\n                    return part.text === '0' ? '?' : '_' + part.text;\n                }\n                else if (part.flag === treb_base_types__WEBPACK_IMPORTED_MODULE_2__.TextPartFlag.padded) {\n                    return '*' + part.text;\n                }\n                else if (part.flag === treb_base_types__WEBPACK_IMPORTED_MODULE_2__.TextPartFlag.formatting) {\n                    return '[' + part.text + ']';\n                }\n                return part.text;\n            }).join('') + nf +\n                section.suffix.map((part) => {\n                    if (part.flag === treb_base_types__WEBPACK_IMPORTED_MODULE_2__.TextPartFlag.hidden) {\n                        return part.text === '0' ? '?' : '_' + part.text;\n                    }\n                    else if (part.flag === treb_base_types__WEBPACK_IMPORTED_MODULE_2__.TextPartFlag.padded) {\n                        return '*' + part.text;\n                    }\n                    return part.text;\n                }).join('');\n        }).join(';');\n    }\n    /**\n     * this method composes the format as a set of parts with various\n     * states. it's intended for graphical representation where things\n     * like hidden characters and padding require multiple passes or measurement.\n     */\n    FormatParts(value) {\n        // new, shortcut\n        if (typeof value !== 'number' && !this.sections[3]) {\n            return [{ text: value.toString() }]; // unreachable because we ensure 4 sections\n        }\n        const { parts, section } = this.BaseFormat(value);\n        let text_parts = [];\n        if (section.date_format || section.string_format) {\n            for (const part of parts) {\n                if (typeof part === 'string')\n                    text_parts.push({ text: part });\n                else\n                    text_parts.push(part);\n            }\n        }\n        else {\n            // magic \n            if (this.magic_decimal && parts[1] === '') {\n                parts.splice(1, 1);\n            }\n            text_parts = [\n                ...(section.prefix.map((text_part) => {\n                    return Object.assign({}, text_part);\n                })),\n                { text: section.has_number_format ? parts.join(treb_base_types__WEBPACK_IMPORTED_MODULE_2__.Localization.decimal_separator) : '' },\n                ...(section.suffix.map((text_part) => {\n                    return Object.assign({}, text_part);\n                })),\n            ];\n        }\n        for (let i = 1; i < text_parts.length; i++) {\n            if (text_parts[i].flag === text_parts[i - 1].flag) {\n                text_parts[i].text = text_parts[i - 1].text + text_parts[i].text;\n                text_parts[i - 1].text = '';\n            }\n        }\n        return text_parts.filter((text_part) => text_part.text); // remove empty\n    }\n    /**\n     * formats a number as text.\n     *\n     * this method will use a single space to replace hidden (leading-underscore)\n     * characters. if a text width is provided, it will use that for padding;\n     * otherwise the padding character (we only allow a single padding character)\n     * is rendered once.\n     *\n     * FIXME: date, string (this is lagging)\n     * UPDATE: unifying, basing this on the text part functionality\n     */\n    Format(value, text_width = 0) {\n        /*\n        const parts = this.FormatParts(value);\n        let padded = -1;\n    \n        const formatted = parts.map((part, index) => {\n          switch (part.flag) {\n            case TextPartFlag.padded:\n              padded = index;\n              return part.text;\n    \n            case TextPartFlag.hidden:\n              return part.text.replace(/./g, ' ');\n    \n            case TextPartFlag.formatting:\n              return '';\n    \n            default:\n              return part.text;\n          }\n        });\n    \n        if (padded >= 0 && text_width) {\n          const total_length = formatted.reduce((a, str, index) => (index === padded) ? a : a + str.length, 0);\n          let tmp = '';\n          for (let i = 0; i < text_width - total_length; i++){\n            tmp += formatted[padded];\n          }\n          formatted[padded] = tmp;\n        }\n    \n        return formatted.join('');\n        */\n        return NumberFormat.FormatPartsAsText(this.FormatParts(value), text_width);\n    }\n    ZeroPad(text, length) {\n        while (text.length < length)\n            text = '0' + text;\n        return text;\n    }\n    DateFormat(value) {\n        const date = LotusDate(value);\n        const section = this.sections[0];\n        let hours = date.getUTCHours();\n        if (section.twelve_hour) {\n            if (hours > 12)\n                hours -= 12;\n            if (hours === 0)\n                hours = 12;\n        }\n        const parts = section.prefix.map((part) => {\n            if (part.flag === treb_base_types__WEBPACK_IMPORTED_MODULE_2__.TextPartFlag.date_component_minutes) {\n                if (part.text === 'mm') {\n                    return { text: this.ZeroPad((date.getUTCMinutes()).toString(), 2) };\n                }\n                return { text: this.ZeroPad((date.getUTCMinutes()).toString(), 1) };\n            }\n            else if (part.flag === treb_base_types__WEBPACK_IMPORTED_MODULE_2__.TextPartFlag.date_component) {\n                switch (part.text.toLowerCase()) {\n                    case 'am/pm':\n                    case 'a/p':\n                        {\n                            const elements = part.text.split('/');\n                            return { text: date.getUTCHours() > 12 ? elements[1] : elements[0] };\n                        }\n                    case 'mmmmm':\n                        return { text: treb_base_types__WEBPACK_IMPORTED_MODULE_2__.Localization.date_components.long_months[date.getUTCMonth()][0] };\n                    case 'mmmm':\n                        if (part.text === 'MMMM') {\n                            return { text: treb_base_types__WEBPACK_IMPORTED_MODULE_2__.Localization.date_components.long_months[date.getUTCMonth()].toUpperCase() };\n                        }\n                        return { text: treb_base_types__WEBPACK_IMPORTED_MODULE_2__.Localization.date_components.long_months[date.getUTCMonth()] };\n                    case 'mmm':\n                        if (part.text === 'MMM') {\n                            return { text: treb_base_types__WEBPACK_IMPORTED_MODULE_2__.Localization.date_components.short_months[date.getUTCMonth()].toUpperCase() };\n                        }\n                        return { text: treb_base_types__WEBPACK_IMPORTED_MODULE_2__.Localization.date_components.short_months[date.getUTCMonth()] };\n                    case 'mm':\n                        return { text: this.ZeroPad((date.getUTCMonth() + 1).toString(), 2) };\n                    case 'm':\n                        return { text: this.ZeroPad((date.getUTCMonth() + 1).toString(), 1) };\n                    case 'ddddd':\n                    case 'dddd':\n                        if (part.text === 'DDDDD' || part.text === 'DDDD') {\n                            return { text: treb_base_types__WEBPACK_IMPORTED_MODULE_2__.Localization.date_components.long_days[date.getUTCDay()].toUpperCase() };\n                        }\n                        return { text: treb_base_types__WEBPACK_IMPORTED_MODULE_2__.Localization.date_components.long_days[date.getUTCDay()] };\n                    case 'ddd':\n                        if (part.text === 'DDD') {\n                            return { text: treb_base_types__WEBPACK_IMPORTED_MODULE_2__.Localization.date_components.short_days[date.getUTCDay()].toUpperCase() };\n                        }\n                        return { text: treb_base_types__WEBPACK_IMPORTED_MODULE_2__.Localization.date_components.short_days[date.getUTCDay()] };\n                    case 'dd':\n                        return { text: this.ZeroPad((date.getUTCDate()).toString(), 2) };\n                    case 'd':\n                        return { text: this.ZeroPad((date.getUTCDate()).toString(), 1) };\n                    case 'yyyy':\n                    case 'yyy':\n                        return { text: date.getUTCFullYear().toString() };\n                    case 'yy':\n                    case 'y':\n                        // return { text: (date.getUTCFullYear() % 100).toString() };\n                        return { text: this.ZeroPad((date.getUTCFullYear() % 100).toString(), 2) };\n                    case 'hh':\n                        return { text: this.ZeroPad(hours.toString(), 2) };\n                    case 'h':\n                        return { text: this.ZeroPad(hours.toString(), 1) };\n                    case 'ss':\n                        return { text: this.ZeroPad((date.getUTCSeconds()).toString(), 2) };\n                    case 's':\n                        return { text: this.ZeroPad((date.getUTCSeconds()).toString(), 1) };\n                }\n                const match = part.text.match(/^(s+)\\.(0+)$/);\n                if (match) {\n                    return {\n                        text: this.ZeroPad(date.getUTCSeconds().toString(), match[1].length) +\n                            treb_base_types__WEBPACK_IMPORTED_MODULE_2__.Localization.decimal_separator +\n                            (date.getUTCMilliseconds() / 1000).toFixed(match[2].length).substr(2),\n                    };\n                }\n            }\n            return Object.assign({}, part); // text: part.text, state: part.state};\n        });\n        return { parts, section };\n    }\n    StringFormat(value, section) {\n        const parts = [];\n        for (const part of section.prefix) {\n            if (part.flag === treb_base_types__WEBPACK_IMPORTED_MODULE_2__.TextPartFlag.literal) {\n                parts.push({ text: value });\n            }\n            else\n                parts.push(Object.assign({}, part));\n        }\n        return {\n            parts, section,\n        };\n    }\n    /*\n    public DecimalAdjustRound(value: number, exp: number) {\n  \n      if (!exp) { return Math.round(value); }\n  \n      value = +value;\n      // exp = +exp;\n  \n      // Shift\n      let values = value.toString().split('e');\n      value = Math.round(+(values[0] + 'e' + (values[1] ? (+values[1] - exp) : -exp)));\n  \n      // Shift back\n      values = value.toString().split('e');\n      return +(values[0] + 'e' + (values[1] ? (+values[1] + exp) : exp));\n  \n    }\n    */\n    Round2(value, digits) {\n        const m = Math.pow(10, digits);\n        return Math.round(m * value) / m;\n    }\n    FormatFraction(value, section) {\n        if (section.percent) {\n            value *= 100;\n        }\n        let candidate = {\n            denominator: 1,\n            numerator: Math.round(value),\n            error: Math.abs(Math.round(value) - value),\n        };\n        if (section.fraction_denominator) {\n            candidate.denominator = section.fraction_denominator;\n            candidate.numerator = Math.round(value * candidate.denominator);\n        }\n        else {\n            if (candidate.error) {\n                const limit = NumberFormat.fraction_limits[section.fraction_denominator_digits - 1] || NumberFormat.fraction_limits[0];\n                for (let denominator = 2; denominator <= limit; denominator++) {\n                    const numerator = Math.round(value * denominator);\n                    const error = Math.abs(numerator / denominator - value);\n                    if (error < candidate.error) {\n                        candidate = {\n                            numerator, denominator, error,\n                        };\n                        if (!error) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        const text = [];\n        if (section.fraction_integer) {\n            const integer = Math.floor(candidate.numerator / candidate.denominator);\n            candidate.numerator %= candidate.denominator;\n            if (integer || !candidate.numerator) {\n                text.push(integer.toString());\n                if (candidate.numerator) {\n                    text.push(' ');\n                }\n            }\n        }\n        else if (!candidate.numerator) {\n            text.push('0');\n        }\n        if (candidate.numerator) {\n            text.push(candidate.numerator.toString());\n            text.push('/');\n            text.push(candidate.denominator.toString());\n        }\n        return text.join('');\n    }\n    BaseFormat(value) {\n        if (this.sections[0].date_format) {\n            return this.DateFormat(Number(value));\n        }\n        if (typeof value !== 'number') {\n            return this.StringFormat(value.toString(), this.sections[3]);\n        }\n        let section = this.sections[0];\n        let zero_regexp = this.decimal_zero_regexp[0];\n        if (value < 0) {\n            section = this.sections[1];\n        }\n        const max_digits = section.percent ?\n            section.decimal_max_digits + 2 :\n            section.decimal_max_digits;\n        const epsilon = Math.pow(10, -max_digits) / 2;\n        let abs_value = Math.abs(value);\n        if (abs_value < epsilon) {\n            section = this.sections[2];\n            zero_regexp = this.decimal_zero_regexp[2];\n        }\n        // there's kind of a weird thing here where we might have\n        // a non-zero number but scaling turns it into zero...\n        if (section.scaling) {\n            abs_value /= section.scaling;\n            if (abs_value < epsilon) {\n                section = this.sections[2];\n                zero_regexp = this.decimal_zero_regexp[2];\n            }\n        }\n        if (section.string_format) {\n            return this.StringFormat(value.toString(), section);\n        }\n        let representation = '';\n        // special handling for fractions skips most of the other bits\n        if (section.fraction_format) {\n            return { parts: [this.FormatFraction(abs_value, section)], section };\n        }\n        if (section.exponential) {\n            representation = abs_value.toExponential(section.decimal_max_digits);\n        }\n        else {\n            if (section.percent) {\n                abs_value *= 100;\n            }\n            representation = this.Round2(abs_value, section.decimal_max_digits).toFixed(section.decimal_max_digits);\n        }\n        if (zero_regexp) {\n            representation = representation.replace(zero_regexp, '');\n        }\n        const parts = representation.split('.');\n        while (parts[0].length < section.integer_min_digits) {\n            parts[0] = ('0000000000000000' + parts[0]).slice(-section.integer_min_digits);\n        }\n        if (section.integer_min_digits === 0 && parts[0] === '0') {\n            parts[0] = ''; // not sure why anyone would want that\n        }\n        if (section.grouping) {\n            parts[0] = parts[0].replace(NumberFormat.grouping_regexp, '$&' + treb_base_types__WEBPACK_IMPORTED_MODULE_2__.Localization.grouping_separator);\n        }\n        return { parts, section };\n    }\n}\nNumberFormat.grouping_regexp = /\\d{1,3}(?=(\\d{3})+(?!\\d))/g;\nNumberFormat.fraction_limits = [9, 99, 999, 9999];\n\n\n//# sourceURL=webpack://treb/./treb-format/src/format.ts?");

/***/ }),

/***/ "./treb-format/src/format_cache.ts":
/*!*****************************************!*\
  !*** ./treb-format/src/format_cache.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NumberFormatCache\": () => (/* binding */ NumberFormatCache)\n/* harmony export */ });\n/* harmony import */ var _format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format */ \"./treb-format/src/format.ts\");\n\n/**\n * since users almost always make caches, we might as well\n * support a universal cache. also universal base (named) types.\n *\n * note that for this reason, you shouldn't mutate number formats.\n * mutate copies instead.\n */\nclass NumberFormatCache {\n    static Get(format) {\n        // FIXME: we should use icase for symbolc formats, although not\n        // for format strings. there should (hopefully) be no case where\n        // these overlap.\n        const canonical_name = this.symbolc_name_map[format.toLowerCase()];\n        let formatter = this.cache[canonical_name || format];\n        if (!formatter) {\n            formatter = new _format__WEBPACK_IMPORTED_MODULE_0__.NumberFormat(format);\n            this.cache[format] = formatter;\n        }\n        return formatter;\n    }\n    /**\n     * does anyone use this? (...)\n     */\n    static Equals(a, b) {\n        if (a === b)\n            return true;\n        const fa = this.Get(a);\n        const fb = this.Get(b);\n        return fa.pattern === fb.pattern;\n    }\n    /**\n     * this method is used to translate symbolic formats,\n     * without actually creating a formatter. it's a shortcut\n     * we need for exporting to xlsx.\n     *\n     * if the passed format matches a symbolic format, we return\n     * the string representation. if it doesn't match any symbolic format,\n     * the string is returned as-is.\n     */\n    static Translate(format) {\n        const mapped = this.symbolc_name_map[format.toLowerCase()];\n        return mapped ? this.cache[mapped].toString() : format;\n        // const formatter = this.cache[format];\n        // if (formatter) { return formatter.toString(); }\n        // return format;\n    }\n    /**\n     * check if the format (as a number format) matches a local\n     * symbolic name and if so, return that.\n     */\n    static SymbolicName(format) {\n        for (const key of Object.keys(this.base_formats)) {\n            if (format === this.base_formats[key])\n                return key;\n        }\n        return null;\n    }\n    static InitCache() {\n        for (const key of Object.keys(this.base_formats)) {\n            this.cache[key] = new _format__WEBPACK_IMPORTED_MODULE_0__.NumberFormat(this.base_formats[key]);\n            this.symbolc_name_map[key.toLowerCase()] = key;\n        }\n        // we're doing this to hide it, but we might as well allow it\n        // since js interfaces will find it regardless\n        this.cache['General'].magic_decimal = true;\n        for (const key of Object.keys(this.aliases)) {\n            this.cache[key] = this.cache[this.aliases[key]];\n            this.symbolc_name_map[key.toLowerCase()] = key;\n        }\n    }\n}\n/** cache instance */\nNumberFormatCache.cache = {};\n/**\n * this map is for case-insensitive mapping symbolic names to formats. we\n * want symbolic names with casing, primarily for interop, but we also want\n * to support icase matching.\n *\n * FIXME: is there a better way to do this, with a pattern or something in\n * the cache?\n */\nNumberFormatCache.symbolc_name_map = {};\n/** base types, with default names */\nNumberFormatCache.base_formats = {\n    Accounting: '_(#,##0.00_);(#,##0.00);-???',\n    Number: '0.00',\n    Integer: '0',\n    Percent: '0.00%',\n    General: '0.######',\n    Fraction: '# ?/?',\n    Dollar: '$* _(#,##0.00_);$* (#,##0.00);$* -???',\n    Exponential: '0.000e',\n    'Short Date': 'mm/dd/yy',\n    'Long Date': 'dddd, mmm d yyyy',\n    Timestamp: 'mm-dd-yy hh:mm:ss',\n};\n/** alias types */\nNumberFormatCache.aliases = {\n    Scientific: 'Exponential',\n    Percentage: 'Percent',\n    Currency: 'Dollar',\n    /*\n    // we switched to Uppercase symbolic names to better\n    // match imported files, but we have legacy stuff using\n    // lowercase, so add aliases.\n\n    accounting: 'Accounting',\n    number: 'Number',\n    integer: 'Integer',\n    percent: 'Percent',\n    general: 'General',\n    dollar: 'Dollar',\n    exponential: 'Exponential',\n\n    'short date': 'Short Date',\n    'long date': 'Long Date',\n    timestamp: 'Timestamp',\n    */\n};\n// is there a pattern for this? or a preferred way? I'm actually\n// concerned that an optimizer might remove the method.\nNumberFormatCache.InitCache();\n// (self as any).NFC = NumberFormatCache;\n\n\n//# sourceURL=webpack://treb/./treb-format/src/format_cache.ts?");

/***/ }),

/***/ "./treb-format/src/format_parser.ts":
/*!******************************************!*\
  !*** ./treb-format/src/format_parser.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"FormatParser\": () => (/* binding */ FormatParser)\n/* harmony export */ });\n/* harmony import */ var _number_format_section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number_format_section */ \"./treb-format/src/number_format_section.ts\");\n/* harmony import */ var treb_base_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! treb-base-types */ \"./treb-base-types/src/index.ts\");\n\n\nconst ASTERISK = 0x2A; // TODO\nconst UNDERSCORE = 0x5F; // TODO\nconst QUESTION_MARK = 0x3F;\nconst ZERO = 0x30;\nconst PERIOD = 0x2E;\nconst SPACE = 0x20;\nconst COMMA = 0x2C;\nconst PERCENT = 0x25;\nconst DOUBLE_QUOTE = 0x22;\nconst NUMBER_SIGN = 0x23;\nconst SEMICOLON = 0x3B;\nconst BACKSLASH = 0x5C;\nconst FORWARDSLASH = 0x2F;\nconst AT = 0x40;\nconst LEFT_BRACE = 0x5B;\nconst RIGHT_BRACE = 0x5D;\nconst UPPERCASE_E = 0x45;\nconst LOWERCASE_E = 0x65;\nconst UPPERCASE_H = 0x48;\nconst LOWERCASE_H = 0x68;\nconst UPPERCASE_M = 0x4D;\nconst LOWERCASE_M = 0x6D;\nconst UPPERCASE_S = 0x53;\nconst LOWERCASE_S = 0x73;\nconst UPPERCASE_D = 0x44;\nconst LOWERCASE_D = 0x64;\nconst UPPERCASE_Y = 0x59;\nconst LOWERCASE_Y = 0x79;\nconst UPPERCASE_A = 0x41;\nconst LOWERCASE_A = 0x61;\nvar NumberPart;\n(function (NumberPart) {\n    NumberPart[NumberPart[\"Integer\"] = 0] = \"Integer\";\n    NumberPart[NumberPart[\"Decimal\"] = 1] = \"Decimal\";\n})(NumberPart || (NumberPart = {}));\nclass FormatParser {\n    /**\n     * parser is static (essentially a singleton). state is ephemeral.\n     *\n     * it's a little hard to unify parsing for dates and numbers.\n     * luckily we don't have to parse that often; only when a format\n     * is created. so we will do some extra work here.\n     */\n    static Parse(pattern) {\n        // local\n        this.pattern = pattern;\n        // convert to numbers\n        this.characters = pattern.split('').map((char) => char.charCodeAt(0));\n        // pointer\n        this.char_index = 0;\n        // allocate initial section\n        this.current_section = new _number_format_section__WEBPACK_IMPORTED_MODULE_0__.NumberFormatSection();\n        this.sections = [this.current_section];\n        // check if it's a date, if so we can move on\n        if (this.ParseDatePattern()) {\n            return this.sections;\n        }\n        // not a date; reset and try again\n        this.char_index = 0;\n        this.current_section = new _number_format_section__WEBPACK_IMPORTED_MODULE_0__.NumberFormatSection();\n        this.sections = [this.current_section];\n        // parse\n        while (this.char_index < this.characters.length) {\n            this.ConsumeChar();\n        }\n        // result\n        return this.sections;\n    }\n    static ConsumeString() {\n        let text = '';\n        if (this.preserve_formatting_characters) {\n            text += this.pattern[this.char_index]; // \"\n        }\n        for (++this.char_index; this.char_index < this.characters.length; this.char_index++) {\n            const char = this.characters[this.char_index];\n            switch (char) {\n                case BACKSLASH: // escape character\n                    if (this.preserve_formatting_characters) {\n                        text += this.pattern[this.char_index];\n                    }\n                    if ((this.char_index + 1) < this.characters.length) {\n                        text += this.pattern[++this.char_index];\n                    }\n                    break;\n                case DOUBLE_QUOTE:\n                    if (this.preserve_formatting_characters) {\n                        text += this.pattern[this.char_index]; // \"\n                    }\n                    this.char_index++;\n                    return text;\n                default:\n                    text += this.pattern[this.char_index];\n                    break;\n            }\n        }\n        throw new Error('unterminated string');\n    }\n    static ConsumeFormatting() {\n        let text = '';\n        for (++this.char_index; this.char_index < this.characters.length; this.char_index++) {\n            const char = this.characters[this.char_index];\n            switch (char) {\n                case BACKSLASH:\n                    throw new Error('invalid escape character in formatting block');\n                case RIGHT_BRACE:\n                    this.char_index++;\n                    return text;\n                default:\n                    text += this.pattern[this.char_index];\n                    break;\n            }\n        }\n        throw new Error('unterminated format');\n    }\n    /**\n     * pre-scan for fractional format, check for legal/illegal chars.\n     * fraction format has an optional integer, spaces, then the fractional\n     * part.\n     *\n     * except for the denominator, all characters are represented as # or ?,\n     * but formats seem to be a little forgiving (not sure we have to be).\n     * essentially, should look something like\n     * ```\n     * # ##/##\n     * ? ??/??\n     * #/32\n     * #/64\n     * # #/16\n     * ```\n     */\n    static ScanFractionFormat() {\n        const fraction_regex = /^([#?]+ +){0,1}([#?]+)\\/([#?0-9]+)(?:$|[^#?0-9])/;\n        const text = this.pattern.substr(this.char_index);\n        const match = text.match(fraction_regex);\n        if (!match) {\n            return false;\n        }\n        const len = (match[1] || '').length + match[2].length + match[3].length + 1;\n        // flag\n        this.current_section.fraction_format = true;\n        // has integer section\n        this.current_section.fraction_integer = !!match[1];\n        // fixed denominator\n        const fixed_denominator = Number(match[3]);\n        if (!isNaN(fixed_denominator)) {\n            this.current_section.fraction_denominator = fixed_denominator;\n        }\n        // we do this regardless; it's used when collapsing values to zero\n        this.current_section.decimal_max_digits = this.current_section.fraction_denominator_digits = match[3].length;\n        this.char_index += len;\n        this.current_section.has_number_format = true;\n        return true;\n    }\n    /**\n     * number format proper contains only the following characters:\n     * +-0#.,\n     * anything else will be ignored\n     *\n     * [UPDATE] fractional number formats can contain spaces and\n     * the / character (in fact they would have to contain that).\n     *\n     */\n    static ConsumeNumberFormat() {\n        let number_part = NumberPart.Integer;\n        for (this.char_index; this.char_index < this.characters.length; this.char_index++) {\n            const char = this.characters[this.char_index];\n            switch (char) {\n                case this.group_separator:\n                    {\n                        // the behavior of this token is different at the end of the number\n                        // format. in that case, each comma represents 'scale by 1000'. so\n                        // we need to do lookahead... but we only one character?\n                        let lookahead_digit = false;\n                        for (let i = this.char_index + 1; !lookahead_digit && i < this.characters.length; i++) {\n                            const next_char = this.characters[i];\n                            if (next_char === this.decimal_mark\n                                || next_char === NUMBER_SIGN\n                                || next_char === ZERO) {\n                                lookahead_digit = true;\n                            }\n                            else if (next_char !== COMMA) {\n                                break;\n                            }\n                        }\n                        if (lookahead_digit) {\n                            if (number_part === NumberPart.Decimal) {\n                                throw new Error('invalid grouping in decimal part');\n                            }\n                            this.current_section.grouping = true;\n                        }\n                        else {\n                            this.current_section.scaling = (this.current_section.scaling || 1) * 1000;\n                        }\n                    }\n                    break;\n                case this.decimal_mark:\n                    if (number_part === NumberPart.Decimal) {\n                        throw new Error('too many decimal marks');\n                    }\n                    number_part = NumberPart.Decimal;\n                    break;\n                case NUMBER_SIGN:\n                    // spacing. allowing for some junk, we treat these as required\n                    // if they're inside of zeros (after in the case of integer, before\n                    // in the case of decimal)\n                    if (number_part === NumberPart.Decimal) {\n                        this.current_section.decimal_max_digits++;\n                    }\n                    else if (this.current_section.integer_min_digits) {\n                        this.current_section.integer_min_digits++;\n                    }\n                    break;\n                case ZERO:\n                    // required digit.\n                    if (number_part === NumberPart.Decimal) {\n                        this.current_section.decimal_max_digits++;\n                        this.current_section.decimal_min_digits = this.current_section.decimal_max_digits;\n                    }\n                    else {\n                        this.current_section.integer_min_digits++;\n                    }\n                    break;\n                default:\n                    // non-number format character; we're done?\n                    return;\n            }\n        }\n    }\n    static AppendCharAsText(advance_pointer = true) {\n        if (this.current_section.has_number_format) {\n            this.current_section.suffix[this.current_section.suffix.length - 1].text += this.pattern[this.char_index];\n        }\n        else {\n            this.current_section.prefix[this.current_section.prefix.length - 1].text += this.pattern[this.char_index];\n        }\n        if (advance_pointer) {\n            this.char_index++;\n        }\n    }\n    static AppendString(text) {\n        if (this.current_section.has_number_format) {\n            this.current_section.suffix[this.current_section.suffix.length - 1].text += text;\n        }\n        else {\n            this.current_section.prefix[this.current_section.prefix.length - 1].text += text;\n        }\n    }\n    static AppendTextPart(part) {\n        if (this.current_section.has_number_format) {\n            this.current_section.suffix.push(part);\n            this.current_section.suffix.push({ text: '' });\n        }\n        else {\n            this.current_section.prefix.push(part);\n            this.current_section.prefix.push({ text: '' });\n        }\n    }\n    static ConsumeChar() {\n        const char = this.characters[this.char_index];\n        // check for fraction format. this can't happen in a string section,\n        // and if there's already a number format then treat it as text (garbage).\n        if (char === QUESTION_MARK || char === NUMBER_SIGN) {\n            if (!this.current_section.has_number_format &&\n                !this.current_section.string_format &&\n                this.ScanFractionFormat()) {\n                return;\n            }\n        }\n        switch (char) {\n            case SEMICOLON:\n                // FIXME: there's a concept of an \"empty\" section, which is\n                // zero-length text between semicolons (or before the first\n                // semicolon). we should treat those as cloned or synthentic.\n                // actually, is that legal for the first section? possibly not.\n                this.char_index++; // discard\n                this.current_section = new _number_format_section__WEBPACK_IMPORTED_MODULE_0__.NumberFormatSection();\n                if (this.sections.length === 3)\n                    this.current_section.string_format = true;\n                this.sections.push(this.current_section);\n                break;\n            case AT:\n                this.char_index++;\n                this.AppendTextPart({\n                    text: '@', flag: treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.literal,\n                });\n                this.current_section.string_format = true; // force\n                break;\n            case ZERO:\n            case NUMBER_SIGN:\n            case PERIOD:\n            case COMMA:\n                // only one actual format. anything else is treated as text.\n                // also skip for string format (#4)\n                if (!this.current_section.has_number_format && !this.current_section.string_format) {\n                    this.ConsumeNumberFormat();\n                    this.current_section.has_number_format = true;\n                }\n                else {\n                    this.AppendCharAsText();\n                }\n                break;\n            case LEFT_BRACE:\n                this.AppendTextPart({ text: this.ConsumeFormatting(), flag: treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.formatting });\n                break;\n            case DOUBLE_QUOTE:\n                this.AppendString(this.ConsumeString());\n                break;\n            case QUESTION_MARK: // this is like _0\n                if (this.preserve_formatting_characters) {\n                    this.AppendCharAsText();\n                }\n                else {\n                    this.AppendTextPart({\n                        text: '0',\n                        flag: treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.hidden,\n                    });\n                    this.char_index++;\n                }\n                break;\n            case UNDERSCORE:\n                if (this.preserve_formatting_characters) {\n                    this.AppendCharAsText();\n                }\n                else {\n                    if (++this.char_index >= this.characters.length) {\n                        throw new Error('invalid pad character at end');\n                    }\n                    this.AppendTextPart({\n                        text: this.pattern[this.char_index++],\n                        flag: treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.hidden,\n                    });\n                }\n                break;\n            case ASTERISK:\n                if (this.current_section.has_asterisk) {\n                    throw new Error(`we don't support multiple asterisks`);\n                }\n                if (this.preserve_formatting_characters) {\n                    this.AppendCharAsText();\n                }\n                else {\n                    if (++this.char_index >= this.characters.length) {\n                        throw new Error('invalid pad character at end');\n                    }\n                    this.AppendTextPart({\n                        text: this.pattern[this.char_index++],\n                        flag: treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.padded,\n                    });\n                    this.current_section.has_asterisk = true;\n                }\n                break;\n            case LOWERCASE_E:\n            case UPPERCASE_E:\n                if (this.current_section.percent ||\n                    this.current_section.exponential ||\n                    this.current_section.string_format) {\n                    this.AppendCharAsText();\n                }\n                else {\n                    this.current_section.exponential = true;\n                    this.char_index++;\n                }\n                break;\n            case PERCENT:\n                if (!this.current_section.exponential && !this.current_section.string_format) {\n                    this.current_section.percent = true;\n                }\n                this.AppendCharAsText();\n                break;\n            case BACKSLASH:\n                if (this.preserve_formatting_characters) {\n                    this.AppendCharAsText(false);\n                }\n                if (++this.char_index >= this.characters.length) {\n                    throw new Error('invalid escape character at end');\n                }\n                this.AppendCharAsText();\n                break;\n            default:\n                this.AppendCharAsText();\n        }\n    }\n    /**\n     * we treat it as a date pattern if there's an unquoted date/time letter\n     * (one of [hmsdyHMSDY]). technically mixing date formats and number\n     * formats (#0) is illegal. we will just drop into number formats for those.\n     */\n    static ParseDatePattern() {\n        this.date_pattern = true;\n        while (this.date_pattern && this.char_index < this.pattern.length) {\n            this.DatePatternConsumeChar();\n        }\n        // one more check: there has to be a date format part in there\n        if (this.date_pattern) {\n            this.date_pattern = false;\n            for (const section of this.sections) {\n                for (const part of section.prefix) {\n                    // tslint:disable-next-line: no-bitwise\n                    if (part.flag && (part.flag & (treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.date_component | treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.date_component_minutes))) {\n                        this.date_pattern = true;\n                    }\n                }\n            }\n        }\n        // if it _is_ a date pattern, set the section flag.\n        if (this.date_pattern) {\n            this.sections[0].date_format = true;\n            // check for minutes, and set the flag (actually state in the text\n            // part). in date formats mm means months _unless_ it is preceded\n            // by an hh or followed by an ss.\n            this.sections[0].prefix.forEach((item, index) => {\n                if (item.flag === treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.date_component && (item.text === 'mm' || item.text === 'm')) {\n                    if (index) {\n                        for (let i = index - 1; i; i--) {\n                            const test = this.sections[0].prefix[i];\n                            if (test.flag === treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.date_component) {\n                                if (/h/i.test(test.text)) {\n                                    item.flag = treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.date_component_minutes;\n                                    item.text = item.text.toLowerCase(); // normalize\n                                }\n                                break;\n                            }\n                        }\n                    }\n                    if (index < this.sections[0].prefix.length - 1) {\n                        for (let i = index + 1; i < this.sections[0].prefix.length; i++) {\n                            const test = this.sections[0].prefix[i];\n                            if (test.flag === treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.date_component) {\n                                if (/s/i.test(test.text)) {\n                                    item.flag = treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.date_component_minutes;\n                                    item.text = item.text.toLowerCase(); // normalize\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n            });\n        }\n        return this.date_pattern;\n    }\n    /**\n     * date parts are repeated sequences (e.g. ddd). we allow\n     * fractional seconds with ss.00.\n     */\n    static ConsumeDatePart() {\n        const initial_char = this.pattern[this.char_index++];\n        const normalized = initial_char.toLowerCase();\n        const part = {\n            text: initial_char,\n            flag: treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.date_component,\n        };\n        while (this.pattern[this.char_index] && (this.pattern[this.char_index].toLowerCase() === normalized)) {\n            part.text += (this.pattern[this.char_index++]);\n        }\n        // partial seconds\n        if (normalized === 's' && this.pattern[this.char_index] === '.') {\n            part.text += (this.pattern[this.char_index++]);\n            while (this.pattern[this.char_index] === '0') {\n                part.text += (this.pattern[this.char_index++]);\n            }\n        }\n        return part;\n    }\n    /**\n     * special patterns for am/pm in date formats\n     */\n    static ConsumeAMPM() {\n        let test = this.pattern.substr(this.char_index, 5);\n        if (test === 'am/pm' || test === 'AM/PM') {\n            this.char_index += 5;\n            this.sections[0].twelve_hour = true;\n            return { text: test, flag: treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.date_component };\n        }\n        test = this.pattern.substr(this.char_index, 3);\n        if (test === 'a/p' || test === 'A/P') {\n            this.char_index += 3;\n            this.sections[0].twelve_hour = true;\n            return { text: test, flag: treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.date_component };\n        }\n        return undefined;\n    }\n    static DatePatternConsumeChar() {\n        const char = this.characters[this.char_index];\n        switch (char) {\n            case SEMICOLON:\n                // only one section allowed for dates (not sure why). just ignore\n                // everything after the semicolon, but don't invalidate the pattern.\n                this.char_index = this.characters.length; // end\n                break;\n            case ZERO:\n            case NUMBER_SIGN:\n            case LOWERCASE_E:\n            case UPPERCASE_E:\n            case PERCENT:\n            case AT:\n                // case PERIOD:\n                // case COMMA:\n                // this is not a date format.\n                this.date_pattern = false;\n                break;\n            case UPPERCASE_H:\n            case LOWERCASE_H:\n            case UPPERCASE_M:\n            case LOWERCASE_M:\n            case UPPERCASE_S:\n            case LOWERCASE_S:\n            case UPPERCASE_D:\n            case LOWERCASE_D:\n            case UPPERCASE_Y:\n            case LOWERCASE_Y:\n                this.AppendTextPart(this.ConsumeDatePart());\n                break;\n            case UPPERCASE_A:\n            case LOWERCASE_A:\n                {\n                    const ampm = this.ConsumeAMPM();\n                    if (ampm)\n                        this.AppendTextPart(ampm);\n                    else\n                        this.AppendCharAsText();\n                }\n                break;\n            case DOUBLE_QUOTE:\n                this.AppendString(this.ConsumeString());\n                break;\n            case QUESTION_MARK: // this is like _0\n                if (this.preserve_formatting_characters) {\n                    this.AppendCharAsText();\n                }\n                else {\n                    this.AppendTextPart({\n                        text: '0',\n                        flag: treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.hidden,\n                    });\n                    this.char_index++;\n                }\n                break;\n            case UNDERSCORE:\n                if (this.preserve_formatting_characters) {\n                    this.AppendCharAsText();\n                }\n                else {\n                    if (++this.char_index >= this.characters.length) {\n                        throw new Error('invalid pad character at end');\n                    }\n                    this.AppendTextPart({\n                        text: this.pattern[this.char_index++],\n                        flag: treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.hidden,\n                    });\n                }\n                break;\n            case ASTERISK:\n                if (this.current_section.has_asterisk) {\n                    throw new Error(`we don't support multiple asterisks`);\n                }\n                if (this.preserve_formatting_characters) {\n                    this.AppendCharAsText();\n                }\n                else {\n                    if (++this.char_index >= this.characters.length) {\n                        throw new Error('invalid pad character at end');\n                    }\n                    this.AppendTextPart({\n                        text: this.pattern[this.char_index++],\n                        flag: treb_base_types__WEBPACK_IMPORTED_MODULE_1__.TextPartFlag.padded,\n                    });\n                    this.current_section.has_asterisk = true;\n                }\n                break;\n            case BACKSLASH:\n                if (this.preserve_formatting_characters) {\n                    this.AppendCharAsText(false);\n                }\n                if (++this.char_index >= this.characters.length) {\n                    throw new Error('invalid escape character at end');\n                }\n                this.AppendCharAsText();\n                break;\n            default:\n                this.AppendCharAsText();\n        }\n    }\n}\nFormatParser.date_pattern = false;\nFormatParser.pattern = '';\nFormatParser.char_index = 0;\nFormatParser.characters = [];\nFormatParser.sections = [];\nFormatParser.current_section = new _number_format_section__WEBPACK_IMPORTED_MODULE_0__.NumberFormatSection();\nFormatParser.preserve_formatting_characters = false; // true;\n// FIXME: localization\nFormatParser.decimal_mark = PERIOD;\nFormatParser.group_separator = COMMA;\n\n\n//# sourceURL=webpack://treb/./treb-format/src/format_parser.ts?");

/***/ }),

/***/ "./treb-format/src/index.ts":
/*!**********************************!*\
  !*** ./treb-format/src/index.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NumberFormatSection\": () => (/* reexport safe */ _number_format_section__WEBPACK_IMPORTED_MODULE_0__.NumberFormatSection),\n/* harmony export */   \"LotusDate\": () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_1__.LotusDate),\n/* harmony export */   \"NumberFormat\": () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_1__.NumberFormat),\n/* harmony export */   \"UnlotusDate\": () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_1__.UnlotusDate),\n/* harmony export */   \"NumberFormatCache\": () => (/* reexport safe */ _format_cache__WEBPACK_IMPORTED_MODULE_2__.NumberFormatCache),\n/* harmony export */   \"Hints\": () => (/* reexport safe */ _value_parser__WEBPACK_IMPORTED_MODULE_3__.Hints),\n/* harmony export */   \"ValueParser\": () => (/* reexport safe */ _value_parser__WEBPACK_IMPORTED_MODULE_3__.ValueParser)\n/* harmony export */ });\n/* harmony import */ var _number_format_section__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./number_format_section */ \"./treb-format/src/number_format_section.ts\");\n/* harmony import */ var _format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./format */ \"./treb-format/src/format.ts\");\n/* harmony import */ var _format_cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./format_cache */ \"./treb-format/src/format_cache.ts\");\n/* harmony import */ var _value_parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./value_parser */ \"./treb-format/src/value_parser.ts\");\n\n\n\n\n\n\n//# sourceURL=webpack://treb/./treb-format/src/index.ts?");

/***/ }),

/***/ "./treb-format/src/number_format_section.ts":
/*!**************************************************!*\
  !*** ./treb-format/src/number_format_section.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NumberFormatSection\": () => (/* binding */ NumberFormatSection)\n/* harmony export */ });\n/**\n * essentially number formats have a core section with the number\n * (possibly scaled), and some representation before and after.\n * exponential and percentage notation scale the number. exponential\n * is only allowed after the number. percent can come before or after.\n *\n * converting to class, default values\n *\n * FIXME: this should be an interface, you can create a default instance\n *\n */\nclass NumberFormatSection {\n    constructor() {\n        /** flag: this is a date format */\n        this.date_format = false;\n        /** flag: this is the string section, don't format numbers */\n        this.string_format = false;\n        /** flag: this is a fractional format */\n        this.fraction_format = false;\n        /** flag: time in 12-hour format  */\n        this.twelve_hour = false;\n        /** fraction: fixed denominator */\n        this.fraction_denominator = 0;\n        /** fraction includes integer */\n        this.fraction_integer = true;\n        /** align fraction digits (using ???) [TODO] */\n        this.fraction_align = 0;\n        /**\n         * fraction denominator digits. we will limit to [1,4] but this can\n         * be zero if there's an explicit denominator.\n         */\n        this.fraction_denominator_digits = 0;\n        /** prepend zeros */\n        this.integer_min_digits = 0;\n        /** append zeros */\n        this.decimal_min_digits = 0;\n        /** append decimal digits, but not trailing zeros */\n        this.decimal_max_digits = 0;\n        /** use grouping (only supports groups of 3, no matter where you put the ,) */\n        this.grouping = false;\n        /** this is a flag for switching whether we append strings to prefix or suffix */\n        this.has_number_format = false;\n        /** leading string(s) */\n        this.prefix = [{ text: '' }];\n        /** trailing string(s) */\n        this.suffix = [{ text: '' }];\n        /**\n         * thousands scaling (trailing commas in the number format section). we set\n         * to zero for a faster flag if no scaling.\n         */\n        this.scaling = 0;\n        /** flag indicating percent -- will multiply value by 100 */\n        this.percent = false;\n        /** flag indicating exponential -- turns numbers in to exp format */\n        this.exponential = false;\n        /** this is a flag for testing -- we don't support multiple * in a format */\n        this.has_asterisk = false;\n    }\n}\n\n\n//# sourceURL=webpack://treb/./treb-format/src/number_format_section.ts?");

/***/ }),

/***/ "./treb-format/src/value_parser.ts":
/*!*****************************************!*\
  !*** ./treb-format/src/value_parser.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Hints\": () => (/* binding */ Hints),\n/* harmony export */   \"ValueParser\": () => (/* binding */ ValueParser)\n/* harmony export */ });\n/* harmony import */ var treb_base_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! treb-base-types */ \"./treb-base-types/src/index.ts\");\n/* harmony import */ var _format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./format */ \"./treb-format/src/format.ts\");\n\n\n/**\n * this is code that was in the old number format class, which was superceded\n * by the new treb-format module. we still need to do rough value parsing,\n * which is separate from parsing and from formatting.\n *\n * cleaning up to remove redundant bits, move inference in here\n *\n * FIXME: move this somewhere else, this is the format library\n */\n// tslint:disable:no-bitwise\n/** hints is a bitfield */\nvar Hints;\n(function (Hints) {\n    Hints[Hints[\"None\"] = 0] = \"None\";\n    Hints[Hints[\"Nan\"] = 1] = \"Nan\";\n    Hints[Hints[\"Exponential\"] = 2] = \"Exponential\";\n    Hints[Hints[\"Percent\"] = 4] = \"Percent\";\n    Hints[Hints[\"Currency\"] = 8] = \"Currency\";\n    Hints[Hints[\"Grouping\"] = 16] = \"Grouping\";\n    Hints[Hints[\"Parens\"] = 32] = \"Parens\";\n    Hints[Hints[\"Date\"] = 64] = \"Date\";\n    Hints[Hints[\"Time\"] = 128] = \"Time\";\n})(Hints || (Hints = {}));\nconst this_year = new Date().getUTCFullYear();\n/**\n * value parser class is a singleton, instance is exported\n */\nclass ValueParserType {\n    TestDate(text) {\n        // first check if JS can turn it into a date at all. we can\n        // use that as a baseline/initial check (in any event there's\n        // no point in doing the work otherwise)\n        const date_value = Date.parse(text);\n        if (isNaN(date_value)) {\n            // console.info('td false: is nan')\n            return false;\n        }\n        const date = new Date(date_value);\n        // OK so there's a date, now we can do whatever validation we want\n        // is there a regexp for accented characters? actually we can\n        // maybe go backwards... remove things that properly belong in\n        // dates: numbers, dashes and slashes (+ comma, whitespace)\n        // dots are in some l10n systems... maybe we should check first?\n        // Q: what does lowercase do for accented characters? (...)\n        // NOTE: as it turns out, Date.parse() only handles US-EN. so\n        // all this is unecessary (and unused) in other locales. to really\n        // do this properly we will probably need to write our own locale-\n        // aware date parser. which is probably a lot of work. TODO.\n        const tmp = text.replace(/[\\d\\-\\\\/,.\\s]+/g, ' ').toLocaleLowerCase();\n        // then split into individual strings. trim and drop empty\n        const components = tmp.split(/\\s+/).map(component => component.trim()).filter(component => !!component);\n        if (!components.length) {\n            // console.info('td true: no strings');\n            return date_value; // probably a date\n        }\n        // now we'll compare these to stuff we have in l10n. rule (WIP):\n        // should be in month or day-of-week. accept short or long, or one \n        // character. (one character introduces some ambiguity...)\n        // drop 1 character, it's ambiguous and annoying (also hard to handle)\n        // so basically, any string in here has to be a month or day; we can't \n        // have two of either; they have to match what was parsed; and you can't\n        // have a day-of-week but not a month.\n        // FIXME: cache/precalc\n        // let's do it lazily\n        // NOTE: portugeuse seems to include periods in their abbreviations...\n        if (!this.compare_month) {\n            this.compare_month = {};\n            for (let i = 0; i < 12; i++) {\n                this.compare_month[treb_base_types__WEBPACK_IMPORTED_MODULE_0__.Localization.date_components.long_months[i].toLocaleLowerCase().replace(/\\./, '')] = i;\n                this.compare_month[treb_base_types__WEBPACK_IMPORTED_MODULE_0__.Localization.date_components.short_months[i].toLocaleLowerCase().replace(/\\./, '')] = i;\n                // comparison[Localization.date_components.long_months[i][0].toLocaleLowerCase()] = i;\n            }\n        }\n        if (!this.compare_day) {\n            this.compare_day = {};\n            for (let i = 0; i < 7; i++) {\n                this.compare_day[treb_base_types__WEBPACK_IMPORTED_MODULE_0__.Localization.date_components.long_days[i].toLocaleLowerCase().replace(/\\./, '')] = i;\n                this.compare_day[treb_base_types__WEBPACK_IMPORTED_MODULE_0__.Localization.date_components.short_days[i].toLocaleLowerCase().replace(/\\./, '')] = i;\n            }\n        }\n        let found_month = false;\n        let found_day = false;\n        for (const component of components) {\n            let found = false;\n            for (const [month, value] of Object.entries(this.compare_month)) {\n                if (component === month) {\n                    // can't have two months in a single date\n                    if (found_month) {\n                        // console.info('td false: two months')\n                        return false;\n                    }\n                    // have a string match [FIXME: fuzzy?]\n                    // check that the month matches\n                    if (date.getUTCMonth() !== value) {\n                        // console.info('td false: month mismatch')\n                        return false;\n                    }\n                    found = true;\n                    found_month = true;\n                }\n            }\n            if (!found) {\n                for (const [day, value] of Object.entries(this.compare_day)) {\n                    if (component === day) {\n                        // can't have two days either\n                        if (found_day) {\n                            // console.info('td false: two days')\n                            return false;\n                        }\n                        if (date.getUTCDay() !== value) {\n                            // console.info('td false: day mismatch')\n                            return false;\n                        }\n                        found = true;\n                        found_day = true;\n                    }\n                }\n            }\n            if (!found) {\n                // whatever this string is, we don't recognize it. so this is \n                // probably not a date.\n                // console.info('td false: unmatched string')\n                return false;\n            }\n        }\n        // last check: no DOW without month.\n        if (found_day && !found_month) {\n            // console.info('td false: day but no month')\n            return false;\n        }\n        // OK, accept it\n        // console.info('td true: ran out of cases')\n        return date_value;\n    }\n    /**\n     * parse a string. if it can reasonably be converted to a number,\n     * do that and return the number; otherwise return the original\n     * string. we also return hints as to formatting, which the caller\n     * may use to select a number format.\n     *\n     * remind me why this is better than just using a parser? (...)\n     */\n    TryParse(text = '') {\n        let hints = Hints.None;\n        // starts with SINGLE quote mark. express string.\n        if (text[0] === '\\'')\n            return { value: text, type: treb_base_types__WEBPACK_IMPORTED_MODULE_0__.ValueType.string };\n        // empty string, treat as string (should be === 0 though?)\n        if (text === '')\n            return { value: text, type: treb_base_types__WEBPACK_IMPORTED_MODULE_0__.ValueType.string };\n        // we test if the conversion returns NaN, which usually means\n        // it's not a number -- unless the string is actually NaN, which\n        // is something we want to preserve.\n        if (text === 'NaN')\n            return { value: NaN, type: treb_base_types__WEBPACK_IMPORTED_MODULE_0__.ValueType.number, hints: Hints.Nan };\n        let x = text.trim();\n        // x = x.replace(/^[\\$£€]/, '').trim();\n        const currency = x.match(/^[$](.*?)$/);\n        if (currency) {\n            x = currency[1];\n            hints |= Hints.Currency;\n        }\n        const parens = x.match(/^\\((.*?)\\)$/);\n        if (parens) {\n            x = parens[1];\n            hints |= Hints.Parens;\n        }\n        const pct = x.match(/^(.*?)%\\s*$/);\n        if (pct) {\n            x = pct[1];\n            hints |= Hints.Percent;\n        }\n        if (treb_base_types__WEBPACK_IMPORTED_MODULE_0__.Localization.decimal_separator === '.') {\n            if (/,/.test(x)) {\n                x = x.replace(/,/g, '');\n                hints |= Hints.Grouping;\n            }\n        }\n        else {\n            x = x.replace(/(\\d)\\s+/g, '$1'); // remove spaces inside numbers\n            x = x.replace(/\\./g, ''); // remove point separators\n            x = x.replace(/,/, '.'); // convert to US-style\n        }\n        let num = Number(x);\n        if (null === num || isNaN(num)) {\n            // check boolean\n            const lc = text.toLowerCase();\n            if (lc === 'false')\n                return { value: false, type: treb_base_types__WEBPACK_IMPORTED_MODULE_0__.ValueType.boolean };\n            if (lc === 'true')\n                return { value: true, type: treb_base_types__WEBPACK_IMPORTED_MODULE_0__.ValueType.boolean };\n            // check date, but bound on reasonable years...\n            // also maybe parameterize, make this optional\n            // this is too aggressive (at least in chrome). we need to dial it \n            // back a bit. to do that, we will validate any strings in the text\n            // and ensure they look like date components (usually months and days),\n            // within the current locale.    \n            const date = this.TestDate(text);\n            if (false !== date && !isNaN(date)) {\n                // we can drop this bit, now (I think)\n                const check = new Date(date);\n                const year = check.getUTCFullYear();\n                if (year >= (this_year - 200) && year <= (this_year + 200)) {\n                    hints = Hints.Date;\n                    if (check.getHours() || check.getMinutes() || check.getSeconds()) {\n                        hints |= Hints.Time;\n                    }\n                    return {\n                        value: (0,_format__WEBPACK_IMPORTED_MODULE_1__.UnlotusDate)(date),\n                        type: treb_base_types__WEBPACK_IMPORTED_MODULE_0__.ValueType.number,\n                        hints,\n                    };\n                }\n            }\n            return { value: text, type: treb_base_types__WEBPACK_IMPORTED_MODULE_0__.ValueType.string };\n        }\n        if (parens) {\n            num = -num;\n        }\n        if (pct) {\n            // NOTE: this is an attempt to reduce fp errors that arise\n            // if you /100 (or if you /10 twice, which actually helps, but\n            // is not sufficient). there's probably a better way to do this...\n            const sign = num < 0 ? -1 : 1;\n            const split = (sign * num).toString().split('.');\n            split[0] = ('00' + split[0]).replace(/(\\d\\d)$/, '.$1');\n            num = Number(split.join('')) * sign;\n        }\n        if (/e/.test(text))\n            hints |= Hints.Exponential;\n        return { value: num, type: treb_base_types__WEBPACK_IMPORTED_MODULE_0__.ValueType.number, hints };\n    }\n}\nconst ValueParser = new ValueParserType();\n\n\n//# sourceURL=webpack://treb/./treb-format/src/value_parser.ts?");

/***/ }),

/***/ "./treb-parser/src/csv-parser.ts":
/*!***************************************!*\
  !*** ./treb-parser/src/csv-parser.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ParseCSV\": () => (/* binding */ ParseCSV)\n/* harmony export */ });\nvar ParseState;\n(function (ParseState) {\n    ParseState[ParseState[\"default\"] = 0] = \"default\";\n    ParseState[ParseState[\"quoted\"] = 1] = \"quoted\";\n})(ParseState || (ParseState = {}));\n/**\n * csv parser, following (largely) RFC4180 rules, with some extensions.\n * specifically:\n *\n * - lines should end with CRLF, but we support CR\n * - we do not support header (atm)\n * - variable-length records are supported\n * - any field may be quoted\n * - quoted fields can contain newlines and commas\n * - use two double-quotes to escape a double quote\n *\n */\nconst ParseCSV = (text, delimiter = ',') => {\n    let state = ParseState.default;\n    let record = [];\n    let field = '';\n    const records = [];\n    const length = text.length;\n    if (/[\\r\\n\"]/.test(delimiter)) {\n        throw new Error('invalid delimiter');\n    }\n    for (let i = 0; i < length; i++) {\n        const char = text[i];\n        if (state === ParseState.default) {\n            switch (char) {\n                case delimiter:\n                    record.push(field);\n                    field = '';\n                    break;\n                case '\\r':\n                    // naked (non-quoted) \\r without immediate \\n is illegal\n                    // if (i + 1 < length && text[i + 1] === '\\n') i++; // drop into next block\n                    // else\n                    break;\n                case '\\n':\n                    record.push(field);\n                    field = '';\n                    records.push(record);\n                    record = [];\n                    break;\n                case '\"':\n                    // we're allowing unescaped double-quotes in non-quoted fields\n                    if (field.length === 0) {\n                        state = ParseState.quoted;\n                    }\n                    else {\n                        field += char;\n                    }\n                    break;\n                default:\n                    field += char;\n                    break;\n            }\n        }\n        else {\n            if (char === '\"') {\n                if (i + 1 < length && text[i + 1] === '\"') {\n                    field += '\"';\n                    i++;\n                }\n                else {\n                    state = ParseState.default;\n                }\n            }\n            else\n                field += char;\n        }\n    }\n    // we're at the end. this might be a blank line at the end of the\n    // file, or it might be the end of the last record. let's make the\n    // simplifying assumption that we can drop a blank line, instead\n    // of treating it as a record with one zero-length field.\n    if (record.length || field.length) {\n        record.push(field);\n        records.push(record);\n    }\n    return records;\n};\n\n\n//# sourceURL=webpack://treb/./treb-parser/src/csv-parser.ts?");

/***/ }),

/***/ "./treb-parser/src/index.ts":
/*!**********************************!*\
  !*** ./treb-parser/src/index.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArgumentSeparatorType\": () => (/* reexport safe */ _parser_types__WEBPACK_IMPORTED_MODULE_0__.ArgumentSeparatorType),\n/* harmony export */   \"DecimalMarkType\": () => (/* reexport safe */ _parser_types__WEBPACK_IMPORTED_MODULE_0__.DecimalMarkType),\n/* harmony export */   \"IllegalSheetNameRegex\": () => (/* reexport safe */ _parser__WEBPACK_IMPORTED_MODULE_1__.IllegalSheetNameRegex),\n/* harmony export */   \"Parser\": () => (/* reexport safe */ _parser__WEBPACK_IMPORTED_MODULE_1__.Parser),\n/* harmony export */   \"QuotedSheetNameRegex\": () => (/* reexport safe */ _parser__WEBPACK_IMPORTED_MODULE_1__.QuotedSheetNameRegex),\n/* harmony export */   \"ParseCSV\": () => (/* reexport safe */ _csv_parser__WEBPACK_IMPORTED_MODULE_2__.ParseCSV)\n/* harmony export */ });\n/* harmony import */ var _parser_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser-types */ \"./treb-parser/src/parser-types.ts\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ \"./treb-parser/src/parser.ts\");\n/* harmony import */ var _csv_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./csv-parser */ \"./treb-parser/src/csv-parser.ts\");\n\n\n\n\n\n//# sourceURL=webpack://treb/./treb-parser/src/index.ts?");

/***/ }),

/***/ "./treb-parser/src/parser-types.ts":
/*!*****************************************!*\
  !*** ./treb-parser/src/parser-types.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ArgumentSeparatorType\": () => (/* binding */ ArgumentSeparatorType),\n/* harmony export */   \"DecimalMarkType\": () => (/* binding */ DecimalMarkType)\n/* harmony export */ });\n/**\n * argument separator type for i18n\n */\nvar ArgumentSeparatorType;\n(function (ArgumentSeparatorType) {\n    ArgumentSeparatorType[\"Comma\"] = \",\";\n    ArgumentSeparatorType[\"Semicolon\"] = \";\";\n})(ArgumentSeparatorType || (ArgumentSeparatorType = {}));\n/**\n * decimal mark for i18n\n */\nvar DecimalMarkType;\n(function (DecimalMarkType) {\n    DecimalMarkType[\"Period\"] = \".\";\n    DecimalMarkType[\"Comma\"] = \",\";\n})(DecimalMarkType || (DecimalMarkType = {}));\n\n\n//# sourceURL=webpack://treb/./treb-parser/src/parser-types.ts?");

/***/ }),

/***/ "./treb-parser/src/parser.ts":
/*!***********************************!*\
  !*** ./treb-parser/src/parser.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"QuotedSheetNameRegex\": () => (/* binding */ QuotedSheetNameRegex),\n/* harmony export */   \"IllegalSheetNameRegex\": () => (/* binding */ IllegalSheetNameRegex),\n/* harmony export */   \"Parser\": () => (/* binding */ Parser)\n/* harmony export */ });\n/* harmony import */ var _parser_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser-types */ \"./treb-parser/src/parser-types.ts\");\n\n/**\n * regex determines if a sheet name requires quotes. centralizing\n * this to simplify maintenance and reduce overlap/errors\n */\nconst QuotedSheetNameRegex = /[\\s-+=<>!()]/;\n/**\n * similarly, illegal sheet name. we don't actually handle this in\n * the parser, but it seems like a reasonable place to keep this\n * definition.\n */\nconst IllegalSheetNameRegex = /['*\\\\]/;\nconst DOUBLE_QUOTE = 0x22; // '\"'.charCodeAt(0);\nconst SINGLE_QUOTE = 0x27; // `'`.charCodeAt(0);\nconst NON_BREAKING_SPACE = 0xa0;\nconst SPACE = 0x20;\nconst TAB = 0x09;\nconst CR = 0x0a;\nconst LF = 0x0d;\nconst ZERO = 0x30;\nconst NINE = 0x39;\nconst PERIOD = 0x2e;\nconst PLUS = 0x2b;\nconst MINUS = 0x2d;\nconst OPEN_PAREN = 0x28;\nconst CLOSE_PAREN = 0x29;\nconst COMMA = 0x2c;\nconst PERCENT = 0x25;\nconst UNDERSCORE = 0x5f;\nconst DOLLAR_SIGN = 0x24;\nconst OPEN_BRACE = 0x7b;\nconst CLOSE_BRACE = 0x7d;\nconst EXCLAMATION_MARK = 0x21;\n// const COLON = 0x3a; // became an operator\nconst SEMICOLON = 0x3b;\nconst UC_A = 0x41;\nconst LC_A = 0x61;\nconst UC_E = 0x45;\nconst LC_E = 0x65;\nconst UC_Z = 0x5a;\nconst LC_Z = 0x7a;\nconst ACCENTED_RANGE_START = 192;\nconst ACCENTED_RANGE_END = 312;\n/**\n * precedence map\n */\nconst binary_operators_precendence = {\n    '==': 6,\n    '!=': 6,\n    '<>': 6,\n    '=': 6,\n    '<': 7,\n    '>': 7,\n    '<=': 7,\n    '>=': 7,\n    '+': 9,\n    '-': 9,\n    '&': 9,\n    '*': 10,\n    '/': 10,\n    '^': 11,\n    ':': 13, // range operator\n};\n/**\n * binary ops are sorted by length so we can compare long ops first\n */\nconst binary_operators = Object.keys(binary_operators_precendence).sort((a, b) => b.length - a.length);\n/**\n * unary operators. atm we have no precedence issues, unary operators\n * always have absolute precedence. (for numbers, these are properly part\n * of the number, but consider `=-SUM(1,2)` -- this is an operator).\n */\nconst unary_operators = { '-': 100, '+': 100 };\n/**\n * parser for spreadsheet language.\n *\n * FIXME: this is stateless, think about exporting a singleton.\n *\n * (there is internal state, but it's only used during a Parse() call,\n * which runs synchronously). one benefit of using a singleton would be\n * consistency in decimal mark, we'd only have to set once.\n *\n * FIXME: split rendering into a separate class? would be a little cleaner.\n */\nclass Parser {\n    constructor() {\n        /**\n         * argument separator. this can be changed prior to parsing/rendering.\n         * FIXME: use an accessor to ensure type, outside of ts?\n         */\n        this.argument_separator = _parser_types__WEBPACK_IMPORTED_MODULE_0__.ArgumentSeparatorType.Comma;\n        /**\n         * decimal mark. this can be changed prior to parsing/rendering.\n         * FIXME: use an accessor to ensure type, outside of ts?\n         */\n        this.decimal_mark = _parser_types__WEBPACK_IMPORTED_MODULE_0__.DecimalMarkType.Period;\n        /**\n         * internal argument separator, as a number. this is set internally on\n         * parse call, following the argument_separator value.\n         */\n        this.argument_separator_char = COMMA;\n        /**\n         * internal decimal mark, as a number.\n         */\n        this.decimal_mark_char = PERIOD;\n        /**\n         * internal counter for incrementing IDs\n         */\n        this.id_counter = 0;\n        this.expression = '';\n        this.data = [];\n        this.index = 0;\n        this.length = 0;\n        /** success flag */\n        this.valid = true;\n        this.dependencies = {\n            addresses: {},\n            ranges: {},\n        };\n        // referenced addresses -- used to merge ranges/addresses, although I'm\n        // not sure that's actually all that useful\n        this.address_refcount = {};\n        /**\n         * full list of referenced addresses and ranges. we're adding this\n         * to support highlighting, for which we need multiple instances\n         * of a single address. the original dep list was used for graph dependencies,\n         * so we compressed the list.\n         *\n         * FIXME: use a single list, i.e. something like\n         *\n         *   address -> [instance, instance]\n         *\n         * because that's a big API change it's going to have to wait. for now,\n         * use a second list.\n         *\n         * UPDATE: adding (otherwise unused) tokens, which could be named ranges.\n         * in the future we may pass in a list of names at parse time, and resolve\n         * them; for now we are just listing names.\n         */\n        this.full_reference_list = [];\n    }\n    /**\n     * recursive tree walk.\n     *\n     * @param func function called on each node. for nodes that have children\n     * (operations, calls, groups) return false to skip the subtree, or true to\n     * traverse.\n     */\n    Walk(unit, func) {\n        switch (unit.type) {\n            case 'address':\n            case 'missing':\n            case 'literal':\n            case 'identifier':\n            case 'operator':\n                func(unit);\n                return;\n            case 'range':\n                if (func(unit)) {\n                    this.Walk(unit.start, func);\n                    this.Walk(unit.end, func);\n                }\n                return;\n            case 'binary':\n                if (func(unit)) {\n                    this.Walk(unit.left, func);\n                    this.Walk(unit.right, func);\n                }\n                return;\n            case 'unary':\n                if (func(unit)) {\n                    this.Walk(unit.operand, func);\n                }\n                return;\n            case 'group':\n                if (func(unit)) {\n                    unit.elements.forEach((element) => this.Walk(element, func));\n                }\n                return;\n            case 'call':\n                if (func(unit)) {\n                    unit.args.forEach((arg) => this.Walk(arg, func));\n                }\n        }\n    }\n    /** utility: transpose array */\n    Transpose(arr) {\n        const m = arr.length;\n        const transposed = [];\n        let n = 0;\n        for (let i = 0; i < m; i++) {\n            if (Array.isArray(arr[i])) {\n                n = Math.max(n, arr[i].length);\n            }\n        }\n        for (let i = 0; i < n; i++) {\n            transposed[i] = [];\n            for (let j = 0; j < m; j++) {\n                transposed[i][j] = arr[j][i];\n            }\n        }\n        return transposed;\n    }\n    /**\n     * renders the passed expression as a string.\n     * @param unit base expression\n     * @param offset offset for addresses, used to offset relative addresses\n     * (and ranges). this is for copy-and-paste or move operations.\n     * @param missing string to represent missing values (can be '', for functions)\n     */\n    Render(unit, offset = { rows: 0, columns: 0 }, missing = '(missing)', convert_decimal, convert_argument_separator) {\n        // use default separator, unless we're explicitly converting.\n        let separator = this.argument_separator + ' ';\n        if (convert_argument_separator === _parser_types__WEBPACK_IMPORTED_MODULE_0__.ArgumentSeparatorType.Comma) {\n            separator = ', ';\n        }\n        else if (convert_argument_separator === _parser_types__WEBPACK_IMPORTED_MODULE_0__.ArgumentSeparatorType.Semicolon) {\n            separator = '; ';\n        }\n        // this is only used if we're converting.\n        const decimal = convert_decimal === _parser_types__WEBPACK_IMPORTED_MODULE_0__.DecimalMarkType.Comma ? ',' : '.';\n        const decimal_rex = this.decimal_mark === _parser_types__WEBPACK_IMPORTED_MODULE_0__.DecimalMarkType.Comma ? /,/ : /\\./;\n        switch (unit.type) {\n            case 'address':\n                return this.AddressLabel(unit, offset);\n            case 'range':\n                return (this.AddressLabel(unit.start, offset) +\n                    ':' +\n                    this.AddressLabel(unit.end, offset));\n            case 'missing':\n                return missing;\n            case 'array':\n                // we have to transpose because we're column-major but the \n                // format is row-major\n                return '{' +\n                    this.Transpose(unit.values).map((row) => row.map((value) => {\n                        if (typeof value === 'string') {\n                            return '\"' + value + '\"';\n                        }\n                        return value;\n                    }).join(', ')).join('; ') + '}';\n            case 'binary':\n                return (this.Render(unit.left, offset, missing, convert_decimal, convert_argument_separator) +\n                    ' ' +\n                    unit.operator +\n                    ' ' +\n                    this.Render(unit.right, offset, missing, convert_decimal, convert_argument_separator));\n            case 'unary':\n                return (unit.operator +\n                    this.Render(unit.operand, offset, missing, convert_decimal, convert_argument_separator));\n            case 'literal':\n                if (typeof unit.value === 'string') {\n                    // escape any quotation marks in string\n                    return '\"' + unit.value.replace(/\"/g, '\"\"') + '\"';\n                }\n                else if (convert_decimal && typeof unit.value === 'number') {\n                    if (unit.text) {\n                        // here we want to translate the literal typed-in value.\n                        // users can type in a decimal point and possibly grouping.\n                        // if we are converting from dot to comma, we need to make\n                        // sure to remove any existing commas. for the time being\n                        // we will just remove them.\n                        // what about the alternate case? in that case, we're not allowing\n                        // users to type in groupings (I think), so we can skip that part.\n                        // ACTUALLY, we don't allow grouping at all. we normalize it\n                        // if you type in a number. why? consider functions, grouping\n                        // looks like parameter separation. so no.\n                        let text = unit.text;\n                        if (convert_decimal === _parser_types__WEBPACK_IMPORTED_MODULE_0__.DecimalMarkType.Comma &&\n                            this.decimal_mark === _parser_types__WEBPACK_IMPORTED_MODULE_0__.DecimalMarkType.Period) {\n                            text = text.replace(/,/g, ''); // remove grouping\n                        }\n                        return text.replace(decimal_rex, decimal);\n                    }\n                    else {\n                        // this always works because this function is guaranteed\n                        // to return value in dot-decimal format without separators.\n                        return unit.value.toString().replace(/\\./, decimal);\n                    }\n                }\n                else if (unit.text)\n                    return unit.text;\n                return unit.value.toString();\n            case 'identifier':\n                return unit.name;\n            case 'operator':\n                return '[' + unit.operator + ']'; // this should be invalid output\n            case 'group':\n                if (unit.explicit) {\n                    return ('(' +\n                        unit.elements\n                            .map((x) => this.Render(x, offset, missing, convert_decimal, convert_argument_separator))\n                            .join(separator) +\n                        ')');\n                }\n                else {\n                    return unit.elements\n                        .map((x) => this.Render(x, offset, missing, convert_decimal, convert_argument_separator))\n                        .join(separator);\n                }\n            case 'call':\n                return (unit.name +\n                    '(' +\n                    unit.args\n                        .map((x) => this.Render(x, offset, missing, convert_decimal, convert_argument_separator))\n                        .join(separator) +\n                    ')');\n        }\n        return '??';\n    }\n    /**\n     * parses expression and returns the root of the parse tree, plus a\n     * list of dependencies (addresses and ranges) found in the expression.\n     *\n     * NOTE that in the new address parsing structure, we will overlap ranges\n     * and addresses (range corners). this is OK because ranges are mapped\n     * to individual address dependencies. it's just sloppy (FIXME: refcount?)\n     */\n    Parse(expression) {\n        // normalize\n        expression = expression.trim();\n        // remove leading =\n        if (expression[0] === '=') {\n            expression = expression.substr(1).trim();\n        }\n        this.expression = expression;\n        this.data = [];\n        this.length = expression.length;\n        this.index = 0;\n        this.valid = true;\n        this.error_position = undefined;\n        this.error = undefined;\n        this.dependencies.addresses = {};\n        this.dependencies.ranges = {};\n        this.address_refcount = {};\n        this.full_reference_list = [];\n        // reset ID\n        this.id_counter = 0;\n        // set separator\n        switch (this.argument_separator) {\n            case _parser_types__WEBPACK_IMPORTED_MODULE_0__.ArgumentSeparatorType.Semicolon:\n                this.argument_separator_char = SEMICOLON;\n                break;\n            default:\n                this.argument_separator_char = COMMA;\n                break;\n        }\n        // and decimal mark\n        switch (this.decimal_mark) {\n            case _parser_types__WEBPACK_IMPORTED_MODULE_0__.DecimalMarkType.Comma:\n                this.decimal_mark_char = COMMA;\n                break;\n            default:\n                this.decimal_mark_char = PERIOD;\n                break;\n        }\n        // NOTE on this function: charCodeAt returns UTF-16. codePointAt returns\n        // unicode. length returns UTF-16 length. any characters that are not\n        // representable as a single character in UTF-16 will be 'the first unit\n        // of a surrogate pair...' and so on.\n        //\n        // we want UTF-16, not unicode. for the parser itself, we are only really\n        // looking for ASCII, so it's not material. for anything else, if we\n        // construct strings from the original data we want to map the UTF-16,\n        // otherwise we will construct the string incorrectly. this applies to\n        // strings, function names, and anything else.\n        //\n        // which is all a long way of saying, don't be tempted to replace this\n        // with codePointAt.\n        for (let i = 0; i < this.length; i++) {\n            this.data[i] = expression.charCodeAt(i);\n        }\n        const expr = this.ParseGeneric();\n        // remove extraneous addresses\n        // NOTE: we still may have duplicates that have different absolute/relative\n        // modifiers, e.g. C3 and $C$3 (and $C3 and C$3). not sure what we should\n        // do about that, since some consumers may consider these different -- we\n        // need to establish a contract about this\n        const addresses = {};\n        for (const key of Object.keys(this.dependencies.addresses)) {\n            if (this.address_refcount[key]) {\n                addresses[key] = this.dependencies.addresses[key];\n            }\n        }\n        this.dependencies.addresses = addresses;\n        return {\n            expression: expr || undefined,\n            valid: this.valid,\n            error: this.error,\n            error_position: this.error_position,\n            dependencies: this.dependencies,\n            separator: this.argument_separator,\n            decimal_mark: this.decimal_mark,\n            full_reference_list: this.full_reference_list.slice(0),\n        };\n    }\n    /** generates column label (\"A\") from column index (0-based) */\n    ColumnLabel(column) {\n        if (column === Infinity) {\n            return '';\n        }\n        let s = String.fromCharCode(65 + (column % 26));\n        while (column > 25) {\n            column = Math.floor(column / 26) - 1;\n            s = String.fromCharCode(65 + (column % 26)) + s;\n        }\n        return s;\n    }\n    /** generates address label (\"C3\") from address (0-based) */\n    AddressLabel(address, offset) {\n        let column = address.column;\n        if (!address.absolute_column && address.column !== Infinity)\n            column += offset.columns;\n        let row = address.row;\n        if (!address.absolute_row && address.row !== Infinity)\n            row += offset.rows;\n        if (row < 0 || column < 0 || (row === Infinity && column === Infinity))\n            return '#REF';\n        let label = '';\n        if (address.sheet) {\n            label = (QuotedSheetNameRegex.test(address.sheet) ?\n                '\\'' + address.sheet + '\\'' : address.sheet) + '!';\n        }\n        if (row === Infinity) {\n            return label +\n                (address.absolute_column ? '$' : '') +\n                this.ColumnLabel(column);\n        }\n        if (column === Infinity) {\n            return label +\n                (address.absolute_row ? '$' : '') +\n                (row + 1);\n        }\n        return (label +\n            (address.absolute_column ? '$' : '') +\n            this.ColumnLabel(column) +\n            (address.absolute_row ? '$' : '') +\n            (row + 1));\n    }\n    /**\n     * base parse routine; may recurse inside parens (either as grouped\n     * operations or in function arguments).\n     *\n     * @param exit exit on specific characters\n     */\n    ParseGeneric(exit = [0]) {\n        const stream = [];\n        for (; this.index < this.length;) {\n            const unit = this.ParseNext(stream.length === 0);\n            if (typeof unit === 'number') {\n                if (exit.some((test) => unit === test)) {\n                    break;\n                }\n                else if (unit === OPEN_PAREN) {\n                    // note that function calls are handled elsewhere,\n                    // so we only have to worry about grouping. parse\n                    // up to the closing paren...\n                    this.index++; // open paren\n                    const group = this.ParseGeneric([CLOSE_PAREN]);\n                    this.index++; // close paren\n                    // and wrap up in a group element to prevent reordering.\n                    // flag indicates that this is a user grouping, not ours\n                    // skip nulls\n                    if (group) {\n                        stream.push({\n                            type: 'group',\n                            id: this.id_counter++,\n                            elements: [group],\n                            explicit: true,\n                        });\n                    }\n                }\n                else {\n                    // this can probably move to PNext? except for the test\n                    // on looking for a binary operator? (...)\n                    const operator = this.ConsumeOperator();\n                    if (operator)\n                        stream.push(operator);\n                    else {\n                        this.error = `unexpected character [1]: ${String.fromCharCode(unit)}, ${unit}`;\n                        this.valid = false;\n                        this.index++;\n                    }\n                }\n            }\n            else {\n                stream.push(unit);\n            }\n        }\n        if (stream.length === 0)\n            return null;\n        if (stream.length === 1)\n            return stream[0];\n        // fix ordering of binary operations based on precedence; also\n        // convert and validate ranges\n        return this.BinaryToRange(this.ArrangeUnits(stream));\n    }\n    /**\n     * helper function, @see BinaryToRange\n     * @param unit\n     * @returns\n     */\n    UnitToAddress(unit) {\n        // console.info(\"U2\", unit);\n        // for literals, only numbers are valid\n        if (unit.type === 'literal') {\n            if (typeof unit.value === 'number' && unit.value > 0 && !/\\./.test(unit.text || '')) {\n                return {\n                    type: 'address',\n                    position: unit.position,\n                    label: unit.value.toString(),\n                    row: unit.value - 1,\n                    id: this.id_counter++,\n                    column: Infinity,\n                };\n            }\n        }\n        else {\n            // UPDATE: sheet names... we may actually need a subparser for this?\n            // or can we do it with a regex? (...)\n            let sheet;\n            let name = unit.name;\n            const tokens = name.split('!');\n            if (tokens.length > 1) {\n                sheet = tokens.slice(0, tokens.length - 1).join('!');\n                name = name.substr(sheet.length + 1);\n                if (sheet[0] === '\\'') {\n                    if (sheet.length > 1 && sheet[sheet.length - 1] === '\\'') {\n                        sheet = sheet.substr(1, sheet.length - 2);\n                    }\n                    else {\n                        // console.info('mismatched single quote');\n                        return undefined;\n                    }\n                }\n            }\n            const absolute = name[0] === '$';\n            name = (absolute ? name.substr(1) : name).toUpperCase();\n            const as_number = Number(name);\n            // if it looks like a number, consider it a number and then be strict\n            if (!isNaN(as_number)) {\n                if (as_number > 0 && as_number !== Infinity && !/\\./.test(name)) {\n                    return {\n                        type: 'address',\n                        position: unit.position,\n                        absolute_row: absolute,\n                        label: unit.name,\n                        row: as_number - 1,\n                        id: this.id_counter++,\n                        column: Infinity,\n                        sheet,\n                    };\n                }\n            }\n            else if (/[A-Z]{1,3}/.test(name)) {\n                let column = -1; // clever\n                for (let i = 0; i < name.length; i++) {\n                    const char = name[i].charCodeAt(0);\n                    column = 26 * (1 + column) + (char - UC_A);\n                }\n                return {\n                    type: 'address',\n                    position: unit.position,\n                    absolute_column: absolute,\n                    label: unit.name,\n                    column,\n                    id: this.id_counter++,\n                    row: Infinity,\n                    sheet,\n                };\n            }\n        }\n        return undefined;\n    }\n    /**\n     * converts binary operations with a colon operator to ranges. this also\n     * validates that there are no colon operations with non-address operands\n     * (which is why it's called after precendence reordering; colon has the\n     * highest preference). recursive only over binary ops AND unary ops.\n     *\n     * NOTE: there are other legal arguments to a colon operator. specifically:\n     *\n     * (1) two numbers, in either order\n     *\n     * 15:16\n     * 16:16\n     * 16:15\n     *\n     * (2) with one or both optionally having a $\n     *\n     * 15:$16\n     * $16:$16\n     *\n     * (3) two column identifiers, in either order\n     *\n     * A:F\n     * B:A\n     *\n     * (4) and the same with $\n     *\n     * $A:F\n     * $A:$F\n     *\n     * because none of these are legal in any other context, we leave the\n     * default treatment of them UNLESS they are arguments to the colon\n     * operator, in which case we will grab them. that does mean we parse\n     * them twice, but (...)\n     *\n     * FIXME: will need some updated to rendering these, we don't have any\n     * handler for rendering infinity\n     */\n    BinaryToRange(unit) {\n        if (unit.type === 'binary') {\n            if (unit.operator === ':') {\n                let range;\n                let label = '';\n                if (unit.left.type === 'address' && unit.right.type === 'address') {\n                    // construct a label using the full text. there's a possibility,\n                    // I suppose, that there are spaces (this should probably not be\n                    // legal). this is a canonical label, though (generated)\n                    // it might be better to let this slip, or treat it as an error\n                    // and force a correction... not sure (TODO/FIXME)\n                    const start_index = unit.left.position + unit.left.label.length;\n                    const end_index = unit.right.position;\n                    range = {\n                        type: 'range',\n                        id: this.id_counter++,\n                        position: unit.left.position,\n                        start: unit.left,\n                        end: unit.right,\n                        label: unit.left.label +\n                            this.expression.substring(start_index, end_index) +\n                            unit.right.label,\n                    };\n                    label = range.start.label + ':' + range.end.label;\n                    this.address_refcount[range.start.label]--;\n                    this.address_refcount[range.end.label]--;\n                    // remove entries from the list for start, stop\n                    const positions = [unit.left.position, unit.right.position];\n                    this.full_reference_list = this.full_reference_list.filter((test) => {\n                        return (test.position !== positions[0] && test.position !== positions[1]);\n                    });\n                }\n                else if ((unit.left.type === 'literal' || unit.left.type === 'identifier')\n                    && (unit.right.type === 'literal' || unit.right.type === 'identifier')) {\n                    // see if we can plausibly interpret both of these as rows or columns\n                    const left = this.UnitToAddress(unit.left);\n                    const right = this.UnitToAddress(unit.right);\n                    // and they need to match\n                    if (left && right\n                        && ((left.column === Infinity && right.column === Infinity)\n                            || (left.row === Infinity && right.row === Infinity))) {\n                        label = left.label + ':' + right.label;\n                        // we don't support out-of-order ranges, so we should correct.\n                        // they just won't work otherwise. (TODO/FIXME)\n                        range = {\n                            type: 'range',\n                            id: this.id_counter++,\n                            position: unit.left.position,\n                            start: left,\n                            end: right,\n                            label,\n                        };\n                    }\n                }\n                /*\n                else if ( unit.left.type === 'literal'\n                          && unit.right.type === 'literal'\n                          && typeof unit.left.value === 'number'\n                          && typeof unit.right.value === 'number') {\n        \n                  // technically we don't want to support any number that has\n                  // a decimal place, but I'm not sure we have a useful way of\n                  // measuring that... could look at the original text?\n        \n                  if (unit.left.value > 0\n                      && unit.right.value > 0\n                      && !/\\./.test(unit.left.text||'')\n                      && !/\\./.test(unit.right.text||'')\n                      ) {\n        \n                    label = unit.left.value.toString() + ':' + unit.right.value.toString();\n        \n                    console.info('m2:', label);\n        \n                    const left: UnitAddress = {\n                      type: 'address',\n                      position: unit.left.position,\n                      label: unit.left.value.toString(),\n                      row: unit.left.value - 1,\n                      id: this.id_counter++,\n                      column: Infinity,\n                    };\n        \n                    const right: UnitAddress = {\n                      type: 'address',\n                      position: unit.right.position,\n                      label: unit.right.value.toString(),\n                      row: unit.right.value - 1,\n                      id: this.id_counter++,\n                      column: Infinity,\n                    };\n        \n                    range = {\n                      type: 'range',\n                      id: this.id_counter++,\n                      position: unit.left.position,\n                      start: left,\n                      end: right,\n                      label,\n                    };\n        \n                  }\n                  \n                }\n                */\n                if (range) {\n                    this.dependencies.ranges[label] = range;\n                    // and add the range\n                    this.full_reference_list.push(range);\n                    return range;\n                }\n                else {\n                    this.error = `unexpected character: :`;\n                    this.valid = false;\n                    // console.info('xx', unit);\n                }\n            }\n            // recurse\n            unit.left = this.BinaryToRange(unit.left);\n            unit.right = this.BinaryToRange(unit.right);\n        }\n        // this should no longer be required, because we explicitly check\n        // when we construct the unary operations...\n        // else if (unit.type === 'unary') {\n        //   unit.operand = this.BinaryToRange(unit.operand);\n        // }\n        return unit;\n    }\n    /**\n     * reorders operations for precendence\n     */\n    ArrangeUnits(stream) {\n        // probably should not happen\n        if (stream.length === 0)\n            return { type: 'missing', id: this.id_counter++ };\n        // this is probably already covered\n        if (stream.length === 1)\n            return stream[0];\n        const stack = [];\n        // work left-to-right (implied precendence), unless there\n        // is actual precendence. spreadsheet language only supports\n        // binary operators, so we always expect unit - operator - unit\n        //\n        // UPDATE: that's incorrect. SL supports unary + and - operators.\n        // which makes this more complicated.\n        //\n        // we explicitly support unfinished expressions for the first pass\n        // to build dependencies, but if they're invalid the resulting\n        // parse tree isn't expected to be correct. in that case we\n        // generally will pass back a bag of parts, with a flag set.\n        for (let index = 0; index < stream.length; index++) {\n            let element = stream[index];\n            // given that we need to support unary operators, the logic needs\n            // to be a little different. operators are OK at any position, provided\n            // we can construct either a unary or binary operation.\n            if (element.type === 'operator') {\n                if (stack.length === 0 || stack[stack.length - 1].type === 'operator') {\n                    // valid if unary operator and we can construct a unary operation.\n                    // in this case we do it with recursion.\n                    if (unary_operators[element.operator]) {\n                        const right = this.BinaryToRange(this.ArrangeUnits(stream.slice(index + 1)));\n                        // this ensures we return the highest-level group, even if we recurse\n                        if (!this.valid) {\n                            return {\n                                type: 'group',\n                                id: this.id_counter++,\n                                elements: stream,\n                                explicit: false,\n                            };\n                        }\n                        // if it succeeded, then we need to apply the unary operator to\n                        // the result, or if it's a binary operation, to the left-hand side\n                        // (because we have precedence) -- unless it's a range [this is now\n                        // handled above]\n                        if (right.type === 'binary') {\n                            right.left = {\n                                type: 'unary',\n                                id: this.id_counter++,\n                                operator: element.operator,\n                                operand: right.left,\n                                position: element.position,\n                            };\n                            element = right;\n                        }\n                        else {\n                            // create a unary operation which will replace the element\n                            element = {\n                                type: 'unary',\n                                id: this.id_counter++,\n                                operator: element.operator,\n                                operand: right,\n                                position: element.position,\n                            };\n                        }\n                        // end loop after this pass, because the recurse consumes everything else\n                        index = stream.length;\n                    }\n                    else {\n                        this.error = `unexpected character [2]: ${element.operator}`;\n                        this.error_position = element.position;\n                        this.valid = false;\n                        return {\n                            type: 'group',\n                            id: this.id_counter++,\n                            elements: stream,\n                            explicit: false,\n                        };\n                    }\n                }\n                else {\n                    stack.push(element);\n                    continue;\n                }\n            }\n            if (stack.length < 2) {\n                stack.push(element);\n            }\n            else if (stack[stack.length - 1].type === 'operator') {\n                const left = stack[stack.length - 2];\n                const operator_unit = stack[stack.length - 1];\n                const operator = operator_unit.operator;\n                // assume we can construct it as follows: [A op B]\n                const operation = {\n                    type: 'binary',\n                    id: this.id_counter++,\n                    left,\n                    operator,\n                    position: operator_unit.position,\n                    right: element,\n                };\n                // we have to reorder if left (A) is a binary operation, and the\n                // precedence of the new operator is higher. note that we will\n                // deal with range operations later, for now just worry about\n                // operator precedence\n                if (left.type === 'binary' &&\n                    binary_operators_precendence[operator] >\n                        binary_operators_precendence[left.operator]) {\n                    // so we have [[A op1 B] op2 C], and we need to re-order this into [A op1 [B op2 C]].\n                    operation.left = left.left; // <- A\n                    operation.operator = left.operator; // <- op1\n                    operation.position = left.position;\n                    operation.right = {\n                        type: 'binary',\n                        id: this.id_counter++,\n                        left: left.right,\n                        right: element,\n                        operator,\n                        position: operator_unit.position,\n                    };\n                }\n                stack.splice(-2, 2, operation);\n            }\n            else {\n                this.error = `multiple expressions`;\n                this.error_position = element.position;\n                this.valid = false;\n                return {\n                    type: 'group',\n                    id: this.id_counter++,\n                    elements: stream,\n                    explicit: false,\n                };\n            }\n        }\n        return stack[0];\n    }\n    /**\n     * parses literals and tokens from the stream, ignoring whitespace,\n     * and stopping on unexpected tokens (generally operators or parens).\n     *\n     * @param naked treat -/+ as signs (part of numbers) rather than operators.\n     */\n    ParseNext(naked = true) {\n        this.ConsumeWhiteSpace();\n        const char = this.data[this.index];\n        if (char === DOUBLE_QUOTE) {\n            return {\n                type: 'literal',\n                id: this.id_counter++,\n                position: this.index,\n                value: this.ConsumeString(),\n            };\n        }\n        else if ((char >= ZERO && char <= NINE) || char === this.decimal_mark_char) {\n            // FIXME: is there a case where period needs to be handled the\n            // same way as plus and minus, below?\n            const position = this.index;\n            const [value, text] = this.ConsumeNumber();\n            return {\n                type: 'literal',\n                id: this.id_counter++,\n                position,\n                value,\n                text,\n            };\n        }\n        else if (char === OPEN_BRACE) {\n            return this.ConsumeArray();\n        }\n        else if (naked && (char === MINUS || char === PLUS)) {\n            // there's a case where you type '=-func()', which should support\n            // '=+func()' as well, both of which are naked operators and not numbers.\n            // the only way to figure this out is to check for a second number char.\n            // this is turning into lookahead, which we did not want to do...\n            const check = this.data[this.index + 1];\n            if ((check >= ZERO && check <= NINE) ||\n                check === this.decimal_mark_char) {\n                const position = this.index;\n                const [value, text] = this.ConsumeNumber();\n                return {\n                    type: 'literal',\n                    id: this.id_counter++,\n                    position,\n                    value,\n                    text,\n                }; // : this.ConsumeNumber() };\n            }\n        }\n        else if ((char >= UC_A && char <= UC_Z) ||\n            (char >= LC_A && char <= LC_Z) ||\n            char === UNDERSCORE ||\n            char === SINGLE_QUOTE ||\n            char === DOLLAR_SIGN ||\n            (char >= ACCENTED_RANGE_START && char <= ACCENTED_RANGE_END) // adding accented characters, needs some testing\n        ) {\n            // FIXME: this only tests for ASCII tokens? (...)\n            return this.ConsumeToken(char);\n        }\n        // else throw(new Error('Unexpected character: ' + char));\n        return char;\n    }\n    ConsumeArray() {\n        const expression = {\n            type: 'array',\n            id: this.id_counter++,\n            values: [],\n            position: this.index,\n        };\n        this.index++;\n        let row = 0;\n        let column = 0;\n        while (this.index < this.length) {\n            const item = this.ParseNext();\n            const start_position = this.index;\n            if (typeof item === 'number') {\n                this.index++;\n                switch (item) {\n                    case SEMICOLON:\n                        //column = 0;\n                        //row++;\n                        column++;\n                        row = 0;\n                        break;\n                    case COMMA:\n                        //column++;\n                        row++;\n                        break;\n                    case CLOSE_BRACE:\n                        return expression;\n                    default:\n                        if (this.valid) {\n                            this.error = `invalid character in array literal`;\n                            this.error_position = start_position;\n                            this.valid = false;\n                        }\n                        break;\n                }\n            }\n            else {\n                switch (item.type) {\n                    case 'literal':\n                        if (!expression.values[row]) {\n                            expression.values[row] = [];\n                        }\n                        expression.values[row][column] = item.value;\n                        break;\n                    default:\n                        if (this.valid) {\n                            this.error = `invalid value in array literal`;\n                            this.error_position = start_position;\n                            this.valid = false;\n                        }\n                        break;\n                }\n            }\n        }\n        return expression;\n    }\n    ConsumeOperator() {\n        for (const operator of binary_operators) {\n            if (this.expression.substr(this.index, operator.length) === operator) {\n                const position = this.index;\n                this.index += operator.length;\n                return {\n                    type: 'operator',\n                    id: this.id_counter++,\n                    operator,\n                    position,\n                };\n            }\n        }\n        return null;\n    }\n    /** consume function arguments, which can be of any type */\n    ConsumeArguments() {\n        this.index++; // open paren\n        let argument_index = 0;\n        const args = [];\n        for (; this.index < this.length;) {\n            const unit = this.ParseGeneric([\n                this.argument_separator_char,\n                CLOSE_PAREN,\n            ]);\n            if (null !== unit)\n                args.push(unit);\n            // why did parsing stop?\n            const char = this.data[this.index];\n            if (char === this.argument_separator_char) {\n                this.index++;\n                argument_index++;\n                for (let i = args.length; i < argument_index; i++) {\n                    args.push({ type: 'missing', id: this.id_counter++ });\n                }\n            }\n            else if (char === CLOSE_PAREN) {\n                this.index++;\n                return args;\n            }\n            // else console.info('UNEXPECTED (CA)', char);\n        }\n        return args;\n    }\n    /**\n     * consume token. also checks for function call, because parens\n     * have a different meaning (grouping/precedence) when they appear\n     * not immediately after a token.\n     *\n     * regarding periods: as long as there's no intervening whitespace\n     * or operator, period should be a valid token character. tokens\n     * cannot start with a period.\n     *\n     * NOTE: that's true irrespective of decimal mark type.\n     *\n     * you can have tokens (addresses) with single quotes; these are used\n     * to escape sheet names with spaces (which is a bad idea, but hey). this\n     * should only be legal if the token starts with a single quote, and only\n     * for one (closing) quote.\n     */\n    ConsumeToken(initial_char) {\n        const token = [initial_char];\n        const position = this.index;\n        let single_quote = (initial_char === SINGLE_QUOTE);\n        for (++this.index; this.index < this.length; this.index++) {\n            const char = this.data[this.index];\n            if ((char >= UC_A && char <= UC_Z) ||\n                (char >= LC_A && char <= LC_Z) ||\n                (char >= ACCENTED_RANGE_START && char <= ACCENTED_RANGE_END) ||\n                char === UNDERSCORE ||\n                char === DOLLAR_SIGN ||\n                char === PERIOD ||\n                char === EXCLAMATION_MARK ||\n                single_quote || // ((char === SINGLE_QUOTE || char === SPACE) && single_quote) ||\n                (char >= ZERO && char <= NINE) // tokens can't start with a number, but this loop starts at index 1\n            ) {\n                token.push(char);\n                if (char === SINGLE_QUOTE) {\n                    single_quote = false; // one only\n                }\n            }\n            else\n                break;\n        }\n        const str = token.map((num) => String.fromCharCode(num)).join('');\n        // special handling: unbalanced single quote (probably sheet name),\n        // this is an error\n        if (single_quote) { // unbalanced\n            this.error = `unbalanced single quote`;\n            this.error_position = position;\n            this.valid = false;\n            return {\n                type: 'identifier',\n                id: this.id_counter++,\n                name: str,\n                position,\n            };\n        }\n        // special handling\n        if (str.toLowerCase() === 'true') {\n            return {\n                type: 'literal',\n                id: this.id_counter++,\n                value: true,\n                position,\n            };\n        }\n        if (str.toLowerCase() === 'false') {\n            return {\n                type: 'literal',\n                id: this.id_counter++,\n                value: false,\n                position,\n            };\n        }\n        // function takes precendence over address? I guess so\n        this.ConsumeWhiteSpace();\n        const next_char = this.data[this.index];\n        if (next_char === OPEN_PAREN) {\n            const args = this.ConsumeArguments();\n            return {\n                type: 'call',\n                id: this.id_counter++,\n                name: str,\n                args,\n                position,\n            };\n        }\n        // check for address. in the case of a range, we'll see an address, the\n        // range operator, and a second address. that will be turned into a range\n        // later.\n        const address = this.ConsumeAddress(str, position);\n        if (address)\n            return address;\n        const identifier = {\n            type: 'identifier',\n            id: this.id_counter++,\n            name: str,\n            position,\n        };\n        this.full_reference_list.push(identifier);\n        return identifier;\n    }\n    /**\n     * consumes address. this is outside of the normal parse flow;\n     * we already have a token, here we're checking if it's an address.\n     *\n     * this used to check for ranges as well, but we now treat ranges as\n     * an operation on two addresses; that supports whitespace between the\n     * tokens.\n     *\n     * FIXME: that means we can now inline the column/row routines, since\n     * they are not called more than once\n     */\n    ConsumeAddress(token, position) {\n        const index = position;\n        const token_length = token.length;\n        // FIXME: should mark this (!) when it hits, rather than search\n        // UPDATE: ! is legal in sheet names, although it needs to be quoted.\n        let sheet;\n        const tokens = token.split('!');\n        if (tokens.length > 1) {\n            sheet = tokens.slice(0, tokens.length - 1).join('!');\n            position += sheet.length + 1;\n        }\n        /*\n        if (tokens.length === 2) {\n          sheet = tokens[0];\n          position += (tokens[0].length + 1);\n        }\n        */\n        // FIXME: can inline\n        const c = this.ConsumeAddressColumn(position);\n        if (!c)\n            return null;\n        position = c.position;\n        const r = this.ConsumeAddressRow(position);\n        if (!r)\n            return null;\n        position = r.position;\n        const label = sheet ?\n            sheet + token.substr(sheet.length, position - index).toUpperCase() :\n            token.substr(0, position - index).toUpperCase();\n        if (sheet && sheet[0] === '\\'') {\n            sheet = sheet.substr(1, sheet.length - 2);\n        }\n        const addr = {\n            type: 'address',\n            id: this.id_counter++,\n            label,\n            row: r.row,\n            column: c.column,\n            absolute_row: r.absolute,\n            absolute_column: c.absolute,\n            position: index,\n            sheet,\n        };\n        // if that's not the complete token, then it's invalid\n        if (token_length !== position - index)\n            return null;\n        // store ref, increment count\n        this.dependencies.addresses[addr.label] = addr;\n        this.address_refcount[addr.label] =\n            (this.address_refcount[addr.label] || 0) + 1;\n        // add to new address list. use the actual object (not a clone or copy);\n        // we update the list later, and we may want to remove it (if it turns\n        // out it's part of a range)\n        this.full_reference_list.push(addr);\n        return addr;\n    }\n    /**\n     * consumes a row, possibly absolute ($). returns the numeric row\n     * (0-based) and metadata\n     */\n    ConsumeAddressRow(position) {\n        const absolute = this.data[position] === DOLLAR_SIGN;\n        if (absolute)\n            position++;\n        const start = position;\n        let value = 0;\n        for (;; position++) {\n            const char = this.data[position];\n            if (char >= ZERO && char <= NINE) {\n                value *= 10;\n                value += char - ZERO;\n            }\n            else\n                break;\n        }\n        if (start === position)\n            return false;\n        return { absolute, row: value - 1, position };\n    }\n    /**\n     * consumes a column, possibly absolute ($). returns the numeric\n     * column (0-based) and metadata\n     */\n    ConsumeAddressColumn(position) {\n        let column = -1; // clever\n        let length = 0; // max 3 chars for column\n        const absolute = this.data[position] === DOLLAR_SIGN;\n        if (absolute)\n            position++;\n        for (;; position++, length++) {\n            if (length >= 4)\n                return false; // max 3 chars for column\n            const char = this.data[position];\n            if (char >= UC_A && char <= UC_Z) {\n                column = 26 * (1 + column) + (char - UC_A);\n            }\n            else if (char >= LC_A && char <= LC_Z) {\n                column = 26 * (1 + column) + (char - LC_A);\n            }\n            else\n                break;\n        }\n        if (column < 0)\n            return false;\n        return { absolute, column, position };\n    }\n    /**\n     * consumes number. supported formats (WIP):\n     *\n     * -3\n     * +3\n     * 100.9\n     * 10.0%\n     * 1e-2.2\n     *\n     * ~1,333,123.22~\n     *\n     * UPDATE: commas (separators) are not acceptable in numbers passed\n     * in formulae, can't distinguish between them and function argument\n     * separators.\n     *\n     * regarding the above, a couple of rules:\n     *\n     * 1. +/- is only legal in position 0 or immediately after e/E\n     * 2. only one decimal point is allowed.\n     * 3. any number of separators, in any position, are legal, but\n     *    only before the decimal point.\n     * 4. only one % is allowed, and only in the last position\n     *\n     * NOTE: this is probably going to break on unfinished strings that\n     * end in - or +... if they're not treated as operators...\n     *\n     * FIXME: find test cases for that so we can fix it\n     *\n     * UPDATE: exporting original text string for preservation/insertion.\n     * this function now returns a tuple of [value, text].\n     *\n     */\n    ConsumeNumber() {\n        // for exponential notation\n        let exponent = 0;\n        let negative_exponent = false;\n        // general\n        let negative = false;\n        let integer = 0;\n        let decimal = 0;\n        let fraction = 0;\n        let state = 'integer';\n        let position = 0;\n        const start_index = this.index;\n        for (; this.index < this.length; this.index++, position++) {\n            const char = this.data[this.index];\n            if (char === this.decimal_mark_char) {\n                if (state === 'integer')\n                    state = 'fraction';\n                else\n                    break; // end of token; not consuming\n            }\n            else if (char === PERCENT) {\n                // FIXME: disallow combination of exponential and percent notation\n                integer /= 100; // this is a dumb way to do this\n                fraction /= 100;\n                this.index++; // we are consuming\n                break; // end of token\n            }\n            else if (char === PLUS || char === MINUS) {\n                // NOTE: handling of positive/negative exponent in exponential\n                // notation is handled separately, see below\n                if (position === 0) {\n                    if (char === MINUS)\n                        negative = true;\n                }\n                else\n                    break; // end of token -- not consuming\n            }\n            // else if (char === COMMA){\n            //  // ... FIXME: validate that we're in the integer part\n            // }\n            else if (char === UC_E || char === LC_E) {\n                if (state === 'integer' || state === 'fraction') {\n                    state = 'exponent';\n                    if (this.index < this.length - 1) {\n                        if (this.data[this.index + 1] === PLUS)\n                            this.index++;\n                        else if (this.data[this.index + 1] === MINUS) {\n                            this.index++;\n                            negative_exponent = true;\n                        }\n                    }\n                }\n                else\n                    break; // not sure what this is, then\n            }\n            else if (char >= ZERO && char <= NINE) {\n                switch (state) {\n                    case 'integer':\n                        integer = integer * 10 + (char - ZERO);\n                        break;\n                    case 'fraction':\n                        fraction = fraction * 10 + (char - ZERO);\n                        decimal++;\n                        break;\n                    case 'exponent':\n                        exponent = exponent * 10 + (char - ZERO);\n                        break;\n                }\n            }\n            else\n                break;\n        }\n        let value = integer + fraction * Math.pow(10, -decimal);\n        if (state === 'exponent') {\n            value = value * Math.pow(10, (negative_exponent ? -1 : 1) * exponent);\n        }\n        const text = this.expression.substring(start_index, this.index) || '';\n        return [negative ? -value : value, text];\n    }\n    /**\n     * in spreadsheet language ONLY double-quoted strings are legal. there\n     * are no escape characters, and a backslash is a legal character. to\n     * embed a quotation mark, use \"\" (double-double quote); that's an escaped\n     * double-quote.\n     */\n    ConsumeString() {\n        this.index++; // open quote\n        const str = [];\n        for (; this.index < this.length; this.index++) {\n            const char = this.data[this.index];\n            if (char === DOUBLE_QUOTE) {\n                // always do this: either it's part of the string (and\n                // we want to skip the next one), or it's the end of the\n                // string and we want to close the literal.\n                this.index++;\n                // check for an escaped double-quote; otherwise close the string\n                // note (1) we already incremented, so check the current value,\n                // and (2) it will increment again on the loop pass so it will\n                // drop the extra one. I note these because this was confusing to\n                // write.\n                if (this.index >= this.length ||\n                    this.data[this.index] !== DOUBLE_QUOTE) {\n                    break;\n                }\n            }\n            str.push(char);\n        }\n        return str.map((char) => String.fromCharCode(char)).join('');\n    }\n    /** run through any intervening whitespace */\n    ConsumeWhiteSpace() {\n        for (; this.index < this.length;) {\n            const char = this.data[this.index];\n            if (char === SPACE ||\n                char === TAB ||\n                char === CR ||\n                char === LF ||\n                char === NON_BREAKING_SPACE) {\n                this.index++;\n            }\n            else\n                return;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://treb/./treb-parser/src/parser.ts?");

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__extends\": () => (/* binding */ __extends),\n/* harmony export */   \"__assign\": () => (/* binding */ __assign),\n/* harmony export */   \"__rest\": () => (/* binding */ __rest),\n/* harmony export */   \"__decorate\": () => (/* binding */ __decorate),\n/* harmony export */   \"__param\": () => (/* binding */ __param),\n/* harmony export */   \"__metadata\": () => (/* binding */ __metadata),\n/* harmony export */   \"__awaiter\": () => (/* binding */ __awaiter),\n/* harmony export */   \"__generator\": () => (/* binding */ __generator),\n/* harmony export */   \"__createBinding\": () => (/* binding */ __createBinding),\n/* harmony export */   \"__exportStar\": () => (/* binding */ __exportStar),\n/* harmony export */   \"__values\": () => (/* binding */ __values),\n/* harmony export */   \"__read\": () => (/* binding */ __read),\n/* harmony export */   \"__spread\": () => (/* binding */ __spread),\n/* harmony export */   \"__spreadArrays\": () => (/* binding */ __spreadArrays),\n/* harmony export */   \"__spreadArray\": () => (/* binding */ __spreadArray),\n/* harmony export */   \"__await\": () => (/* binding */ __await),\n/* harmony export */   \"__asyncGenerator\": () => (/* binding */ __asyncGenerator),\n/* harmony export */   \"__asyncDelegator\": () => (/* binding */ __asyncDelegator),\n/* harmony export */   \"__asyncValues\": () => (/* binding */ __asyncValues),\n/* harmony export */   \"__makeTemplateObject\": () => (/* binding */ __makeTemplateObject),\n/* harmony export */   \"__importStar\": () => (/* binding */ __importStar),\n/* harmony export */   \"__importDefault\": () => (/* binding */ __importDefault),\n/* harmony export */   \"__classPrivateFieldGet\": () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   \"__classPrivateFieldSet\": () => (/* binding */ __classPrivateFieldSet)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nfunction __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nfunction __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\n\n//# sourceURL=webpack://treb/./node_modules/tslib/tslib.es6.js?");

/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!__webpack_require__.g.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = __webpack_require__.g.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n\n//# sourceURL=webpack://treb/./node_modules/util-deprecate/browser.js?");

/***/ }),

/***/ "?ed1b":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://treb/util_(ignored)?");

/***/ }),

/***/ "?d17e":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://treb/util_(ignored)?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./treb-export/src/export-worker/index-modern.ts");
/******/ 	
/******/ })()
;